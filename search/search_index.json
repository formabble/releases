{"config":{"lang":["en"],"separator":"[\\s\\-\\.\\`]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Formabble reference docs - your go-to source for all things API-related to our game development tools, including Formabble itself and Shards, our custom high-level programming language, designed for game development.</p> <p>Check our Formabble\u2019s beginner guide to get rolling with your first project and learn the ins and outs of using the platform.</p> <p>We are currently in closed alpha, and as things are constantly changing, some of the documentation may be slightly outdated or missing documentation for new features. We appreciate your understanding and invite everyone to provide feedback on the documentation and the platform itself.</p> <p>You can contribute through GitHub or chat with us on our Discord server, where we have a dedicated channel for reporting bugs and leaving feedback.</p> <p>We hope you find them helpful and we can't wait to see the incredible things you'll build with our APIs.</p> <p>Use the search box above if you're looking for something specific.</p> <p>Website</p> <p>Demo Video</p> <p>Discord</p> <p>X (Twitter)</p> <p> </p>"},{"location":"guide/1-introduction/","title":"Formabble Guide","text":""},{"location":"guide/1-introduction/#introduction","title":"Introduction","text":"<p>Welcome to Formabble, your all-in-one gateway tool into the world of game creation. This quick-start guide is designed to jumpstart your project by providing:</p> <ol> <li>A brief overview of why you should use Formabble</li> <li>Insights into its key concepts and methodologies</li> <li>A tutorial on how to utilize Formabble and its most useful functions</li> </ol> <p>Note: Formabble is currently in its early alpha stage, which is an exciting phase of development. However, some features are still under development, and encountering bugs or temporary limitations is possible. We value your patience and feedback during this period, as it is crucial in shaping Formabble into a robust and user-friendly game creation platform.</p>"},{"location":"guide/2-why-formabble/","title":"Why Formabble?","text":"<p>\"I wanted a game creation tool that would allow creators to create freely. Sad to say, I find that the current tools we have are too shackled by outdated technology to properly achieve this. It is my firm belief that by leveraging on modern technology and innovation to create a game-engine that is accessible, collaborative and unbounded, only then can we truly empower creators.\" ~ Giovanni Petrantoni</p> <p></p> <p>Here at Formabble we aim to unshackle our creators by making game creation Accessible, Collaborative and Unbounded. In this section we will go through how we achieve this by using current technology and innovations such as AI and real-time multiplayer editing.</p>"},{"location":"guide/2-why-formabble/#accessible","title":"Accessible","text":"<p>Many a projects sadly never come to fruition because game creation is a complex task. Coding logic in-of-itself is already a daunting task, but a creator has to design levels, create assets, test for bugs, optimize, ensure that everything runs smoothly on the desired platform and a slew of other tasks that are too long to list. Formabble alleviates the strain on our creators by making coding and optimization easy for our creators. We do this through AI and our proprietary programming language Shards.</p> <p>Shards is a dataflow visual-esque programming language that revolutionizes game development. With a syntax that is akin to placing blocks together, Shards is incredibly easy for beginner\u2019s to grasp. Furthermore, through its Wires &amp; Meshes, it allows creators to mulithread their programs by simply by plugging the correct Wires into the correct behavior. Creators also are able to run specific logic asynchronously when needed by using specific Wire Activators to activate specific parts of their logic. Furthermore, the simplicity of Shards, with its resemblance to natural language, allows AI models to learn it easily . Thus creators using Formabble\u2019s built-in AI assistant, can manipulate their projects solely through text-prompts, making Formabble truly, an Ai-powered creative playground. Moreover, in Formabble not only can you create games, but seamlessly publish them too. Once creators have brought their visions to life in Formabble with the support of our AI assistant, they can easily share their completed games with the world. Our platform acts as a springboard, enabling immediate publication and distribution of their work. This direct-to-platform publishing capability means that creators can rapidly transition from development to launch. This alongside players also being able to play games directly on Formabble, allows creators to gather feedback, build a community of players, and iterate their games all within the Formabble ecosystem. By reducing the barriers between creation and publication, we empower creators to focus on what they do best \u2013 crafting unique and engaging gaming experiences, while we handle the complexities of distribution and exposure.</p> <p>By simplifying both creation and publication, we lighten the creators' burden, allowing them to craft, iterate, and share their games unrestricted and unrestrained \u2013 truly encapsulating an end-to-end solution for game development and dissemination.</p>"},{"location":"guide/2-why-formabble/#collaborative","title":"Collaborative","text":"<p>As illustrated above, game development is not an easy task for one person to tackle alone. Here at Formabble we are resolute on collaborative game-design. Pioneering the way, Formabble is the Google docs of game creation systems, designed for creators to collaboratively edit games simultaneously.</p> <p>By synchronizing states, multiple creators can load into a Domain and promptly start editing and creating together. Envision a digital workspace where multiple creators come together, each with their own expertise and vision, working in unison on a single game project. One designer might sculpt landscapes, another programs NPC behavior, while a third fine-tunes the physics\u2014all crafting different facets of the same world in real-time. This not only accelerates the development process but also enriches it, allowing for a dynamic interplay of ideas. It's a fluid, organic approach to game creation, promoting an agile development culture where feedback is instant and iteration is constant. Think of it as a \u201cGoogle docs\u201d that provides a real-time multiplayer game building experience.</p> <p>By enabling creators to operate in parallel, Formabble dissolves the traditional bottlenecks of game development. It's a shared space where creativity thrives, unbound by the constraints of sequential workflows. Thus, Formabble doesn't just streamline the creation process\u2014it reinvents it.</p>"},{"location":"guide/2-why-formabble/#unbounded","title":"Unbounded","text":"<p>Most game engines were conceived in an era where game creation was confined to the desktop interface. We firmly believe that game creation has long past transcended being chained to the desktop screen. Recognizing this, Formabble shatters old paradigms, offering a truly unbounded game development experience. Unlike previous game-creation-tools, Formabble is purposly-built to be multi-platformed, not only at the runtime level, but at the editor level. It is designed to be compatible with a broad spectrum of platforms\u2014be it desktop, Mac, mobile phones, or tablets. Thus with Formabble one can edit their project at home, in the office, while on the commute, even on your toilet seat. With this cross-device capability, Formabble empowers you to create whenever and wherever creativity strikes.</p> <p>However, on top of this, Formabble looks ahead with anticipation. At Formabble, we are not just keeping pace with the present\u2014we are building for the future. We predict that game creation will also soon evolve beyond screen interfaces. And for that reason, Formabble is designed with the inevitability of VR and XR interfaces in mind. Evidently, Formabble is a current game-engine that is evolving for a scene that has already outgrown existing technology. This forward-thinking development is driven by our commitment to ensure that as the digital landscape evolves, so too will the tools we provide. With Formabble, you're not just keeping up with the current trends; you're stepping into a realm of endless possibilities, ready to define the next generation of game creation.</p>"},{"location":"guide/3-what-is-shards/","title":"What is Shards?","text":"<p>Shards syntax directly maps a visual model enabling efficient round-trip code generation during visual development. Shards powers an upcoming AI-powered game creation system where communities can play and collaborate in real time. While Shards is often not explicitly seen there, it is the language behind the AI-assisted visual interactions that will allow users to create games and experiences in a low to no-code environment. In Shards, every primitive is a shard, flowing from shard to shard, to build a computational graph that represents a visual model. Example:</p> <p><pre><code>[[1 2 3] [2 3 4] [3 4 5]] | Reduce(Math.Add($0)) | Assert.Is([6 9 12]) | Log\n;=&gt; [6 9 12]\n</code></pre> Even a literal is a shard. <code>[[1 2 3] [2 3 4] [3 4 5]]</code> is internally converted into <code>Const([[1 2 3] [2 3 4] [3 4 5]])</code> shard. Furthermore, each shard was programmed to guarantee the highest standards of performance, with low level optimizations in C++ and Rust.</p>"},{"location":"guide/3-what-is-shards/#goal","title":"Goal","text":"<p>Shards achieves zero-compromise on four goals: Reach, Accuracy, Performance, and Simplicity.</p>"},{"location":"guide/3-what-is-shards/#accessibility","title":"Accessibility","text":"<p>Reach to People</p> <p>Using visual development engines like Formabble, anyone can build complex applications like games, without prior coding skills.</p> <p>Reach of Platforms</p> <p>Shards is available in all major platforms: OS X, Windows, Mac, browser, IOS and Vision Pro</p> <p>Robust Reach</p> <p>Visual development powered by shards is suitable for solving a wide range of problems, from performance demanding games, to utility shell scripts, with batteries included: 550+ shards for all kinds of purposes.</p>"},{"location":"guide/3-what-is-shards/#accuracy","title":"Accuracy","text":"<p>Automatically inferred strong types, and inter-shard type compatibility validation based on the data flowing in and out from shards while building the computational graph.</p>"},{"location":"guide/3-what-is-shards/#performance","title":"Performance","text":"<p>Zero waste visual development</p> <p>Code is manipulated without any unnecessary waste. We achieved through the 1-to-1 direct translation from Shard\u2019s code to the final computational graph. This direct mapping ensures that changes made in one representation can seamlessly translate to the other, making the entire process efficient and error-free.</p> <p>Performant composition</p> <p>The straightforward architecture flow of shards allows for fast composition of the computational graph, which results in quick loading of programs.</p> <p>Performant runtime</p> <p>Inferring and validating types at compile time allows programs to run faster, as we no longer need to worry about types during runtime.</p> <p>Primitive performance</p> <p>Each primitive (Shard) in the computational graph was programmed to the highest standards of performance, using C++ and Rust.</p> <p>Parallel performance</p> <p>Built on top of co-routines. It\u2019s extremely easy to unleash parallelism while maintaining a low syscall count.</p>"},{"location":"guide/3-what-is-shards/#simplicity","title":"Simplicity","text":"<p>Shards is just shards flowing into shards, thus: - Is designed to be visual and easy to understand at a glance. - Trivial implementation and control of game loop code. - Extremely easy to debug and dissect due to the straight forward flow of shards. - Low learning curve to make changes to the code directly.</p> <p> Shards Article</p> <p>For a more in-depth article on the capabilities of Shards, visit: Shards: Coding Simplicity and Power</p> <p>Or check out the github repository</p>"},{"location":"guide/4-getting-started/","title":"Getting Started with the Formabble Interface","text":"<p>In this chapter we will guide you through the UI in Formabble. From creating your domain, to importing your first asset, we will guide you through the essential steps required to get started on making your first game!</p> Creating a Domain <p>After Logging in, you will be greeted with the Main Menu window. To create a domain you can either click on the New Domain button or the Import Domain button.</p> <p>The first method, change the domains category drop down to My Domains. Then upon clicking New Domain, a fresh empty domain will be immediately created. Your domain will be given a randomly generated name and be automatically saved.</p> <p></p> <p>The second method, change the domains category drop down to My Domains. Then, upon clicking the Import Domain, your file explorer window will pop-up, for you to import an .fdb file.</p> <p></p> <p></p> <p>From the file explorer window, you can either import an existing file or type a file name and click save to create a new domain with the specified name.</p> Importing Assets <p>Assets are the lifeblood of any domain. To import assets, either click on the Import button from your Domain Inventory window or simply drag the asset from your file explorer into the Domain Inventory window.</p> <p></p> <p>If the Import button was been clicked, the file explorer window will pop up for you to import your asset. Certain asset categories can accept multiple file extensions. Remember to click on the correct file extension.</p> File Category Extension Type Scripts .shs Textures .jpg .png Meshes .glb Audio .ogg .mp3 <p>Once an asset has been selected, or has been dragged in the Import Asset window will appear. Click on Import button to import the asset.</p> <p></p> <p>Once imported, it will appear in the Domain Inventory. (Click on the Category dropdown to change the category of the assets currently being shown in the inventory. Change it accordingly if you don't see your asset.)</p> <p></p> <p></p> <p>Congratulations! You have imported your first asset!</p> Adding References to an asset <p>It is not uncommon for your scripts to reference an asset. You can do this at two points. When you are importing an asset and after it has been imported. Let\u2019s try referencing the apple that we have just imported.</p> <p>In this example, we are importing a script that will render our apple 3d model. To do that it needs to reference our apple.</p> <p></p> <p>The first method, to reference our apple, with the Import Asset window open, drag the apple from the Domain Inventory into the References section in the Import Asset window.</p> <p></p> <p>Once the asset has been added it will appear under References in the Edit Asset window.</p> <p></p> <p>The second way to do it is after you have imported the script. From the Domain Inventory window, click on the Asset Options button.</p> <p></p> <p>Once the Asset Options button has been clicked, the Asset Options window will appear.</p> <p></p> <p>From the Assets Options Window, click on Edit Button to bring up the Edit Asset Window.</p> <p>From the Edit Asset Window click on the References drop down toggle to see all of the asset's current references.</p> <p></p> <p>From here, simply drag the asset you want to reference from the Domain Inventory into the References category in the Edit Asset Window.</p> <p></p> <p>Lastly click on Save to sve your changes.</p> <p></p> <p>If you accidentally add the wrong reference, you can also remove it. First click on the reference to remove from the References list, thenSimply click on the Delete button next to the referenced asset in the Edit Asset Reference List.</p> <p></p> <p>Once removed, the asset will disappear from the References list. Lastly, click on Save to save your changes.</p> Formalizing Assets <p>Now that you have your assets uploaded, the next step is to add them into your domain. To do this, from the Asset Options Window, click on the Formalize button.</p> <p></p> <p>Alternatively, simply drag the asset from Domain Inventory to the domain.You should see your form in your domain! Do note that if your scripts has errors or if it does not have the requires references, it will not formalize. Formabble also can\u2019t formalize images or 3d models as they are. They have to be referenced in a script and then formalized. To see how to create such a script, refer to the \u201cload-3d-asset\u201d and \u201cload-2d-asset\u201d samples from the samples domain.</p> <p></p> Form Gizmos <p>With your assets formalized inside your domain, the next step to creating your game is to manipulate these assets. The Formabble gizmos will help you in this task. When you click on your 3d form, you will see the form gizmo pop-up. (The Form Gizmo will not pop-up for non-3D forms, such as UI elements).</p> <p></p> <p>Now I will guide you through what each of the buttons in the form gizmo will do. The button on the top right will put the gizmo into translation mode. In translation mode , you will see arrows on your forms. Click on the appropriate arrow to change the form\u2019s X, Y and Z translation. To put it simply, it is the \"move\" button.</p> <p></p> <p>You can also click on the plane square\u2019s to move the form freely along the plane. Clicking on the blue square for example will move the form freely along the XY plane.</p> <p></p> <p>Next, clicking on the center button on the top row will put the gizmo into rotation mode. In rotation mode, you will see multiple rings around your forms. Click on the appropriate rings and drag your mouse pointer to change the rotation of your form.</p> <p></p> <p>Lastly clicking on the button on the top right will put the gizmo into scaling mode. In scaling mode, click on the appropriate cubes and drag your mouse to change the X,Y and Z scale of your form.</p> <p></p> <p>Moving on to the bottom row of buttons, the button on the left will delete your form.</p> <p></p> <p>The second button from the left, will duplicate your form.</p> <p></p> <p>The button after that does nothing for now. TODO</p> <p>The button after that also does nothing for now TODO</p> <p>The button on the most right will hide all the other buttons on the gizmo. Click it again unhide them.</p> <p></p> Domain Side Menu <p>In a domain you will find a Side menu. The buttons in this side menu each have different functionality that will help with your navigation and workflow effeciency.</p> <p></p> <p>This section will get you up to speed on what each button does. The first button is the menu button. Upon clicking the menu button, you will see a list of buttons that each correspond to a window in your domain.</p> <p></p> <p></p> Editing Asset Code <p>Formabble supports an all in one experience and thus allows creators to edit their code within Formabble itself. To do this, from the Domain Inventory window, click on the asset's Option button and from the Asset Options menu, click on Edit.</p> <p></p> <p>Then from the Edit Asset window, edit the asset's code in the Code Editor section.</p> <p></p> <p>Remember to click on Save to save your changes</p> <p></p> <p>Should you wish, you can also edit your code using your preferred Code Editor. To do this, from the Edit Asset window, click on Open Locally. This will open your file explorer to the location of the selected file. From here you can open this file using your preferred code editor. Saving your changes on your code editor will automatically update the asset in Formabble for a seemless experience.</p> <p></p> Deleting Assets <p>Sometimes we might accidentally add an asset or have an asset that is now redundant much later on in development. To delete an click on the asset in the Domain Inventory window. and click on Asset Options button.</p> <p></p> <p>Once the Update Asset Window is open, click on Delete(permanently) to delete the asset from your Domain Inventory. Warning! Deleting an asset will delete it from all objects that are referencing it. This might kill your forms and leave them as dead forms. Remember to check through all your assets before deleting them.</p> <p>Asset Delete Button</p> Editor Settings <p>In the Settings window, you will find useful settings to tune your Formabble interface to your needs.</p> <p>Settings Menu</p> <p>Show world grid - checking/unchecking this box will hide/show the world grid</p> <p>World Grid Step Size - Changing this value would increas/decrease the size of your world grid.</p> <p>World Grid Size - Changing this value will increase/decrease how far spread is your world grid in your domain.</p> <p>World Grid Opacity - This value controls how opaque/transparent the lines on your world grid are.</p> <p>Editor Camera field of View - Will increase/decrease how zoomed in your field of view is.</p> <p>Editor UI Scale - will increase/decrease how large/small the Formabble UI panels will appear on your screen.</p>"},{"location":"guide/4-getting-started/#domain","title":"Domain","text":"<p>Functionality tbd</p> <p></p>"},{"location":"guide/4-getting-started/#settings","title":"Settings","text":"<p>The Settings button either hide/show the Settings Menu where you can edit your Editor Settings.</p> <p></p> <p></p>"},{"location":"guide/4-getting-started/#publish","title":"Publish","text":"<p>Functionality tbd</p> <p></p>"},{"location":"guide/4-getting-started/#members","title":"Members","text":"<p>The Members button will either hide/show the Domain Sharing Window, which houses all the options regarding to Domain Sharing.</p> <p></p> <p></p>"},{"location":"guide/4-getting-started/#chat","title":"Chat","text":"<p>The Chat button will either hide/show the Chat Window which can be used to chat with other members in your domain or be used to display your Domain Log.</p> <p></p> <p></p>"},{"location":"guide/4-getting-started/#reload","title":"Reload","text":"<p>Functionality tbd</p> <p></p> <p>The next button in the side menu is the Things button.</p> <p></p> <p>The Things button will reveal buttons that handle assets and forms in your domain.</p> <p></p>"},{"location":"guide/4-getting-started/#ola","title":"OLA","text":"<p>The OLA button will either hide/show the Open Library of Assets window, which is where you can download or purchase assets that have been uploaded by other users into our library of open assets.</p> <p></p> <p></p>"},{"location":"guide/4-getting-started/#inventory","title":"Inventory","text":"<p>The Inventory button will either hide/show the Inventory Window which houses all the assets and forms that have been imported into your domain.</p> <p></p> <p></p>"},{"location":"guide/4-getting-started/#forms","title":"Forms","text":"<p>The Forms button will either hide/show the Forms Details window where you can find information on the Form currently selected.</p> <p></p> <p></p> <p>The next button in the Side Menu is the Camera button. The Camera button will recenter your camera back to the camera origin.</p> <p></p> <p>The button following this is the Hide/Unhide button. This button will either hide or reveal all open Formabble windows and UI in the scene.</p> <p></p> <p>The last buttons in the Side Menu are the Undo and Redo buttons. Undo will undo your last action while Redo will enact the last action that has been undone. It is important to note that Undo and Redo is only limited to actions done by you and not your members.</p> <p></p>"},{"location":"guide/5-my-first-level/","title":"My First Level Tutorial","text":"<p>The fastest way to learn a new tool is to get your hands dirty and try out yourself. In this chapter we will dive headfirst into Formabble, applying everything the guide has taught you thus far and create your own playable platformer level. Lets get to it!</p>"},{"location":"guide/5-my-first-level/#step-1-creating-your-domain","title":"Step 1 - Creating Your Domain","text":"<p>To create your domain, from the Main Menu, click on New Domain.</p> <p></p> <p>After a few seconds, you should be greeted by a fresh empty domain. Congratulations you have created your first domain!</p> <p></p>"},{"location":"guide/5-my-first-level/#step-2-importing-assets","title":"Step 2 - Importing Assets","text":"<p>Assets are the pieces to the jigsaw that is a level. Thus before we start creating our level, we have to get our pieces ready. You can find all the assets that will be required and are to be imported here. The first asset we will import is the \u201cmain-brain\u201d. This asset will act as the control center for our level, coordinating and linking all the other pieces. To import the \"main-brain\", first, drag your asset from your file explorer into your Domain Inventory window. The Import Asset window will appear. Next, click on Import.</p> <p></p> <p>Change the Domain Inventory category to Scripts.</p> <p></p> <p>You should see the \u201cmain-brain.shs\u201d inside your Domain Inventory now.</p> <p></p> <p>Next, formalize the main-brain by clicking on the Formalize Button.</p> <p></p> <p>Some in-game UI will appear on your screen. This is because main-brain is a form that has some ui-behavior. You should also see the main-brain form on your Domain Forms list.</p> <p></p> <p></p> <p>Well done! You have just inserted your first piece. The next step is to import all the other assets that we will need for our level.</p>"},{"location":"guide/5-my-first-level/#step-3-adding-assets-with-references","title":"Step 3 - Adding Assets with References","text":"<p>The next pieces to import would be the floor tiles which will act as platforms for our game. Let\u2019s start with floor-tile-1-START.</p> <p>Similar to how we imported the main-brain , click on import and import floor-tile-1-START from the folder.</p> <p>Once you have imported floor-tile-1-START and try to formalize it, you will realize that something is wrong.</p> <p></p> <p>Notice that it is formalized as a failed form. This means that there is something wrong with the asset\u2019s script and it did not formalize properly. Specifically for this case, floor-tile-1-START has a reference that we have not added yet.</p> <p>In floor-tile-1-START, we are accessing the global variables set by main-brain. To access these global variables , we need to ensure that the floor-tile-1-START asset is referencing the main-brain asset properly. To fix this, we have to add main-brain as a reference.</p> <p>First click on floor-tile-1-START in the Domain Inventory Window and then click on Edit.</p> <p></p> <p>Upon clicking on Edit, you will be greeted with the Edit Asset window.</p> <p></p> <p>From floor-tile-1-START \u2019s Edit Asset window, click on the References toggle to see all the assets that floor-tile-1-START \u2018s references.</p> <p></p> <p>Currently, the References list is empty. To populate it, drag the main-brain asset from the Domain Inventory into the References list.</p> <p></p> <p>You should see that floor-tile-1-START asset is now referencing main-brain.</p> <p>Lastly, click on the Save button, to save your changes.</p> <p></p> <p>Now try to Formalize floor-tile-1-START again. You should see a green tile!.</p> <p></p> <p>The next asset that we are going to import is floor-tile-2-END. First click on Import.</p> <p></p> <p>Next from the File Manager window, navigate to where your assets were downloaded and click on Open.</p> <p></p> <p>floor-tile-2-END is similar to floor-tile-1-START, in that floor-tile-2-END too also has to be fixed before it can be formalized properly. Like floor-tile-1-START, it also references main-brain. We can also add references to scripts from the Import Asset window which should have popped up on the screen.</p> <p>From this window, we can drag assets into the References list to add references. Drag the main-brain asset into the floor-tile-2-END reference list and click on Import.</p> <p></p> <p>Click on Formalize and you should see red tile!</p> <p></p> <p>The rest of the pieces need to have their references added similar to how floor-tile-1-START and floor-tile-2-END were fixed (with minor variations). Try to fix them yourself, or if you need help, click on the appropriate toggles below to view the proper steps for each asset.</p> floor-tile-3-DESTROYABLE <p>floor-tile-3-DESTROYABLE also references main-brain and needs its short ids fixed.</p> <ol> <li> <p>From the Domain Inventory window click on import and import in floor-tile-3-DESTROYABLE</p> </li> <li> <p>From the Import Assets window, add main-brain into the reference list and click on Import.</p> </li> <li> <p>Click on Save.</p> </li> </ol> <p></p> floor-tile-4-UNDESTROYABLE <p>floor-tile-4-UNDESTROYABLE does not reference main-brain, however it still dispatches information to tiself and thus needs its short-Ids fixed.</p> <ol> <li> <p>From the Domain Inventory window click on import and import in floor-tile-4-UNDESTROYABLE</p> </li> <li> <p>From the Import Assets window, click on Import.</p> </li> <li> <p>Click on Save.</p> </li> </ol> <p></p> cubeFace1 <p>cubeFace1 is a glb mesh that will be referenced in player-1</p> <ol> <li> <p>From the Domain Inventory window click on import and import in cubeFace1</p> </li> <li> <p>From the Import Assets window, click on Import.</p> </li> </ol> cubeFace2 <p>cubeFace2 is a glb mesh that will be referenced in player-2</p> <ol> <li> <p>From the Domain Inventory window click on Import and import in cubeFace2.glb</p> </li> <li> <p>From the Import Assets window, click on Import.</p> </li> </ol> player-1 <p>player-1 references cubeFace1.</p> <ol> <li> <p>From the Domain Inventory window click on Import and import in player-1</p> </li> <li> <p>From the Import Assets window, add cubeFace1 into the reference list and click on Import.</p> </li> <li> <p>Click on Save.</p> </li> </ol> <p></p> player-2 <p>player-2 references cubeFace2 and also dispatches information to the different behaviors in itself.</p> <ol> <li> <p>From the Domain Inventory window click on import and import in player-2</p> </li> <li> <p>From the Import Assets window, add cubeFace2 into the reference list and click on import.</p> </li> <li> <p>Click on Save.</p> </li> </ol> <p></p> <p>Congratulations! You have successfully imported all your assets!</p>"},{"location":"guide/5-my-first-level/#step-4-making-your-level","title":"Step 4 - Making your level.","text":"<p>Now that you have all your pieces, we can start designing our level. Before we start creating our architectural masterpieces, lets start small first, to see how the different pieces work. main-brain should have already been formalized, if it is not formalized, formalize main-brain first.</p> <p>1- First formalize floor-tile-4-UNDESTROYABLE.</p> <p></p> <p>2- Next click on the freshly formalized form to bring up its Form Details window.</p> <p></p> <p>3- From the Form Details window, you can manipulate the form\u2019s transformations and also its exposed variables. Change the form\u2019s X translation to 2. You can do this either through the Form Details window or through the form\u2019s Translation Gizmo.</p> <p></p> <p>4- From the Form Gizmo, click on the Duplicate Icon to duplicate the form.</p> <p></p> <p>5- Give the duplicated form a -2 X-axis translation. These two platforms will serve as the starting point for our player-1 and player-2 cubes.</p> <p></p> <p>6- Now formalize floor-tile-1-START.</p> <p></p> <p>7- Give this formalize floor-tile-1-START an xyz translation of (2 0 -2).</p> <p></p> <p>8- Duplicate floor-tile-1-START and give it a xyz translation of (-2 0 -2)</p> <p></p> <p>9- Next, formalize floor-tile-3-DESTROYABLE and give it an xyz translation (2 0 -4)</p> <p></p> <p>10- Duplicate floor-tile-3-DESTROYABLE and give it an xyz translation of (-2 0 -4)</p> <p></p> <p>11- Next formalize floor-tile-4-END and give it a translation of (-2 0 -6)</p> <p></p> <p>12- Next duplicate floor-tile-4-END and give it a translation of (-2 0 -6)</p> <p></p> <p>13- Under Physics Subsystem on the Form Details window, edit the mode of all the tiles on the left to 2. (The way the tiles are coded is that their modes dictate whether they will register collisions from player-1 or player-2. Thus the tiles on the left will be for player-2.)</p> <p></p> <p>14- Click Play (the button on the top right) and you will see both player-1 and player-2 spawn.</p> <p></p> <p></p> <p>15- player-1 is controlled by using the arrow keys while player-2 can be controlled by using WASD keys. Move player-1 and player-2 onto the green floor-tile-1-START tile. Upon collision with the floor-tile-1-START tile, the timer will start counting.</p> <p></p> <p>16- Now move player-1 and player-2 to the floor-tile-2-END tiles. You will see firstly, the time counter will stop counting. Secondly, there will be a High Score listed on the High Score window. And lastly, you will see the two floor-tile-3-DESTROYABLE tiles slowly disappear.</p> <p></p> <p>17-  Now click reset to reset the player\u2019s positions, the tiles, the time and the high score.</p> <p>Great! Now that we know what all the pieces do, you can start making the level!</p>"},{"location":"guide/5-my-first-level/#step-5-making-your-level","title":"Step 5- Making your level","text":"<p>With the basic pieces in place, you can manipulate and duplicate these pieces to create your very own level! Unleash your creativity and go wild! Below you will see how we have decided to design our level. The way it is to be played is for one player to control both player-1 and player-2 and try to get them from the start tiles to the end tiles in the shortest amount of time possible.</p> <p></p>"},{"location":"guide/6-useful-shards/","title":"Useful FBL Shards","text":"<p>Welcome to the comprehensive guide to Formabble's suite of Formabble specific Shards\u2014your essential resource for unlocking the full potential of our game creation system. Whether you're a seasoned developer or just starting your journey into game design, this documentation is designed to provide you with a detailed understanding of the powerful tools at your disposal. Through clear and concise definitions and code examples, our aim is to help you understand the context and application of these shards, so that you can integrate them into your projects effectively. Let's dive into the different Formabble specific shards that can help shape your imagination, into reality!</p>"},{"location":"guide/6-useful-shards/#fbl-formalize","title":"Fbl Formalize","text":"<p>The first step of creating any game is to place your meticulously created pieces into the domain. Normally, you can easily do this using the convenient Formalize button, however you can also do this in-script using <code>Fbl.Formalize</code>.</p> Input/Output/Parameter Data Type Description Input Table Takes in a table that includes a variable that is to be dispatched and the specific behavior to dispatch to. Example table: Parameter - FormID: String Takes in the long id or name of the form that you want to formalize as a string. The form long id can be found in the Domain Inventory Window. Parameter - Wait Boolean Dictates whether the the program will wait for the form to fully formalize before resuming. Output Int16 Returns the formalized form\u2019s UUID as an Int16 <p></p> <p>Example</p> <pre><code>{Graphics: {\"anIIEJZ5Z/direction\": 1}}\nFbl.Formalize(\"ndnkXDDGZkYOruIIEJZ5Z\" Wait: true)\n= form-uuid\n</code></pre> <p>In this example, direction is being assigned a value of 1 and then is then set in the form \"ndnkXDDGZkYOruIIEJZ5Z\" that is being formalized. The program then waits for the form to be fully formalized, before updating the variable form-uuid with the output of <code>Fbl.Formalize</code>. (If Wait is set to false, it will update form-uuid before the new form is fully formalized. There are many scenarios where you would want a script to formalize forms into the domain instead of using the formalize button. Having a mob spawner to spawn mobs into the map for example, or having a tower spawn fireballs to strike at the players.</p>"},{"location":"guide/6-useful-shards/#fbldeform","title":"Fbl.Deform","text":"<p>Like two sides of a coin, the ability to create also comes with the ability to destroy. Similar to formalizing, while there are convenient buttons to easily delete forms, you can also delete forms in-script using <code>Fbl.Deform</code>.</p> Input/Output/Parameter Data Type Description Input Int16 Takes in the form UUID of form to be destroyed as an int16. If input is none, the form with the script attached will be the one to be deformed. Parameter - FormID: tbd tbd Parameter - Wait Boolean Dictates whether the the program will wait for the form to fully formalize before resuming. Output Int16 Returns the formalized form\u2019s UUID as an Int16 <p></p> <p>Example</p> <pre><code>form-uuid | Fbl.Deform\n</code></pre> <p>Continuing from the example in Fbl.Formalize, this example is deleting the form with the Form UUID stored in the variable form-uuid. In other words this example would delete the form formalized in the example in Fbl.Formalize.</p> <p>Similarly, there are also numerous scenarios where you would want to delete a form in-script. Using <code>Fbl.Deform</code> to delete a monster when its health reaches zero or deleting a bullet once it has made contact for example.</p> <p>fbl/pose</p> <p>Naturally, just placing forms into a scene does not make a game. <code>fbl/pose</code> gives creators the ability to manipulate the translation, rotation and the scale of a form. <code>fbl/pose</code> in essence is a table with the transform, rotation and scale keys. To control the object\u2019s transformation, one simply has to grab the appropriate values from the respective keys. Instead of using <code>fbl/pose | Take(scale)</code>, you can instead use <code>fbl/scale</code> to directly take the form\u2019s scale. <code>fbl/rotation</code>and <code>fbl/translation</code> can be used the same way . Do note that <code>fbl/pose</code> is only available in Graphics behavior.</p> <p>Example</p> <pre><code>fbl/rotation | Math.Rotation &gt;  rot-mat\nfbl/translation | Math.Translation &gt; tsl-mat\nfbl/scale | Math.Scaling &gt; scl-mat\n\ntsl-mat | Math.MatMul(rot-mat) | Math.MatMul(scl-mat) &gt; transform-matrix\n\ntransform-matrix\nGFX.glTF(Copy: asset/r0)\n@fbl/draw([])\n</code></pre> <p>In this example, we are taking rotation, translation and scale from <code>fbl/pose</code> directly by using <code>fbl/rotation</code>, <code>fbl/translation</code> and <code>fbl/scale</code> respectively. We are then using <code>Math.Rotation</code>, <code>Math.Translation</code> and <code>Math.Scaling</code> to create a rotation matrix (rot-mat), a translation matrix (tsl-mat) and a scale matrix (scl-mat). These matrixes are then put together using <code>Math.Mul</code> to create a transformation matrix (transform-matrix) which is in-turn fed into GFX.glTF to render the a 3D asset. Using <code>fbl/pose</code> to control the transformation of a form is good practice as it enables one to control said transformation using the form gizmos.</p>"},{"location":"guide/6-useful-shards/#fblfetch","title":"Fbl.Fetch","text":"<p>Forms in Formabble are not isolated individuals that exist in a void. They can interact with each other seamlessly. One way to have forms interact is through <code>Fbl.Fetch</code>. It allows a form to grab variables from another behavior within the same form or from another form. Do note that <code>Fbl.Fetch</code>, the first time it is called, it will suspend the program momentarily till the variable is successfully fetched , subsequently it will return the most recent value.</p> Input/Output/Parameter Data Type Description Input Int16 If the form wants to fetch a variable from another form, place the Form UUID of the form to take the variable from as an Int16 as input. If you are fetching from another behavior in the same form, use none as input. Parameter - Behavior: WirePoolType::Enum The behavior to grab the variable from. Eg. WirePoolType::UI, WirePoolType::Logic, WirePoolType::Graphics, WirePoolType::Physics Parameter - Name: String short id of the form/name of the variable to fetch Parameter - Key: String Optional parameter for if the variable being fetched is a table Parameter - NoCache: Boolean Cache or not to cache variable states. Parameter - Silent: Boolean To Ignore or not Ignore failures without logging Output Any Outputs the variable being fetched. <p></p> <p>Example</p> <pre><code>none\nFbl.Fetch(Behavior: WirePoolType::UI Name: \"aZmg4RodY/equipment-index\")\nExpectInt &gt; equipment-index\n</code></pre> <p>In this example, we are fetching the variable equipment-index from the form aZmg4RodY from UI behavior. Since the output of the <code>Fbl.Fetch</code> is type Any, we need an <code>ExpectInt</code> shard before pushing it into the variable equipment-index. If the variable being fetched from is housed in another form, replace none with the Form UUID of the form that hosts said variable. <code>Fbl.Fetch</code> can be used useful when there is a main form that acts as a logic center where every other form in the level can fetch data from.</p> <p>Creating Namespaces</p> <p>It is immportant to note that by creating a name space for a variable. It eliminates the need for a short id to use <code>Fbl.Fetch</code></p> <p>Example</p> <pre><code>@wire(main-graphics-wire {\n  Once({\n    10 &gt;= translation\n  })\n\n  none\n  Fbl.Fetch(Behavior: WirePoolType::Physics Name: \"physics/translation\")\n\n  &gt; translation | Log(\"translation\")\n})\n\n@wire(main-physics-wire {\n  Once({\n    0 &gt;= physics/translation\n  })\n})\n</code></pre> <p>This way, we will not have to replace the short-id's every single time we want to use our assets that use <code>Fbl.Fetch</code> making them versatile and re-usable.</p>"},{"location":"guide/6-useful-shards/#fbldispatch","title":"Fbl.Dispatch","text":"<p>On the flipside, <code>Fbl.Dispatch</code> can be used to send variables from a behavior in a form to another behavior in the same from or another form. Similarly, like <code>Fbl.Fetch</code>, <code>Fbl.Dispatch</code>, the first time it is called, will suspend the program momentarily till the variable is successfully dispatched, subsequently it will return the most recent value.</p> Input/Output/Parameter Data Type Description Input Any Variable to be dispatched Parameter - Form: Int16/Int Form UUID or Enitty Id of the form to dispatch to. Form UUID can be found in the Form Details window or by using Fbl.FormId. Omit this parameter if sending variable to different behavior within the same form. Parameter - Behaviour: WirePoolType::Enum The behavior to dispatch the variable to. Eg. WirePoolType::UI, WirePoolType::Logic, WirePoolType::Graphics, WirePoolType::Physics Parameter - Name: String The variable name in the dispatch destination to update. Parameter - NoCache: Boolean Cache or not to cache variable states. Output none none <p></p> <p>Example</p> <pre><code>direction |\nFbl.Dispatch (Form: form-uuid Behavior: WirePoolType::Graphics Name:\"anIIEJZ5Z/direction\")\n</code></pre> <p>Here, we are dispatching the variable direction to the form with a Form UUID stored in the variable form-uuid. It is updating the variable direction in Graphics behavior. Continuing from the example in <code>Fbl.Formalize</code>, this example will send the variable direction to the form that has just been formalized. If you are sending variables from different behaviors within the same form, omit the <code>Form:</code> parameter. <code>Fbl.Dispatch</code> is especially when sending transformation-matrixes from Graphics behavior to Physics behavior as a psuedo way of making <code>fbl/pose</code> available in Physics behavior.</p> <p>Creating Namespaces</p> <p>It is immportant to note that by creating a name space for a variable. It eliminates the need for a short id to use <code>Fbl.Dispatch</code></p> <p>Example</p> <pre><code>@wire(main-graphics-wire {\n  Once({\n    10 &gt;= translation\n  })\n  translation\n  Fbl.Dispatch(Behavior: WirePoolType::Physics Name: \"physics/translation\")\n})\n\n@wire(main-physics-wire {\n  Once({\n    0 &gt;= physics/translation\n  })\n\n  physics/translation | Log(\"physics/translation\")\n})\n</code></pre> <p>This way, we will not have to replace the short-id's every single time we want to use our assets that use <code>Fbl.Dispatch</code> making them versatile and re-usable.</p>"},{"location":"guide/6-useful-shards/#fblformid","title":"Fbl.FormId","text":"<p><code>Fbl.FormId</code> will return the Form UUID of the form that it is called from. Needless to say, the Form UUID is useful when used in conjunction with the other shards demonstrated above.</p>"},{"location":"guide/7-fbl-samples/","title":"Formabble Samples","text":"<p>Upon loading Formabble, you will see a Sample Domain that has been shared with. This Domain provides a selection of sample forms, each designed to highlight the functionalities and versatility of different Shards within the Formabble environment. These samples however, are more than just demonstrations\u2014they are also practical tools for game creation. We encourage you to interact with these samples. Experimenting with them will offer you a clearer perspective on the potential of Formabble and its Shards. Feel free to also adopt and adapt these samples into your own domain for your creations. This page will provide a summary of what each form demonstrates.</p>"},{"location":"guide/7-fbl-samples/#3d-collision-character","title":"3d-collision-character","text":"<p>This sample renders a 3d-character model and gives it a rigid body that can interact and collide with other rigid bodies using <code>Physics.Cuboid</code>and <code>Physics.Dynamicbody</code>. These shards allows the 3d model to respond to gravity and other forces. We then relay the information provided by the rigid-body from physics-behavior to graphics behavior using fbl-dispatch to update the position of the rendered 3d-model. Formalize \"3d-collision-floor\" and \"3d-collision-dynamic-cube\" along with this sample,to see the different physics bodies interacting with each other.</p>"},{"location":"guide/7-fbl-samples/#3d-collision-dynamic-cube","title":"3d-collision-dynamic-cube","text":"<p>This sample renders a cube and gives it a rigid body that can interact and collide with other rigid bodies using <code>Physics.Cuboid</code> and <code>Physics.Dynamicbody</code>. These shards allows the 3d cube to respond to gravity and other forces. We then relay the information provided by the rigid body from physics-behavior to graphics behavior using <code>Fbl.Dispatch</code> to update the position of the rendered cube. Formalize \"3d-collision-floor\" and \"3d-collision-character\" along with this sample, to see the different physics bodies interacting with each other.</p>"},{"location":"guide/7-fbl-samples/#3d-collision-floor","title":"3d-collision-floor","text":"<p>This sample renders render a flat cube to act as a floor and gives it a rigid body using <code>Physics.Cuboid</code> and <code>Physics.StaticBody</code>. This allows it to affect other <code>Physics.Dynamic</code> bodies in the scene. Use <code>Physics.KinematicBody</code> instead if you want the floor to be moveable. Formalize \"3d-collision-character\" and \"3d-collision-dynamic-cube\" along with this sample to see the different physics bodies interacting with each other.</p>"},{"location":"guide/7-fbl-samples/#angle-movement-sample","title":"angle-movement-sample","text":"<p>This sample formalizes a 2D-ship. This ship moves with acceleration and its movement is influenced by the ship's rotation using trigonometry shards such as <code>Math.Cos</code> and <code>Math.Sin</code>.</p>"},{"location":"guide/7-fbl-samples/#animation-2d-sample","title":"animation-2d-sample","text":"<p>In this sample, we demonstrate how to create a 2d-animation. We do this, by placing the different frames of our 2d-animation into a sequence and cycling through the image that is rendered using <code>UI.Image</code>.</p>"},{"location":"guide/7-fbl-samples/#animation-3d-sample","title":"animation-3d-sample","text":"<p>In this sample, we render a 3d model with animations. To do this, we take the different animations that are present in the gltf file and tell the AnimationController in <code>GFX.glTF</code> whih specific animation to play.</p>"},{"location":"guide/7-fbl-samples/#button-input-sample","title":"button-input-sample","text":"<p>This sample we demonstrates how a 2d animated character can be made to move using button inputs. We do this by using <code>Input.KeyDown</code> and <code>Input.KeyUp</code> shards to change the state of our character. We then dispatch this information from input-behavior which governs input to ui-behavior which governs rendering our image.</p>"},{"location":"guide/7-fbl-samples/#conditionals-sample","title":"conditionals-sample","text":"<p>This sample explores how conditionals can be created using <code>If</code> and When shards alongside comparison shards like <code>Is</code>, <code>IsMore</code>, <code>IsLess</code>, <code>IsLessEqual</code>, <code>IsMoreEqual</code>. Conditionals are the bread and butter to controlling game behavior.</p>"},{"location":"guide/7-fbl-samples/#dispatch-communication-between-behavior","title":"dispatch-communication-between-behavior","text":"<p>This sample demonstrates how we can establish a two-way communication between ui-behavior and logic-behavior using <code>Fbl.Dispatch</code> and <code>Fbl.Fetch</code>. This allows ui-behavior to communicate with logic-behavior to control the equipment table shown on screen. <code>Fbl.Dispatch</code> is a shard that sends information to a specific behavior within the same form or another form. <code>Fbl.Fetch</code> on the other hand is a shard that retrieves information from another behavior within the same form or another form.</p>"},{"location":"guide/7-fbl-samples/#dispatchvsspawn","title":"DispatchVsSpawn","text":"<p>This sample demonstrates the differences between <code>Detach</code> and <code>Spawn</code> shards. Both of these shards provide the means to run wires asynchronously from the main parent wire. Both <code>Detach</code> and <code>Spawn</code> will attach its specified wire in the same mesh and behavior as it's parent wire. The key difference is that only one unique wire can be detached at any given time. If the same wire were to be detached again, the shard will be ignored. In contrast, <code>Spawn</code> will and can create an number number of unique copies of the specified wire.</p>"},{"location":"guide/7-fbl-samples/#dovsstepsample","title":"DoVsStepSample","text":"<p>This sample demonstrates the differences between <code>Do</code> and <code>Step</code> shards. Both <code>Do</code> and <code>Step</code> shards will execute a specified wire. However, <code>Do</code> will execute a shard to its completion, even if there are <code>Pause</code> shards within the wire it is executing. <code>Step</code> on the otherhand, will execute the specified wire, but will relinquish control back to the parent wire if it was paused. When the wire is stepped again, its state is progressed by continuing the wire from where it was last left.</p>"},{"location":"guide/7-fbl-samples/#fbl-formalize","title":"fbl-formalize","text":"<p>This sample demonstrates how we can have a form that formalizes other forms using <code>Fbl.Formalize</code>.</p>"},{"location":"guide/7-fbl-samples/#fbl-formalize-mascot","title":"fbl-formalize-mascot","text":"<p>This is the sample that \"fbl-formalize\" uses to demonstrate formalizing other forms using <code>Fbl.Formalize</code>. It is a 3-character with animations that will move left or right when the left or right directional keys are pressed.</p>"},{"location":"guide/7-fbl-samples/#forms-interaction-1","title":"forms-interaction-1","text":"<p>In this sample we demonstrate how \"forms-interaction-1\" interacts and sends instructions to \"forms-interaction-2\". We achieve this by using the output from <code>Fbl.Formalize</code> to obtain the form uuid, and subsequently using this uuid as input for <code>Fbl.Dispatch</code> to send instructions to that specific form. We also use this uuid in <code>Fbl.Fetch</code> to set up a two way communication between the two forms.</p>"},{"location":"guide/7-fbl-samples/#forms-interaction-2","title":"forms-interaction-2","text":"<p>In this sample we are showcasing how \"forms-interaction-1\" can interact and send instructions to \"forms-interaction-2\". \"forms-interaction-2\" is a 3D character that receives the instructions from \"forms-interaction-1\". It will move left, or right or stand still depending on the instruction received from \"forms-interaction-1\".</p>"},{"location":"guide/7-fbl-samples/#load-2d-asset","title":"load-2d-asset","text":"<p>This sample demonstrates how to render 2D assets using the <code>UI.Image</code> shard in ui-behavior.</p>"},{"location":"guide/7-fbl-samples/#load-3d-asset","title":"load-3d-asset","text":"<p>In this sample, we render a 3D model using the <code>GFX.glTF</code> shard. <code>GFX.glTF</code> requires a transformation matrix to render the 3d model. To create this  transformation matrix, we use <code>fbl/translation</code>, <code>fbl/rotation</code> and <code>fbl/scale</code> to provide the translation, rotation and scale values required.</p>"},{"location":"guide/7-fbl-samples/#load-other-forms-assets","title":"load-other-forms-assets","text":"<p>This sample demonstrates how a form can reference other forms. Here, we reference \"form-to-load-defense\" and \"form-to-load-attack\" to have our character attack and defend accordingly. We do this by setting up a namespaces for our <code>@template</code> and <code>@define</code> in \"form-to-load-defense\" and \"form-to-load-attack\". Ensure that \"form-to-load-defense\" and \"form-to-load-attack\" are added to the reference list of this form. You now can call any template, definitions and wires from the referenced forms.  Splitting up your code into different forms that reference each other is a good way to organize your code, especially for bigger and more complex projects.</p>"},{"location":"guide/7-fbl-samples/#matrix-transformation-sample","title":"matrix-transformation-sample","text":"<p>This sample we demonstrates how we can move a 3d model by changing the translation, rotation or scale of its transformation matrix.</p>"},{"location":"guide/7-fbl-samples/#resume-wire-sample","title":"resume-wire-sample","text":"<p>This sample shows how we can pause and resume the state of a wire using the <code>Suspend</code> and <code>Resume</code> shards. Do note that Restart can also be used in place of <code>Resume</code>. However unlike <code>Resume</code>, which resumes the wire from its current suspended state, Restart runs the wire from the beginning.</p>"},{"location":"guide/7-fbl-samples/#scene-management","title":"scene-management","text":"<p>In this sample we use <code>Detach</code> and <code>Stop</code> to create a scene management system. When a wire is detached, it is detached in the same behavior as the wire it is being detached from. This <code>Detach</code> and <code>Stop</code> combo is useful for making levels and map management systems. It is important to note however, that the since the previous wire is stopped, its state is not preserved. To preserve the state of a wire before switching, one can use <code>SwitchTo</code> instead, which suspends the current wire before switching to the wire specified. Also note, when stopping a wire, remember not to <code>Stop</code> the parent wire where the detached wire is detached from. Stopping the parent wire will deformalize the form and stop all detached wires.</p>"},{"location":"guide/7-fbl-samples/#form-to-load-defense","title":"form-to-load-defense","text":"<p>This form is used and referenced in \"load-other-forms-assets\". It contains a definition that is set up using <code>@define</code> and called in \"load-other-forms-assets\".</p>"},{"location":"guide/7-fbl-samples/#form-to-load-attack","title":"form-to-load-attack","text":"<p>This form is used and referenced in \"load-other-forms-assets\".  It contains a template that is set up using <code>@template</code> and called in \"load-other-forms-assets\".</p>"},{"location":"guide/7-fbl-samples/#spawn-sample","title":"spawn-sample","text":"<p>This sample uses <code>Spawn</code> to schedule multiple bullet wires. Similar to <code>Detach</code>, <code>Spawn</code> presents a way for a wire to be run asynchronously. But unlike <code>Detach</code>, where only one wire can be detached, an unlimited number of bullet wires can be spawned using <code>Spawn</code>. It is also worth noting that spawning wires within a single form is more memory-efficient compared to formalizing multiple forms using <code>Fbl.Formalize</code>.</p>"},{"location":"guide/7-fbl-samples/#step-sample","title":"step-sample","text":"<p>In this sample we are using <code>Step</code> to execute wires \"monster-1\", \"monster-2\" and \"monster-3\". Step will progress the state of the stepped wires before relinquishing control back to the parent wire.</p>"},{"location":"guide/7-fbl-samples/#ui-sample","title":"ui-sample","text":"<p>This sample showcases the different UI shards that are available for use. Do note that most UI shards require being wrapped in a UI Parent shard like <code>UI.Window</code> and <code>UI.Area</code> to function.</p>"},{"location":"guide/8-shards-architecture/","title":"Shards Architecture","text":"<p>Formabble uses the Shards coding language. This page is an explanation of the Shards architecture focused on how the program flow works.</p>"},{"location":"guide/8-shards-architecture/#the-shards-overall-architecture","title":"The Shards Overall Architecture","text":"<ul> <li>Shards code is written in <code>.shs</code> files which contain wires.</li> <li>Wires are composed of shards connected by data flow.</li> <li>Wires are scheduled on meshes.</li> <li>When a wire is scheduled on a mesh, it goes through the following steps:<ol> <li>Composing: The shards are connected and validated. This builds the wire execution graph.</li> <li>Warmup: Any initialization logic in shards runs.</li> <li>Running: The wire executes on the mesh, with data flowing shard to shard.</li> </ol> </li> <li>Wires can be executed concurrently on a mesh in different ways using wire executors.</li> </ul>"},{"location":"guide/8-shards-architecture/#the-shards-program-lifetime","title":"The Shards program lifetime","text":"<p>When a shards script is run, it undergoes the following steps:</p> <ul> <li>Script file evaluation<ul> <li>Shards code is written in\u00a0<code>.shs</code>\u00a0files which contain the shard graph definition. These files are evaluated to create wires.</li> </ul> </li> <li>Wire creation<ul> <li>Wires represent the shard graph and are created when evaluating the script files. A wire connects shards together into a directed acyclic graph.</li> </ul> </li> <li>Mesh creation<ul> <li>A mesh manages and runs wires concurrently on a single thread. Creating multiple meshes allows wires to run concurrently across threads.</li> </ul> </li> <li>Wire scheduling<ul> <li>Wires must be explicitly scheduled on a mesh in order to run. Scheduling a wire triggers the composing process.</li> </ul> </li> <li>Composing of a Wire<ul> <li>The process of validating connections between shards and building the full shard graph. This happens when a wire is scheduled on a mesh.</li> </ul> </li> <li>How wires are tied together<ul> <li>Wires form a directed acyclic graph via data flow between shards. The connections are validated during the composing process.</li> </ul> </li> <li>Warmup of a Wire<ul> <li>Before a wire runs, the\u00a0<code>warmup</code>\u00a0method is called on each shard to initialize any state it may need.</li> </ul> </li> <li>Wire running on Mesh<ul> <li>The mesh\u00a0<code>tick</code>\u00a0method runs scheduled wires by resuming their coroutine when they are ready to continue execution.</li> </ul> </li> </ul>"},{"location":"guide/8-shards-architecture/#the-shards-concurrency-model","title":"The Shards Concurrency Model","text":"<ul> <li>Wires provide task parallelism running concurrently on meshes.</li> <li>A mesh runs on a single thread, so no intra-wire parallelism.</li> <li>Shards have no shared mutable state, removing synchronization needs within a wire.</li> <li>Different meshes run independently and can run on different threads.</li> <li>Wires on the same mesh can interleave shard execution but shards have no side effects.</li> <li>Wire parameters are immutable once running.</li> <li>No shard execution ORDER guaranteed between wires on a mesh.</li> </ul> <p>So in summary:</p> <ul> <li>Safety within a wire comes from shards being side effect free.</li> <li>Safety between wires comes from shard immutability and no execution order guarantees.</li> <li>Multiple meshes provide full task parallelism.</li> </ul>"},{"location":"guide/8-shards-architecture/#additional-details","title":"Additional Details","text":"<ul> <li>Multiple meshes allow shard graphs to run concurrently across threads.</li> <li>A mesh provides thread isolation - wires in separate meshes run concurrently.</li> <li>Coroutines yield execution between shards in a wire and between scheduled wires.</li> <li>Shard parameters define typed, validated inputs.</li> <li>Parameters must have compatible types to connected shards.</li> <li>Validation happens once at compose time to optimize performance.</li> <li>A shard's state persists between activations.</li> <li>Shards don't share mutable state so no synchronization needed.</li> <li>Concurrent data flows minimize shared mutable state.</li> <li>Shard graph structure is invariant under deformation.</li> <li>Context variables share state between parent/child wires.</li> <li>Context variables are scoped to a wire and its children.</li> <li>Context variables avoid explicitly passing state through shards.</li> </ul>"},{"location":"guide/9-fbl-glossary/","title":"Formabble Glossary","text":"<p>In this page you will find the definitions of common Fbl terminology. Alongside its description, you will also find correlations with its counterparts in other popular game creation tools. This is to help new users transition into using the Formabble lingo more easily.</p> <p>Asset: The resources necessary to build a game. Assets have to be imported into the domain. Assets can either be a texture, mesh, script or an audio.</p> <p>Audio: Sound or music assets. Formats accepted- .mp3 , .ogg. Deform/Delete/Destroy: To remove a form from a domain.</p> <p>Domain: The world space where creators build their game. Similar to Unity or Unreal Engine\u2019s scene.</p> <p>Domain Inventory: A list of assets that have been imported into a domain.</p> <p>Entity ID: The id of a form on the Domain Form list Form: An asset that has been formalized into a domain</p> <p>Fbl: Short for Formabble</p> <p>Formalize: Do add a script into a domain.</p> <p>Form UUID: The unique constant Id of a form. Is a an Int16 data type </p> <p>Long Id: The unique id of an asset that has been uploaded to a domain. The Id is unique to the domain. Has a String data type.</p> <p>Mesh: A 3D asset. Formats accepted - .gltf , .glb</p> <p>Reform: To momentarily deform and get formalized again right after. Usually happens when an asset is updated.</p> <p>References: Other assets that an asset refers to in its code.</p> <p>References List: A list of references that an asset refers to in its code. Can be found in the Edit Asset Window.</p> <p>Scripts: Coded assets that dictate game mechanics, behaviors, and interactive elements. Formats accepted - .shs</p> <p>Short Id: The abbreviated id of an asset that has been uploaded to a domain. The id is unique to the domain. Has a String data type.</p> <p>Texture: A 2d Asset. Format accepted- .jpg, .png</p> <p>Update Asset: Clicking the Update button found in the Edit Asset window  updates an asset. This causes all forms using that asset to reform.</p>"},{"location":"shards/enums/Anchor/","title":"Anchor","text":"Value Description <code>TopLeft</code> Top left corner. <code>Left</code> Middle left. <code>BottomLeft</code> Bottom left corner. <code>Top</code> Top middle. <code>Center</code> Center. <code>Bottom</code> Bottom middle. <code>TopRight</code> Top right corner. <code>Right</code> Middle right. <code>BottomRight</code> Bottom right corner."},{"location":"shards/enums/AstType/","title":"AstType","text":"Value Description <code>Bytes</code> Binary AST as Bytes type <code>Json</code> JSON String type AST <code>Object</code> Live Object AST to be used within a live environment"},{"location":"shards/enums/BPP/","title":"BPP","text":"Value Description <code>u8</code> <code>u16</code> <code>f32</code>"},{"location":"shards/enums/Behavior/","title":"Behavior","text":"Value Description <code>Graphics</code> Graphics sub-system <code>FX</code> FX sub-system <code>UI</code> UI sub-system <code>Logic</code> Logic sub-system <code>Background</code> Background sub-system <code>Input</code> Input sub-system <code>Network</code> Network sub-system <code>Audio</code> Audio sub-system"},{"location":"shards/enums/BindGroupId/","title":"BindGroupId","text":"Value Description <code>View</code> <code>Draw</code>"},{"location":"shards/enums/BlendFactor/","title":"BlendFactor","text":"Value Description <code>Zero</code> <code>One</code> <code>Src</code> <code>OneMinusSrc</code> <code>SrcAlpha</code> <code>OneMinusSrcAlpha</code> <code>Dst</code> <code>OneMinusDst</code> <code>DstAlpha</code> <code>OneMinusDstAlpha</code> <code>SrcAlphaSaturated</code> <code>Constant</code> <code>OneMinusConstant</code>"},{"location":"shards/enums/BlendOperation/","title":"BlendOperation","text":"Value Description <code>Add</code> <code>Subtract</code> <code>ReverseSubtract</code> <code>Min</code> <code>Max</code>"},{"location":"shards/enums/BranchFailure/","title":"BranchFailure","text":"Value Description <code>Everything</code> <code>Known</code> <code>Ignore</code>"},{"location":"shards/enums/BufferAddressSpace/","title":"BufferAddressSpace","text":"Value Description <code>Uniform</code> <code>Storage</code> <code>StorageRW</code>"},{"location":"shards/enums/BuiltinFeatureId/","title":"BuiltinFeatureId","text":"Value Description <code>Transform</code> Add basic world/view/projection transform <code>BaseColor</code> Add basic color from vertex color and (optional) color texture <code>VertexColorFromNormal</code> Outputs color from vertex color <code>Wireframe</code> Modifies the main color to visualize vertex edges <code>Velocity</code> Outputs object velocity into the velocity global &amp; output <code>AlphaBlend</code> Simple feature that enables alpha blending"},{"location":"shards/enums/BuiltinMeshType/","title":"BuiltinMeshType","text":"Value Description <code>Cube</code> <code>Sphere</code> <code>Plane</code>"},{"location":"shards/enums/ColorMask/","title":"ColorMask","text":"Value Description <code>None</code> <code>Red</code> <code>Green</code> <code>Blue</code> <code>Alpha</code> <code>All</code>"},{"location":"shards/enums/CompareFunction/","title":"CompareFunction","text":"Value Description <code>Undefined</code> <code>Never</code> <code>Less</code> <code>LessEqual</code> <code>Greater</code> <code>GreaterEqual</code> <code>Equal</code> <code>NotEqual</code> <code>Always</code>"},{"location":"shards/enums/ConstraintSpace/","title":"ConstraintSpace","text":"Value Description <code>LocalToBodyCOM</code> <code>WorldSpace</code>"},{"location":"shards/enums/DependencyType/","title":"DependencyType","text":"Value Description <code>Before</code> <code>After</code>"},{"location":"shards/enums/DomainRunMode/","title":"DomainRunMode","text":"Value Description <code>None</code> <code>Edit</code> Indicates the domain is in edit mode <code>Play</code> Indicates the domain is in exclusive play mode <code>PlayLocal</code> Indicates the domain is in local play mode <code>PlayMatch</code> Indicates the domain is in remote play mode"},{"location":"shards/enums/FilterMode/","title":"FilterMode","text":"Value Description <code>Nearest</code> <code>Linear</code>"},{"location":"shards/enums/FontFamily/","title":"FontFamily","text":"Value Description <code>Proportional</code> <code>Monospace</code>"},{"location":"shards/enums/IfExists/","title":"IfExists","text":"Value Description <code>Fail</code> <code>Skip</code> <code>Overwrite</code> <code>Update</code>"},{"location":"shards/enums/Interpolation/","title":"Interpolation","text":"Value Description <code>Linear</code> <code>Step</code> <code>Cubic</code>"},{"location":"shards/enums/LayoutAlign/","title":"LayoutAlign","text":"Value Description <code>Min</code> Left or top alignment for e.g. anchors and layouts. <code>Left</code> Left alignment for e.g. anchors and layouts. <code>Top</code> Top alignment for e.g. anchors and layouts. <code>Center</code> Horizontal or vertical center alignment for e.g. anchors and layouts. <code>Max</code> Right or bottom center alignment for e.g. anchors and layouts. <code>Right</code> Right alignment for e.g. anchors and layouts. <code>Bottom</code> Bottom center alignment for e.g. anchors and layouts."},{"location":"shards/enums/LayoutDirection/","title":"LayoutDirection","text":"Value Description <code>LeftToRight</code> Describes a horizontal layout where its contents are arranged from the left to the right. <code>RightToLeft</code> Describes a horizontal layout where its contents are arranged from the right to the left. <code>TopDown</code> Describes a vertical layout where its contents are arranged from the top to the bottom. <code>BottomUp</code> Describes a vertical layout where its contents are arranged from the bottom to the top."},{"location":"shards/enums/LayoutFrame/","title":"LayoutFrame","text":"Value Description <code>Widgets</code> Use the frame styling for grouping widgets together. <code>SideTopPanel</code> Use the frame styling for a side top panel. <code>CentralPanel</code> Use the frame styling for the central panel. <code>Window</code> Use the frame styling for a window. <code>Menu</code> Use the frame styling for a menu. <code>Popup</code> Use the frame styling for a popup. <code>Canvas</code> Use the frame styling for a canvas to draw on. <code>DarkCanvas</code> Use the frame styling for a dark canvas to draw on."},{"location":"shards/enums/LogLevel/","title":"LogLevel","text":"Value Description <code>Trace</code> <code>Debug</code> <code>Info</code> <code>Warning</code> <code>Error</code>"},{"location":"shards/enums/MLFormats/","title":"MLFormats","text":"Value Description <code>GGUF</code> GGUF <code>SafeTensor</code> SafeTensor"},{"location":"shards/enums/MLModels/","title":"MLModels","text":"Value Description <code>Bert</code> A BERT model."},{"location":"shards/enums/MarkerShape/","title":"MarkerShape","text":"Value Description <code>Circle</code> Display a point as a circle. <code>Diamond</code> Display a point as a diamond. <code>Square</code> Display a point as a square. <code>Cross</code> Display a point as a cross. <code>Plus</code> Display a point as a plus sign. <code>Up</code> Display a point as an arrow pointing upwards. <code>Down</code> Display a point as an arrow pointing downwards. <code>Left</code> Display a point as an arrow pointing to the left. <code>Right</code> Display a point as an arrow pointing to the right. <code>Asterisk</code> Display a point as an asterisk."},{"location":"shards/enums/Mean/","title":"Mean","text":"Value Description <code>Arithmetic</code> <code>Geometric</code> <code>Harmonic</code>"},{"location":"shards/enums/ModifierKey/","title":"ModifierKey","text":"Value Description <code>None</code> <code>Shift</code> <code>Alt</code> <code>Primary</code> <code>Secondary</code>"},{"location":"shards/enums/Order/","title":"Order","text":"Value Description <code>Background</code> Painted behind all floating windows. <code>PanelResizeLine</code> Special layer between panels and windows. <code>Middle</code> Normal moveable windows that you reorder by click. <code>Foreground</code> Popups, menus etc that should always be painted on top of windows. Foreground objects can also have tooltips. <code>Tooltip</code> Things floating on top of everything else, like tooltips. You cannot interact with these. <code>Debug</code> Debug layer, always painted last / on top."},{"location":"shards/enums/OrthographicSizeType/","title":"OrthographicSizeType","text":"Value Description <code>Horizontal</code> <code>Vertical</code> <code>PixelScale</code>"},{"location":"shards/enums/PhysicsDOF/","title":"PhysicsDOF","text":"Value Description <code>None</code> <code>TranslationX</code> <code>TranslationY</code> <code>TranslationZ</code> <code>RotationX</code> <code>RotationY</code> <code>RotationZ</code> <code>Plane2D</code> <code>All</code>"},{"location":"shards/enums/PhysicsDebugShapeColor/","title":"PhysicsDebugShapeColor","text":"Value Description <code>InstanceColor</code> <code>ShapeTypeColor</code> <code>MotionTypeColor</code> <code>SleepColor</code> <code>IslandColor</code> <code>MaterialColor</code>"},{"location":"shards/enums/PhysicsDebugSoftBodyConstraintColor/","title":"PhysicsDebugSoftBodyConstraintColor","text":"Value Description <code>ConstraintType</code> <code>ConstraintGroup</code> <code>ConstraintOrder</code>"},{"location":"shards/enums/PhysicsMotion/","title":"PhysicsMotion","text":"Value Description <code>Static</code> <code>Kinematic</code> <code>Dynamic</code>"},{"location":"shards/enums/PopupLocation/","title":"PopupLocation","text":"Value Description <code>Below</code> Below. <code>Above</code> Above."},{"location":"shards/enums/ProgrammableGraphicsStage/","title":"ProgrammableGraphicsStage","text":"Value Description <code>Vertex</code> <code>Fragment</code>"},{"location":"shards/enums/RequiredAttributes/","title":"RequiredAttributes","text":"Value Description <code>Tangent</code> Require mesh tangents to be available"},{"location":"shards/enums/RunWireMode/","title":"RunWireMode","text":"Value Description <code>Inline</code> <code>Async</code> <code>Stepped</code>"},{"location":"shards/enums/ScrollVisibility/","title":"ScrollVisibility","text":"Value Description <code>AlwaysVisible</code> The scroll bars will always be visible. <code>VisibleWhenNeeded</code> The scroll bars will only be visible when needed <code>AlwaysHidden</code> The scroll bars will always be hidden."},{"location":"shards/enums/ShaderFieldBaseType/","title":"ShaderFieldBaseType","text":"Value Description <code>Bool</code> <code>UInt8</code> <code>Int8</code> <code>UInt16</code> <code>Int16</code> <code>UInt32</code> <code>Int32</code> <code>Float16</code> <code>Float32</code>"},{"location":"shards/enums/ShaderLiteralType/","title":"ShaderLiteralType","text":"Value Description <code>Inline</code> Insert shader code directly into current scope <code>Header</code> Insert shader code into header, where it is defined before all shards shader code"},{"location":"shards/enums/SortMode/","title":"SortMode","text":"Value Description <code>Queue</code> <code>Batch</code> <code>BackToFront</code>"},{"location":"shards/enums/TensorType/","title":"TensorType","text":"Value Description <code>U8</code> An unsigned 8-bit integer tensor. <code>U32</code> An unsigned 32-bit integer tensor. <code>I64</code> A signed 64-bit integer tensor. <code>BF16</code> A brain floating-point 16-bit tensor. <code>F16</code> A floating-point 16-bit tensor. <code>F32</code> A floating-point 32-bit tensor. <code>F64</code> A floating-point 64-bit tensor."},{"location":"shards/enums/TextStyle/","title":"TextStyle","text":"Value Description <code>Small</code> Used when small text is needed. <code>Body</code> Normal labels. Easily readable, doesn't take up too much space. <code>Monospace</code> Same size as [<code>Self::Body</code>], but used when monospace is important (for code snippets, aligning numbers, etc). <code>Button</code> Buttons. Maybe slightly bigger than [<code>Self::Body</code>]. <code>Heading</code> Heading. Probably larger than [<code>Self::Body</code>]."},{"location":"shards/enums/TextWrap/","title":"TextWrap","text":"Value Description <code>Extend</code> Extends the parent widget's width to wrap text. <code>Wrap</code> Wraps text to the width of the parent widget extending the next line. <code>Truncate</code> Truncates text that does not fit within the parent widget."},{"location":"shards/enums/TextureAddressing/","title":"TextureAddressing","text":"Value Description <code>Repeat</code> <code>MirrorRepeat</code> <code>ClampToEdge</code>"},{"location":"shards/enums/TextureDimension/","title":"TextureDimension","text":"Value Description <code>D1</code> <code>D2</code> <code>Cube</code>"},{"location":"shards/enums/TextureFiltering/","title":"TextureFiltering","text":"Value Description <code>Nearest</code> <code>Linear</code>"},{"location":"shards/enums/TextureFormat/","title":"TextureFormat","text":"Value Description <code>R8Unorm</code> <code>R8Snorm</code> <code>R8Uint</code> <code>R8Sint</code> <code>R16Uint</code> <code>R16Sint</code> <code>R16Float</code> <code>RG8Unorm</code> <code>RG8Snorm</code> <code>RG8Uint</code> <code>RG8Sint</code> <code>R32Float</code> <code>R32Uint</code> <code>R32Sint</code> <code>RG16Uint</code> <code>RG16Sint</code> <code>RG16Float</code> <code>RGBA8Unorm</code> <code>RGBA8UnormSrgb</code> <code>RGBA8Snorm</code> <code>RGBA8Uint</code> <code>RGBA8Sint</code> <code>BGRA8Unorm</code> <code>BGRA8UnormSrgb</code> <code>RGB10A2Unorm</code> <code>RG11B10Ufloat</code> <code>RGB9E5Ufloat</code> <code>RG32Float</code> <code>RG32Uint</code> <code>RG32Sint</code> <code>RGBA16Uint</code> <code>RGBA16Sint</code> <code>RGBA16Float</code> <code>RGBA32Float</code> <code>RGBA32Uint</code> <code>RGBA32Sint</code> <code>Stencil8</code> <code>Depth16Unorm</code> <code>Depth24Plus</code> <code>Depth24PlusStencil8</code> <code>Depth32Float</code> <code>Depth32FloatStencil8</code>"},{"location":"shards/enums/TextureSampleType/","title":"TextureSampleType","text":"Value Description <code>Int</code> <code>UInt</code> <code>Float</code> <code>UnfilterableFloat</code> <code>Depth</code>"},{"location":"shards/enums/TextureType/","title":"TextureType","text":"Value Description <code>Default</code> <code>Int</code> <code>UInt</code> <code>UNorm</code> <code>UNormSRGB</code> <code>SNorm</code> <code>Float</code>"},{"location":"shards/enums/Tint/","title":"Tint","text":"Value Description <code>Transparent</code> Transparent color. RGBA(0, 0, 0, 0) <code>Black</code> Black color. RGB(0, 0, 0) <code>LightGray</code> Light Gray color. RGB(220, 220, 220) <code>Gray</code> Gray color. RGB(160, 160, 160) <code>White</code> White color. RGB(255, 255, 255) <code>Red</code> Red color. RGB(255, 0, 0) <code>Green</code> Green color. RGB(0, 255, 0) <code>Blue</code> Blue color. RGB(0, 0, 255)"},{"location":"shards/enums/Type/","title":"Type","text":"Value Description <code>None</code> <code>Any</code> <code>Bool</code> <code>Int</code> <code>Int2</code> <code>Int3</code> <code>Int4</code> <code>Int8</code> <code>Int16</code> <code>Float</code> <code>Float2</code> <code>Float3</code> <code>Float4</code> <code>Color</code> <code>Wire</code> <code>Shard</code> <code>Bytes</code> <code>String</code> <code>Image</code> <code>Audio</code>"},{"location":"shards/enums/UIProperty/","title":"UIProperty","text":"Value Description <code>RemainingSpace</code> Return the remaining space within an UI widget. (float4) <code>ScreenSize</code> The screen size of the UI. (float2) <code>PixelsPerPoint</code> The amounts of pixels that correspond to 1 UI point. (float) <code>IsAnythingBeingDragged</code> Returns true when anything is being dragged. (bool) <code>CursorPosition</code> The position of the UI cursor <code>IsHovered</code> True if the current UI area is being hovered over. (bool)"},{"location":"shards/enums/WaitUntil/","title":"WaitUntil","text":"Value Description <code>FirstSuccess</code> Will wait until the first success and stop any other pending operation <code>AllSuccess</code> Will wait until all complete, will stop and fail on any failure <code>SomeSuccess</code> Will wait until all complete but won't fail if some of the wires failed"},{"location":"shards/enums/Waveform/","title":"Waveform","text":"Value Description <code>Sine</code> <code>Square</code> <code>Triangle</code> <code>Sawtooth</code>"},{"location":"shards/enums/WindingOrder/","title":"WindingOrder","text":"Value Description <code>CW</code> <code>CCW</code>"},{"location":"shards/enums/WindowFlags/","title":"WindowFlags","text":"Value Description <code>NoTitleBar</code> Do not display the title bar. <code>NoResize</code> Do not allow resizing the window. <code>Scrollbars</code> Display scrollbars. <code>NoCollapse</code> Do not display the collapse button. <code>Immovable</code> Do not allow window movement."},{"location":"shards/shards/","title":"Shards","text":"<p>This section contains a reference for all the shards distributed with Shards.</p>"},{"location":"shards/shards/#how-to-read","title":"How to read","text":"<p>Let's look at the description for <code>String.Join</code> as an example:</p> Name - Description Default Type <code>&lt;input&gt;</code> A sequence of string values that will be joined together. <code>[\u00a0String\u00a0]</code> <code>&lt;output&gt;</code> A string consisting of all the elements of the sequence delimited by the separator. <code>String</code> <code>Separator</code> The string to use as a separator. <code>\"\"</code> <code>String</code> <p>The first thing you will see on every shard page is this table.</p> <p>The first two entries in the table describe what inputs a shard will accept and what kind of values it will output.</p>"},{"location":"shards/shards/#input","title":"&lt;input&gt;","text":"<p>In this case, the <code>String.Join</code> shard accepts a sequence of <code>Strings</code> as an input - written as <code>[String]</code>. A sequence is identified by its enclosing square brackets.</p>"},{"location":"shards/shards/#output","title":"&lt;output&gt;","text":"<p>The output will be a single <code>String</code>.</p>"},{"location":"shards/shards/#parameters","title":"Parameters","text":"<p>After the input and output of the shard, the parameters are listed. The <code>String.Join</code> shard requires a <code>Separator</code> parameter that is a <code>String</code>. When the parameter is not specified, the default value will be <code>\"\"</code>.</p>"},{"location":"shards/shards/#optional-parameters","title":"Optional parameters","text":"Name - Description Default Type <code>Window</code> None or a window variable we wish to use as a relative origin. <code>None</code> <code>Object</code> <p>Occasionally you will see a  icon next to a parameter. This means that the parameter is optional and its value can be left unset.</p> <p>When a variable is not optional and its default value is not <code>None</code>, you should set the parameter on the shard.</p>"},{"location":"shards/shards/#type-descriptions","title":"Type descriptions","text":"<p>The type column shows the expected types for input, output, or parameter:</p> Name Type <code>Values</code> <code>String Float</code> <code>Sequence</code> <code>[ String Float ]</code> <code>Table</code> <code>{ String Float }</code> <code>Variables</code> <code>&amp;String &amp;Float</code> <code>SequenceVariable</code> <code>&amp;[ Float4 ]</code> <p>Multiple different types in a row indicate that any of the types listed are accepted.</p> <p>When placed within <code>[ square brackets ]</code>, this means that a Sequence of those types is accepted.</p> <p>When placed within <code>{ curly brackets }</code>, this means that a Table of those types as values is accepted.</p> <p>When a value is prefixed with an <code>&amp;ampersand</code>, this means that a variable / ContextVar of that type is accepted.</p>"},{"location":"shards/shards/#further-reading","title":"Further reading","text":"<p>See the Types page for more information about types.</p> <p>When placed within <code>{ curly brackets }</code>, this means that a Table of those types as values is accepted.</p> <p>When a value is prefixed with an <code>&amp;ampersand</code>, this means that a variable / ContextVar of that type is accepted.</p> <p> </p>"},{"location":"shards/shards/types/","title":"Types","text":"<p>This section documents all the valid data types that are accepted by various shards either as their input value or as a parameter value. These data types also apply to the output created by any shard.</p> <p>Valid data types for every shard are listed under the <code>Type</code> column of their Parameters, Input, and Output sections (types are enclosed within parentheses and if multiple types apply then they are separated by a space).</p> Compound types <p>While this section lists the simple (or primitive) data types, you can combine these to create compound data types. For example, combining <code>Int</code>, <code>String</code>, and <code>Seq</code>, can give you a sequence of sequences <code>[ [ Any ] ]</code>, a sequence of integers and strings <code>[Int String ]</code>, and so on.</p> Why types? <p>Types are helpful as they reduce errors in programming. They are also very useful in visual programming as type-matching can be used to reduce the dropdown options when prompting a user on what shard to use next (depending on which shard's input type matches with the current shard's output type).</p> <p>Note</p> <p>While all the following types are available internally to various shards, only a few are currently accessible in the Shards scripting environment. Consequently, only these types have keywords/aliases.</p>"},{"location":"shards/shards/types/#any","title":"Any","text":"<p>Type Any indicates that all data types are allowed.</p> <p>For example, Any as the allowed data type for input and <code>Value:</code> parameter of shard <code>All</code> means that <code>All</code> accepts and compares across all data types.</p> <pre><code>[1]\nAll(Value: [(Any)])\n</code></pre> <p><code>All</code> compares the input and <code>Value:</code> parameter values and returns <code>true</code> only if both the value and data type of these entities is equal/same.</p> Code <pre><code>[4 5 6] | All(Value: [4 5 6])\nLog   ;; value and type match =&gt; true\n\n\"I'm a string\" = var1\n\"I'm a string\" = var2\nvar1 | All(Value: var2)\nLog   ;; value and type match =&gt; true\n\n\"I'm a string\" = var3\n\"I'm a different string\" = var4\nvar3 | All(Value: var4)\nLog   ;; value mismatch =&gt; false\n\n4.0 = var5\n4 = var6\nvar5 | All(Value: var6)\nLog   ;; type mismatch =&gt; false\n</code></pre> Output <pre><code>[info] [2023-07-22 13:05:25.848] [T-18072] [logging.cpp::55] [mywire] true\n[info] [2023-07-22 13:05:25.861] [T-18072] [logging.cpp::55] [mywire] true\n[info] [2023-07-22 13:05:25.862] [T-18072] [logging.cpp::55] [mywire] false\n[info] [2023-07-22 13:05:25.864] [T-18072] [logging.cpp::55] [mywire] false\n</code></pre>"},{"location":"shards/shards/types/#sequence","title":"Sequence","text":"<p>Type Sequence is a collection of values that can be accessed directly via indexes (since items are indexed by contiguous integers).</p> <p>It is also called a vector or an array. A Sequence's items are accessible by index. Example of a Sequence type would be: <code>[43 6 1]</code>.</p>"},{"location":"shards/shards/types/#audio","title":"Audio","text":"<p>Type Audio is uncompressed audio data.</p> <p>Examples of shards that use this type are <code>Audio.Oscillator</code>, <code>Audio.ReadFile</code>, and <code>Audio.WriteFile</code> all of which generate Audio type data as their output.</p> Supported formats <p>Shards supports the audio formats WAV, MP3, OGG, and FLAC.</p>"},{"location":"shards/shards/types/#bool","title":"Bool","text":"<p>Type Bool allows only two values - <code>true</code> or <code>false</code>. In that sense, it can be thought of as a special case of an Enum data type.</p> <p>Consider the shard <code>Is</code>. This shard compares its input and the value in the <code>Value:</code> parameter for equality and returns <code>true</code> if values are equal, otherwise <code>false</code> if values are not equal. Examples:</p> Code <pre><code>100 | Is(Value: (* 10 10))\nLog   ;; Is equal =&gt; true\n\n[20] | Is(Value: 20)\nLog   ;; Is not equal =&gt; false\n</code></pre> Output <pre><code>[info] [2023-07-22 18:38:24.383] [T-25360] [logging.cpp::55] [mywire] true\n[info] [2023-07-22 18:38:24.395] [T-25360] [logging.cpp::55] [mywire] false\n</code></pre>"},{"location":"shards/shards/types/#bytes","title":"Bytes","text":"<p>Type Bytes represents binary data.</p> <p>Note</p> <p>Has keyword <code>bytes</code> and alias <code>Bytes</code>.</p> <p>A byte is made up of 8 bits (for example, <code>10111010</code>) and a Bytes type is an sequence of such bytes: <code>[11110001 10110111 10000111]</code></p> Bits and Bytes <p>Bits are how data is stored in a computer at the level of electrical circuits. A bit can have only two values (1 or 0, representing the circuit is on or off) - hence the name binary data. A group of eight bits make a byte: <code>11111111</code>, <code>10101010</code>, etc. Since a bit can have only two values, a Byte can represent a total of 256 numbers (2^8): 0 to 255.</p> <p>Shards like <code>ToBytes</code>,  <code>BytesToString</code>, <code>BytesToInts</code>, etc, all use the type Bytes either for their input or their output.</p>"},{"location":"shards/shards/types/#color","title":"Color","text":"<p>Type Color represents an RGBA color format and is constructed from four unsigned 8 bit integers (one each for the R, G, B, and A values).</p> <p>Note</p> <p>Has keyword <code>color</code> and alias <code>Color</code>.</p> <p>Each of the R, G, B, and A values range from 0 to 255. R, G, and B stand for red, blue, and green components of the color. A represents the alpha channel property (how opaqe a pixel is - 0 is fully transparent, 255 is fully opaque).</p> <p>The shard <code>ToColor</code> converts its input into a Color type.</p> Code <pre><code>@color(0xFFFFFFFF)\nLog ;; Logs: (255 255 255 255)\n\n@color(0xFF)\nLog ;; Logs: (255 0 0 255)\n\n@color(130 140 150 200)\nLog ;; Logs: (130 140 150 200)\n\n@i4(130 140 150 200) | ToColor\nLog ;; Logs: (130 140 150 200)\n</code></pre> Output <pre><code>[info] [2024-01-15 13:58:17.428] [T-25672] [logging.cpp::71] [main-wire] (255 255 255 255)\n[info] [2024-01-15 13:58:17.429] [T-25672] [logging.cpp::71] [main-wire] (255 0 0 255)\n[info] [2024-01-15 13:58:17.429] [T-25672] [logging.cpp::71] [main-wire] (130 140 150 200)\n[info] [2024-01-15 13:58:17.429] [T-25672] [logging.cpp::71] [main-wire] (130 140 150 200)\n</code></pre>"},{"location":"shards/shards/types/#contextvar","title":"ContextVar","text":"<p>Type ContextVar represents a contextual variable (i.e., a variable that is in scope for the shard processing this data).</p> <p>Note</p> <p>Has keyword <code>context-var</code> and alias <code>ContextVar</code>.</p> <p>The shard <code>Math.Inc</code> accepts only ContextVar type numeric data (i.e., a variable that holds numeric data) into its <code>Value:</code> parameter, and increments it by 1.</p> Code <pre><code>11 &gt;= intvar  ;; intvar is of type `ContextVar`\nMath.Inc(intvar)\nintvar | Log ;; =&gt; 12\n\n@f2(4.5 5.7) &gt;= floatvar ;; floatvar is of type `ContextVar`\nMath.Inc(floatvar)\nfloatvar | Log ;; =&gt; (5.5, 6.7)\n</code></pre> Output <pre><code>[info] [2023-07-26 19:30:22.837] [T-27800] [logging.cpp::55] [mywire] 12\n[info] [2023-07-26 19:30:22.843] [T-27800] [logging.cpp::55] [mywire] (5.5, 6.7)\n</code></pre>"},{"location":"shards/shards/types/#enum","title":"Enum","text":"<p>Enum stands for enumerated data type.</p> <p>Note</p> <p>Has keyword <code>enum</code> and alias <code>Enum</code>.</p> <p>The value that you pass to an enumerated variable can only take certain 'states' or named constant values.</p> <p>For an overview of all enums and valid values check the Enums page</p> <p>For example, in <code>Math.Mean</code> the value for <code>Kind:</code> parameter needs to be of type Mean.</p> <pre><code>Math.Mean(Kind: Mean)\n</code></pre> <p><code>Math.Mean</code> computes the mean of a sequence of floating-point numbers. But there are three kinds of means - Arithmetic mean, Geometric mean, and Harmonic mean.</p> <p>So the parameter <code>Kind:</code> is defined as an enum variable with these three fixed states : <code>Kind: = {Arithmtic mean, Geometric mean, Harmonic mean}</code></p> <p>And hence <code>Kind:</code> expects a value that matches one of its possible states. In other words the value you pass in for <code>Kind:</code> needs to be an enumerated data type.</p> <p>In simple terms it just means that you pass in one of the allowed named constant values. Anything else will fail validation.</p> Code <pre><code>[2.0 10.0]\nMath.Mean(Kind: Mean::Arithmetic)\nLog ; ; AM =&gt; 6\n\n[2.0 10.0]\nMath.Mean(Kind: Mean::Geometric)\nLog ; ; GM =&gt; 4.47214\n\n[2.0 10.0]\nMath.Mean(Kind: Mean::Harmonic)\nLog ; ; HM =&gt; 3.33333\n\n[2.0 10.0]\nMath.Mean\nLog\n</code></pre> Output <pre><code>[info] [2023-07-22 15:35:00.868] [T-15316] [logging.cpp::55] [mywire] 6\n[info] [2023-07-22 15:35:00.881] [T-15316] [logging.cpp::55] [mywire] 4.47214\n[info] [2023-07-22 15:35:00.882] [T-15316] [logging.cpp::55] [mywire] 3.33333\n[info] [2023-07-22 15:35:00.883] [T-15316] [logging.cpp::55] [mywire] 6\n</code></pre>"},{"location":"shards/shards/types/#float","title":"Float","text":"<p>Type Float defines a 64-bit signed floating point number.</p> <p>Note</p> <p>Has keyword <code>float</code> and alias <code>Float</code>.</p> <p>Floating point means it has the capability to store a decimal point and hence supports decimal numbers.</p> <p>64 bits of memory allows this data type to support a very large range of positive and negative decimal numbers (16 significant decimal digits and an exponent range of \u2212383 to +384).</p> <p>A Float value looks like this: <code>2.53</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>2.4 | Math.Add(1.43)\nLog   ;; float output =&gt; 3.83\n</code></pre> Output <pre><code>[info] [2023-07-22 22:06:32.856] [T-20204] [logging.cpp::55] [mywire] 3.83\n[info] [2023-07-22 22:06:32.873] [T-20204] [logging.cpp::55] [mywire] 3.83\n</code></pre>"},{"location":"shards/shards/types/#float2","title":"Float2","text":"<p>Type Float2 defines a vector of two Float type numbers.</p> <p>Note</p> <p>Has keyword <code>float2</code> and alias <code>Float2</code>.</p> <p>A vector can be thought of as a group or list of items that are considered together for processing.</p> <p>A Float2 type value looks like this: <code>@f2(3.4 -5.0)</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>@f2(4.1 5.0) | Math.Add(@f2(6.3 9.2))\nLog  ;; float2 output =&gt; (10.4 14.2)\n</code></pre> Output <pre><code>[info] [2023-07-22 22:10:00.688] [T-24616] [logging.cpp::55] [mywire] (10.4 14.2)\n</code></pre>"},{"location":"shards/shards/types/#float3","title":"Float3","text":"<p>Type Float3 defines a vector of three 32-bit signed floating point numbers.</p> <p>Note</p> <p>Has keyword <code>float3</code> and alias <code>Float3</code>.</p> <p>Floating point means it has the capability to store a decimal point and hence supports decimal numbers.</p> <p>32 bits of memory allows this data type to support a large range of positive and negative decimal numbers (7 significant decimal digits and an exponent range of \u2212101 to +90).</p> <p>A Float3 type value looks like this: <code>@f3(2.9 -4.23 7.83)</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>@f3(1.2 3.4 5.6) | Math.Add(@f3(6.5 4.3 2.1))\nLog ;; float3 output =&gt; (7.7 7.7 7.7)\n</code></pre> Output <pre><code>[info] [2023-07-22 22:19:36.923] [T-16128] [logging.cpp::55] [mywire] (7.7 7.7 7.7)\n</code></pre>"},{"location":"shards/shards/types/#float4","title":"Float4","text":"<p>Type Float4 is like type Float3 but is a vector of four 32-bit signed floating point numbers instead.</p> <p>Note</p> <p>Has keyword <code>float4</code> and alias <code>Float4</code>.</p> <p>A Float4 type value looks like this: <code>@f4(-8.84 38.2 4.7 0.4)</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>@f4(3.1 6.4 9.2 4.6)\nMath.Add (@f4(6.8 3.5 0.9 5.3))\nLog   ;; Int4 output =&gt; (9.9, 9.9, 9.9, 9.9)\n</code></pre> Output <pre><code>[info] [2023-07-22 22:23:24.076] [T-25152] [logging.cpp::55] [mywire] (9.9 9.9 10.1 9.9)\n</code></pre>"},{"location":"shards/shards/types/#image","title":"Image","text":"<p>Type Image is uncompressed image data.</p> <p>A shard that uses this type is <code>StripAlpha</code>. This takes an Image type input, strips out its alpha (transparency) channel, and outputs an Image type (transformed image).</p> Supported formats <p>Shards supports the image formats PNG and SVG.</p>"},{"location":"shards/shards/types/#int","title":"Int","text":"<p>Type Int defines a 64-bit signed integer.</p> <p>Note</p> <p>Has keyword <code>int</code> and alias <code>Int</code>.</p> <p>64 bits of memory allows this data type to store integer values ranging from -9,223,372,036,854,775,808 to +9,223,372,036,854,775,807 (no decimals).</p> <p>An Int value looks like this: <code>2</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>3 | Math.Add(2)\nLog   ;; int output =&gt; 5\n</code></pre> Output <pre><code>[info] [2023-07-22 21:20:18.771] [T-4568] [logging.cpp::55] [mywire] 5\n[info] [2023-07-22 21:20:18.782] [T-4568] [logging.cpp::55] [mywire] 5\n</code></pre>"},{"location":"shards/shards/types/#int2","title":"Int2","text":"<p>Type Int2 defines a vector of two Int type numbers.</p> <p>Note</p> <p>Has keyword <code>int2</code> and alias <code>Int2</code>.</p> <p>A vector can be thought of as a group or list of items that are considered together for processing.</p> <p>An Int2 type value looks like this: <code>@i2(3 -5)</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>@i2(4 5) | Math.Add(@i2(6 9))\nLog   ;; int2 output =&gt; (10, 14)\n</code></pre> Output <pre><code>[info] [2023-07-22 21:22:26.381] [T-17748] [logging.cpp::55] [mywire] (10, 14)\n</code></pre>"},{"location":"shards/shards/types/#int3","title":"Int3","text":"<p>Type Int3 defines a vector of three 32-bit signed integers.</p> <p>Note</p> <p>Has keyword <code>int3</code> and alias <code>Int3</code>.</p> <p>32 bits of memory for each number allows this data type to store integer values ranging from -2147483648 to +2147483647 (no decimals).</p> <p>An Int3 type value looks like this: <code>@i3(2 4 -4)</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>@i3(1 10 99) | Math.Add( @i3(99 90 1))\nLog   ;; int3 output =&gt; (100, 100, 100)\n</code></pre> Output <pre><code>[info] [2023-07-22 21:24:38.132] [T-25580] [logging.cpp::55] [mywire] (100, 100, 100)\n</code></pre>"},{"location":"shards/shards/types/#int4","title":"Int4","text":"<p>Type Int4 is like type Int3 but is a vector of four 32-bit signed integers instead.</p> <p>Note</p> <p>Has keyword <code>int4</code> and alias <code>Int4</code>.</p> <p>An Int4 type value looks like this: <code>@i4(1 -4 0 3)</code>.</p> <p><code>Math.Add</code> is an example of a shard that uses this data type for its input, output, and <code>Operand:</code> parameter.</p> Code <pre><code>@i4(3 6 9 4)\nMath.Add(@i4(6 3 0 5))\nLog   ;; int4 output =&gt; (9 9 9 9)\n</code></pre> Output <pre><code>[info] [2023-07-22 21:27:58.115] [T-20884] [logging.cpp::55] [mywire] (9 9 9 9)\n</code></pre>"},{"location":"shards/shards/types/#int8","title":"Int8","text":"<p>Type Int8 defines a vector of eight 16-bit signed integers.</p> <p>16 bits of memory for each number allows this data type to store integer values ranging from \u221232,768 to +32,767 (no decimals).</p> <p>The shard <code>Math.Add</code> accepts Int8 as input and as its <code>Operand:</code>. The shard adds these up outputs the sum as another vector of 8 integers or Int8 data type.</p>"},{"location":"shards/shards/types/#int16","title":"Int16","text":"<p>Type Int16 defines a vector of sixteen 8-bit signed integers.</p> <p>8 bits of memory for each number allows this data type to store integer values ranging from \u2212128 to +127 (no decimals).</p> <p>The shard <code>Math.Add</code> accepts Int16 as input and as its <code>Operand:</code>. The shard adds these up outputs the sum as another vector of 16 integers or Int16 data type.</p>"},{"location":"shards/shards/types/#none","title":"None","text":"<p>Type None indicates that no data type is expected. This implies that no value is expected.</p> <p>For example, None as one of the valid data types for <code>Max:</code> parameter in shard <code>RandomInt</code> means that setting a value for this parameter is not mandatory.</p> <pre><code>RandomInt(Max: none)\nLog ;; Will log a random int\n</code></pre> <p><code>RandomInt</code> generates a random integer and the <code>Max:</code> parameter is the upper limit (not inclusive) of the value that can be generated. So it makes sense to have None as one of the valid types for this <code>Max:</code> parameter for cases when you do not want an upper limit on the random integer (though in this case the system will inherently set the upper limit to the maximum value a 64-bit signed integer can hold: 9,223,372,036,854,775,807).</p> Code <pre><code>RandomInt(8)\nLog   ;; max int that can be generated is 7\n\nRandomInt\nLog   ;; now upper limit subject to max capacity of a 64-bit signed integer\n</code></pre> Output <pre><code>[info] [2023-07-22 13:45:03.282] [T-19992] [logging.cpp::55] [mywire] 4\n[info] [2023-07-22 13:45:03.293] [T-19992] [logging.cpp::55] [mywire] 311828859\n</code></pre>"},{"location":"shards/shards/types/#object","title":"Object","text":"<p>Type Object is an opaque data type in Shards.</p> <p>Opacity in a data type means that the structure of this kind of data is not defined in an interface and is visible only to shards that use this type. What this also implies is that the internal structure of this data type will vary from shard to shard.</p> <p>For example, the <code>Socket:</code> parameter object of <code>WS.ReadString</code> is different from the output object of <code>GFX.DrawQueue</code>, even though both are of type Object.</p>"},{"location":"shards/shards/types/#path","title":"Path","text":"<p>Type Path is String type data that is expected to contain a valid path (your operating system or local machine) for loading resources like script files, images, audio files etc.</p> <p>Note</p> <p>Has keyword <code>path</code> and alias <code>Path</code>.</p> <p>A valid Path type data string would look like this: <code>\"../../external/sample-models/Avocado.glb\"</code></p> <p>Note</p> <p>For shards this type is the same as String type as far as type validations are concerned (when you execute your script Shards first checks the types before running your code). However, if the path-string passed is invalid, malformed, or missing the resource to be loaded, the shard will complain with an error message at runtime (i.e., when your code actually runs).</p> <p>A shard that uses this type is <code>Process.Run</code>. This shard takes a Path type in its <code>Executable:</code> parameter.</p>"},{"location":"shards/shards/types/#set","title":"Set","text":"<p>Type Set is a collection of unique values.</p> <p>It's different from other collections like Seq and Sequence, both of which can contain non-unique or duplicate items.</p> <p>An example of a Set type data would be <code>(22 3 378 4)</code>.</p>"},{"location":"shards/shards/types/#seq","title":"Seq","text":"<p>Type Seq is a collection of values that can be accessed sequentially (i.e., they're iterable).</p> <p>Note</p> <p>Has keyword <code>seq</code>.</p> <p>Also called a sequence. An example of Seq type would be <code>[7 2 54 42]</code>.</p> <p>The shard <code>Take</code> works on this type. This shard can access Seq elements by their position.</p> Code <pre><code>[7 2 54 42] | Take(2)\nLog   ;; print the 2nd element =&gt; 54\n</code></pre> Output <pre><code>[info] [2023-07-26 22:24:48.918] [T-20928] [logging.cpp::55] [mywire] 54\n</code></pre>"},{"location":"shards/shards/types/#shard","title":"Shard","text":"<p>The type Shard (also called ShardRef) represents a shard being passed as data.</p> <p>This type is an important aspect of the homoiconicity feature (i.e., code/data interchangeability) in Shards.</p> <p>Note</p> <p>What's a <code>shard</code>?</p> <p>The shard <code>ForEach</code> expects a value with the type Shard for its <code>Apply:</code> parameter (the other option being a sequence of Shard type values, i.e., a <code>Wire</code> type).</p> <p><code>ForEach</code> then applies this shard (or sequence of shards) on its input to transform it into its output.</p>"},{"location":"shards/shards/types/#shard_1","title":"[ Shard ]","text":"<p>When more that one shard is accepted it is indicated as a sequence of shards, any description can be turned into a sequence of shards by wrapping it with <code>{}</code>, for example:</p> <pre><code>[1 2 3 4 5]\nForEach({ ;; ForEach will apply the following shards to each element of the sequence\n    Math.Add(1)\n    Math.Multiply(2)\n    Math.Subtract(3)\n    Log(\"Result\")\n})\n</code></pre> Output <pre><code>[info] [2024-01-15 14:12:04.509] [T-25980] [logging.cpp::65] [main-wire] Result: 1\n[info] [2024-01-15 14:12:04.509] [T-25980] [logging.cpp::65] [main-wire] Result: 3\n[info] [2024-01-15 14:12:04.509] [T-25980] [logging.cpp::65] [main-wire] Result: 5\n[info] [2024-01-15 14:12:04.509] [T-25980] [logging.cpp::65] [main-wire] Result: 7\n[info] [2024-01-15 14:12:04.510] [T-25980] [logging.cpp::65] [main-wire] Result: 9\n</code></pre>"},{"location":"shards/shards/types/#string","title":"String","text":"<p>Type String represents string data (any data enclosed within double quotes).</p> <p>Note</p> <p>Has keyword <code>string</code> and alias <code>String</code>.</p> <p>A String value looks like this: <code>\"Hello @Tom!\"</code>.</p> <p>An example of a shard that processes String type data is <code>String.ToUpper</code>. This shard takes a String and converts it into its upper case version.</p> Code <pre><code>\"Hello World!\" | String.ToUpper\nLog   ;; upper case version =&gt; HELLO WORLD!\n\n\"Bye Universe!\" | String.ToUpper\nLog   ;; upper case version =&gt; BYE UNIVERSE!\n</code></pre> Output <pre><code>[info] [2023-07-26 19:38:14.813] [T-18168] [logging.cpp::55] [mywire] Bytes: 0x20440058720 size: 11\n</code></pre>"},{"location":"shards/shards/types/#table","title":"Table","text":"<p>Type Table is a collection of key/value pairs.</p> <p>Its also known as map, data dictionary, or associative array. An example of a Table type would be: <code>{key1: \"Hello\" key2: \"World\"}</code>.</p> Code <pre><code>{k1: 123} = tabvar ;;tabvar is now of type table\ntabvar | Take(\"k1\")\nLog  ;; Logs: 123\n</code></pre> Output <pre><code>[info] [2024-01-15 14:09:18.386] [T-27756] [logging.cpp::71] [main-wire] 123\n</code></pre>"},{"location":"shards/shards/types/#wire","title":"Wire","text":"<p>Type Wire represents a wire being passed as data.</p> <p>Note</p> <p>Has keyword <code>Wire</code>.</p> <p>A Wire type thus consists of a sequence of shards (which make up the wire), their shared state (memory) context, name of the wire, and other properties that enable operations on the wire like scheduling it on a mesh, starting/stopping/pausing the wire, etc.</p> <p>Note</p> <p>What's a <code>wire</code>?</p> <p>For example, the shard <code>Stop</code> accepts Wire type data in its <code>:Wire</code> parameter and stops that wire's execution if its currently running.</p> <p> </p>"},{"location":"shards/shards/Animation/Duration/","title":"Animation.Duration","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The animation to get the duration of. <code>[{Path: [String] Frames: [{Time: Float Value: Any none: Any}]}]</code> <code>Output \u27a1\ufe0f</code> The total length of the animation in seconds. <code>Float</code> <p>Outputs the total duration of the animation in seconds.</p> <p> </p>"},{"location":"shards/shards/Animation/Interpolated/","title":"Animation.Interpolated","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to interpolate. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code> <code>Output \u27a1\ufe0f</code> The interpolated value. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code> <code>Duration</code>  No Duration of interpolation <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <p>Whenever the input value is changed, this shard will interpolate between the old value and the new value over the duration of the animation and output the result.</p> <p> </p>"},{"location":"shards/shards/Animation/Play/","title":"Animation.Play","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The current time of the animation (in seconds) to play <code>Float</code> <code>Output \u27a1\ufe0f</code> The interpolated animation data at each frame of the animation <code>[{Path: [String] Value: Any}]</code> <code>Animation</code>  No The animation to play. <code>none</code> <code>Var([{Path: [String] Frames: [{Time: Float Value: Any none: Any}]}])</code><code>[{Path: [String] Frames: [{Time: Float Value: Any none: Any}]}]</code> <p>Evaluates and interpolates the animation of the glTF model specified in the Animation parameter. The output of this shard is applied to the glTF model to play animations.</p> <p> </p>"},{"location":"shards/shards/Animation/Timer/","title":"Animation.Timer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the current time of the animation timer <code>Float</code> <code>Animation</code>  No The Animation object to take the duration from. <code>none</code> <code>Var([{Path: [String] Frames: [{Time: Float Value: Any none: Any}]}])</code><code>[{Path: [String] Frames: [{Time: Float Value: Any none: Any}]}]</code><code>None</code> <code>Duration</code>  No The duration of the timer, the timer will loop or stop after reaching this value. <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>Looped</code>  No If set to true, the timer will loop after reaching the target time <code>true</code> <code>None</code><code>Bool</code><code>Var(Bool)</code> <code>Rate</code>  No The playback rate <code>1</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>Offset</code>  No Timer offset <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>Action</code>  No The shards to execute whenever the shard reached the specified duration. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Variable</code>  No The variable to store the current time of the timer in. <code>none</code> <code>None</code><code>Var(Float)</code> <p>This shard sets a duration (either taken form the animation object in the Animation Parameter or specified in the Duration parameter) and executes the shards specified in the Action parameter whenever that duration is reached.</p> <p> </p>"},{"location":"shards/shards/Argon2id/Hash/","title":"Argon2id.Hash","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <code>MemoryCost</code>  No The amount of memory to use in KiB. Default is 8192 (8 MB). <code>8192</code> <code>Int</code> <code>TimeCost</code>  No The number of iterations to perform. Default is 4. <code>4</code> <code>Int</code> <code>Parallelism</code>  No The degree of parallelism to use. Default is 1. <code>1</code> <code>Int</code> <p>Hashes a password using the Argon2id algorithm.</p> <p> </p>"},{"location":"shards/shards/Argon2id/Verify/","title":"Argon2id.Verify","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Hash</code>  No The Argon2id hash to verify against. <code>none</code> <code>String</code><code>Var(String)</code> <p>Verifies a password against an Argon2id hash.</p> <p> </p>"},{"location":"shards/shards/Assert/Is/","title":"Assert.Is","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input can be of any type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output will be the input (passthrough). <code>Any</code> <code>Value</code>  No The value to test against for equality. <code>none</code> <code>Any</code> <code>Break</code>  No If we should trigger a debug breakpoint on failure. <code>false</code> <code>Bool</code> <p>This assertion is used to check whether the input is equal to a given value.</p>"},{"location":"shards/shards/Assert/Is/#examples","title":"Examples","text":"Code <pre><code>;; Break = `true`, assertion true\n;; =&gt; log no errors and don't abort program\n8\nAssert.Is(Value: 8 Break: false)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Assert/IsAlmost/","title":"Assert.IsAlmost","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input can be of any number type or a sequence of such types. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The output will be the input (passthrough). <code>Any</code> <code>Value</code>  No The value to test against for almost equality. <code>none</code> <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>[Any]</code><code>Var(Float Float2 Float3 Float4 Int Int2 Int3 Int4 Int8 Int16 [Any])</code> <code>Abort</code>  No If we should abort the process on failure. <code>false</code> <code>Bool</code> <code>Threshold</code>  No The smallest difference to be considered equal. Should be greater than zero. <code>1.19209e-07</code> <code>Float</code><code>Int</code> <p>This assertion is used to check whether the input is almost equal to a given value.</p>"},{"location":"shards/shards/Assert/IsAlmost/#examples","title":"Examples","text":"Code <pre><code>; Break = `false`, assertion false\n; =&gt; log assertion error but don't abort program\n8.0\nMaybe(\nAssert.IsAlmost(Value: 7.999 Break: false Epsilon: 0.0001))\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Break = `false`, assertion true\n; =&gt; log no errors and don't abort program\n8.0\nAssert.IsAlmost(Value: 8.0 Break: false)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>;; Break = `true`, assertion true\n;; =&gt; log no errors and don't abort program\n8\nAssert.IsAlmost(Value: 7 Break: true Epsilon: 1)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Assert/IsNot/","title":"Assert.IsNot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input can be of any type. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output will be the input (passthrough). <code>Any</code> <code>Value</code>  No The value to test against for equality. <code>none</code> <code>Any</code> <code>Break</code>  No If we should trigger a debug breakpoint on failure. <code>false</code> <code>Bool</code> <p>This assertion is used to check whether the input is different from a given value.</p>"},{"location":"shards/shards/Assert/IsNot/#examples","title":"Examples","text":"Code <pre><code>; Break = `false`, assertion true\n; =&gt; log no errors and don't abort program\n8\nAssert.IsNot(Value: 16 Break: false)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Assert/IsStatic/","title":"Assert.IsStatic","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Value</code>  No Any value to check for being static (non-var) <code>none</code> <code>Any</code> <p>Asserts that a value is static at run-time</p> <p> </p>"},{"location":"shards/shards/Assert/IsVariable/","title":"Assert.IsVariable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Value</code>  No Any value to check for being a variable <code>none</code> <code>Any</code> <p>Asserts that a value is a variable at run-time</p> <p> </p>"},{"location":"shards/shards/Audio/Channel/","title":"Audio.Channel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input will be passed to the code specified in the Shards parameter. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the output of the code specified in the Shards parameter. <code>Any</code> <code>InputBus</code>  No The an integer representing the input bus number. 0 represents the audio device's Analog-to-Digital Converter (ADC). <code>0</code> <code>Int</code> <code>InputChannels</code>  No A list of input channel indices to be used as input for the code specified in the Shards parameter. <code>[0 1]</code> <code>[Int]</code> <code>OutputBus</code>  No The output bus number. 0 represents the audio device's Digital-to-Analog Converter (DAC). <code>0</code> <code>Int</code> <code>OutputChannels</code>  No The list of output channel indices where the processed audio output from the code in the Shards parameter will be written. <code>[0 1]</code> <code>[Int]</code> <code>Volume</code>  No A float value representing the volume level of this channel. Accepts values between 0.0 (mute) and 1.0 (full volume). <code>0.7</code> <code>Float</code><code>Var(Float)</code> <code>Shards</code>  No The code that will process the audio data. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p>This shard represents an audio channel in the mesh. It manages the routing and processing of audio data between input and output buses, applies volume control, and executes custom audio processing shards. Audio.Channel works in conjunction with Audio.Device to handle audio processing within the shards system.</p> <p> </p>"},{"location":"shards/shards/Audio/Cones/","title":"Audio.Cones","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A float3 vector with each element representing the respective cone properties: innerAngleInRadians (the angle within which the sound is at full volume), outerAngleInRadians (the angle at which the sound starts to attenuate), and outerGain (the volume multiplier for sounds outside the outer angle). <code>Float3</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Float3</code> <code>Sound</code>  No The sound object to manipulate <code>none</code> <code>Object</code><code>Var(Object)</code> <p>The Audio.Cones shard sets the sound cone properties for a 3D sound object. Sound cones are used to create directional audio effects, where the volume of the sound changes based on the angle between the sound's direction and the listener's position. It takes the Sound object, created by Audio.Sound that is specified in the Sound parameter, and sets its cone properties using the float3 vector(a vector with 3 float elements) provided as input. The first float value in the float3 vector represents the inner angle in radians, the second float value represents the outer angle in radians, and the third float value represents the outer gain. This shard is particularly useful for creating directional audio effects in 3D environments and is typically used in conjunction with Audio.Engine, Audio.Sound, Audio.Position, and Audio.Direction. Do note that the Spatialized parameter on Audio.Sound should be set to true when initializing a sound object meant for 3D audio.</p> <p> </p>"},{"location":"shards/shards/Audio/Direction/","title":"Audio.Direction","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A float3 vector representing the new direction (x, y, z components) of the sound. This vector should be normalized (have a magnitude of 1). <code>Float3</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Float3</code> <code>Sound</code>  No The sound object to manipulate <code>none</code> <code>Object</code><code>Var(Object)</code> <p>The Audio.Direction shard sets the direction of a sound object in 3D audio space. It takes the Sound object, created by Audio.Sound that is specified in the Sound parameter, and sets its direction to the 3D vector with x y z coordinates, represented as a float3 vector(a vector with 3 float elements), that is provided as input. The x coordinate represents its direction along the x-axis, the y coordinate represents its direction along the y-axis, and the z coordinate represents its direction along the z-axis. The float3 vector input should also be normalized so that it has a magnitude of 1. This shard is particularly useful for creating directional audio effects in 3D environments and is typically used in conjunction with Audio.Engine, Audio.Sound, and Audio.Position to manage 3D audio positioning and orientation. Do note that the Spatialized parameter on Audio.Sound should be set to true when initializing a sound object meant for 3D audio.</p> <p> </p>"},{"location":"shards/shards/Audio/Oscillator/","title":"Audio.Oscillator","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts a float value representing the frequency of the waveform in Hertz (Hz). <code>Float</code> <code>Output \u27a1\ufe0f</code> Outputs audio data as an Audio chunk, containing the generated waveform samples. <code>Audio</code> <code>Type</code>  No The waveform type to oscillate (Sine, Square, Triangle or Sawtooth). <code>Waveform::Sine</code> <code>Waveform</code> <code>Amplitude</code>  No A float representing the waveform amplitude. <code>0.4</code> <code>Float</code><code>Var(Float)</code> <code>Channels</code>  No An int representing the number of desired output audio channels. <code>2</code> <code>Int</code> <code>SampleRate</code>  No An int representing desired output sampling rate. Ignored if this shard is inside an Audio.Channel. <code>44100</code> <code>Int</code> <code>Samples</code>  No An int representing desired number of samples in the output. Ignored if this shard is inside an Audio.Channel. <code>1024</code> <code>Int</code> <p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p>This shard generates audio waveforms. It can produce various types of waveforms such as sine, square, triangle, and sawtooth. The Oscillator is typically used within an Audio.Channel and can be controlled by other shards to create dynamic audio effects or synthesize sounds.</p> <p> </p>"},{"location":"shards/shards/Audio/Pan/","title":"Audio.Pan","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A float value representing the new pan position. -1.0 is full left, 0.0 is center, and 1.0 is full right. Values outside of this range will be clamped to the nearest extreme. <code>Float</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Float</code> <code>Sound</code>  No The sound object to manipulate <code>none</code> <code>Object</code><code>Var(Object)</code> <p>The Audio.Pan shard adjusts the stereo panning of a sound object in the mesh, allowing for dynamic control over the spatial positioning of individual sound objects during playback. It takes the Sound object, created by Audio.Sound that is specified in the Sound parameter, and sets the pan position to the float value provided as input (-1.0 being full left and 1.0 being full right). It's typically used in conjunction with Audio.Engine, Audio.Sound, Audio.Start, and other audio shards to manage audio playback and create spatial audio effects.</p> <p> </p>"},{"location":"shards/shards/Audio/Pause/","title":"Audio.Pause","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts a Sound object created by the Audio.Sound shard. <code>Object</code> <code>Output \u27a1\ufe0f</code> Outputs the same Sound object that was input, allowing for further manipulation. <code>Object</code> <p>The Audio.Pause shard pauses playback of a sound object in the mesh. It takes a Sound object which was created by Audio.Sound and played by Audio.Start and pauses its playback. This shard is typically used in conjunction with Audio.Engine, Audio.Sound, Audio.Start, and Audio.Stop to manage audio playback and control.</p> <p> </p>"},{"location":"shards/shards/Audio/Pitch/","title":"Audio.Pitch","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A float value representing the new pitch. 1.0 being the original pitch. <code>Float</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Float</code> <code>Sound</code>  No The sound object to manipulate <code>none</code> <code>Object</code><code>Var(Object)</code> <p>The Audio.Pitch shard adjusts the pitch of a sound object in the mesh, thus allowing for dynamic control over the pitch of individual sound objects during playback. It takes the Sound object, created by Audio.Sound that is specified in the Sound parameter, and sets the pitch to the float value provided as input. 1.0 being the original pitch, values greater than 1.0 will increase the pitch, while values between 0 and 1.0 will decrease the pitch. 0.5, for example, will lower the pitch by one octave, while 2.0 will raise it by one octave. It's typically used in conjunction with Audio.Engine, Audio.Sound, Audio.Start, and other audio shards to manage audio playback and create pitch-based effects.</p> <p> </p>"},{"location":"shards/shards/Audio/Position/","title":"Audio.Position","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A float3 vector representing the new 3D position (x, y, z coordinates) of the sound. <code>Float3</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Float</code> <code>Sound</code>  No The sound object to manipulate <code>none</code> <code>Object</code><code>Var(Object)</code> <p>The Audio.Position shard sets the 3D position of a sound object in the audio space. It takes the Sound object, created by Audio.Sound, that is specified in the Sound parameter, and sets its position to the 3D coordinates represented as a float3 vector(a vector with 3 float elements) provided as input. This shard is particularly useful for creating spatial audio effects and is typically used in conjunction with Audio.Engine, Audio.Sound, and Audio.Direction to manage 3D audio positioning and orientation. Do note that the Spatialized parameter on Audio.Sound should be set to true when initializing a sound object meant for 3D audio.</p> <p> </p>"},{"location":"shards/shards/Audio/ReadFile/","title":"Audio.ReadFile","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs audio data as an Audio chunk, containing the sample rate, number of samples, number of channels, and the audio samples. <code>Audio</code> <code>Source</code>  No The audio file or bytes to read from (wav,ogg,mp3,flac). <code>none</code> <code>String</code><code>Var(String)</code><code>Bytes</code><code>Var(Bytes)</code> <code>Channels</code>  No An int representing the number of desired output audio channels. <code>2</code> <code>Int</code> <code>SampleRate</code>  No An int representing the desired output sampling rate. <code>44100</code> <code>Int</code> <code>Samples</code>  No An int representing the desired number of samples in the output. <code>1024</code> <code>Int</code> <code>Looped</code>  No A boolean value indicating whether the audio file should be played in loop or should stop the wire when it ends. <code>false</code> <code>Bool</code> <code>From</code>  No A float value representing the starting time in seconds. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <code>To</code>  No A float value representing the end time in seconds. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p>This shard reads audio data from a file or memory buffer. It supports various audio formats including wav, ogg, mp3, and flac. Audio.ReadFile is designed to be used in conjunction with Audio.Device and Audio.Channel to process and play audio in the shards system. It provides the audio data that can be further processed or played through the audio device.</p> <p> </p>"},{"location":"shards/shards/Audio/Sound/","title":"Audio.Sound","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts a string representing the path to the audio file or asset to be loaded. <code>String</code> <code>Output \u27a1\ufe0f</code> Outputs a Sound object that can be used with other audio shards. <code>Object</code> <code>Spatialized</code>  No If the sound should have 3D audio capabilities. <code>false</code> <code>Bool</code> <p>The Audio.Sound shard initializes a sound object in the mesh. It loads an audio file and prepares it for playback. This shard is used in conjunction with other audio shards like Audio.Start, Audio.Pause, and Audio.Stop to control audio playback. It supports spatialization for 3D audio positioning and can be used with various audio effect shards for further processing. Do note that the Spatialized parameter on Audio.Sound should be set to true when initializing a sound object meant for 3D audio (if it is to be manipulated by Audio.Direction, Audio.Position, Audio.Velocity or Audio.Cones).</p> <p> </p>"},{"location":"shards/shards/Audio/Start/","title":"Audio.Start","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts a Sound object created by the Audio.Sound shard. <code>Object</code> <code>Output \u27a1\ufe0f</code> Outputs the same Sound object that was input, allowing for further manipulation. <code>Object</code> <code>Looped</code>  No If the sound should be played in loop or should stop the wire when it ends and play only once. <code>false</code> <code>Bool</code> <p>The Audio.Start shard begins playback of a sound object in the mesh. It takes a Sound object created by Audio.Sound and starts playing it and also allows control over whether the sound should loop or play once. It's typically used in conjunction with Audio.Engine, Audio.Sound, Audio.Pause, and Audio.Stop to manage audio playback.</p> <p> </p>"},{"location":"shards/shards/Audio/Stop/","title":"Audio.Stop","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts a Sound object created by the Audio.Sound shard. <code>Object</code> <code>Output \u27a1\ufe0f</code> Outputs the same Sound object that was input, allowing for further manipulation. <code>Object</code> <p>The Audio.Stop shard stops playback of a sound object in the mesh. It takes a Sound object which was created by Audio.Sound and played with Audio.Start and stops its playback, resetting the playback position to the beginning. This shard is typically used in conjunction with Audio.Engine, Audio.Sound, Audio.Start, and Audio.Pause to manage audio playback and control.</p> <p> </p>"},{"location":"shards/shards/Audio/Velocity/","title":"Audio.Velocity","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A float3 vector representing the new velocity (each float element representing the velocity along the x, y, and z axes respectively) of the sound in units per second. <code>Float3</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Float3</code> <code>Sound</code>  No The sound object to manipulate <code>none</code> <code>Object</code><code>Var(Object)</code> <p>The Audio.Velocity shard sets the velocity of a 3D sound object in the audio space. It takes the Sound object, created by Audio.Sound that is specified in the Sound parameter, and sets its velocity to the 3D vector, represented as a float3 vector(a vector with 3 float elements), provided as input. The first element in the float3 vector represents the velocity along the x-axis, the second element represents the velocity along the y-axis, and the third element represents the velocity along the z-axis. This shard is particularly useful for creating doppler effects and is typically used in conjunction with Audio.Engine, Audio.Sound, Audio.Position, and Audio.Direction to manage 3D audio positioning and movement. Do note that the Spatialized parameter on Audio.Sound should be set to true when initializing a sound object meant for 3D audio.</p> <p> </p>"},{"location":"shards/shards/Audio/Volume/","title":"Audio.Volume","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A float value representing the new volume level. 0.0 is silence, 1.0 is full volume, and values above 1.0 can be used for amplification. <code>Float</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Float</code> <code>Sound</code>  No The sound object to manipulate <code>none</code> <code>Object</code><code>Var(Object)</code> <p>The Audio.Volume shard adjusts the volume of a sound object in the mesh, thus allowing for the dynamic control over the volume of individual sound objects during playback. It takes the Sound object, created by Audio.Sound specified in the Sound parameter, and sets the volume to the float value provided as input. It's typically used in conjunction with Audio.Engine, Audio.Sound, Audio.Start, and other audio shards to manage audio playback and control.</p> <p> </p>"},{"location":"shards/shards/Audio/WriteFile/","title":"Audio.WriteFile","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts audio data as an Audio chunk, containing the sample rate, number of samples, number of channels, and the audio samples. <code>Audio</code> <code>Output \u27a1\ufe0f</code> Outputs the same audio data as the input, allowing for further processing in the audio chain. <code>Audio</code> <code>File</code>  No The audio file to read from (wav,ogg,mp3,flac). <code>none</code> <code>String</code><code>Var(String)</code> <code>Channels</code>  No An int representing the number of desired output audio channels. <code>2</code> <code>Int</code> <code>SampleRate</code>  No An int representing the desired number of samples in the output. <code>44100</code> <code>Int</code> <p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p>This shard writes audio data to WAV format file.</p> <p> </p>"},{"location":"shards/shards/BigInt/Abs/","title":"BigInt.Abs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting big integer with an absolute value, represented as bytes. <code>Bytes</code> <p>This shard computes the absolute value of a big integer.</p>"},{"location":"shards/shards/BigInt/Abs/#examples","title":"Examples","text":"Code <pre><code>@wire(main-wire {\n  1 | BigInt = expected\n\n  -1 | BigInt\n  BigInt.Abs\n  BigInt.Is(expected) | Assert.Is(true true)\n} Looped: true)\n\n{logic-behavior: main-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Add/","title":"BigInt.Add","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> Outputs the result of the operation as a big integer or sequence of big integers represented as bytes. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The big integer to add to the input as bytes. <code>0</code> <code>Var(Bytes)</code><code>Var([Bytes])</code> <p>This shard adds the input big integer to the big integer specified in the Operand parameter and outputs the result.</p>"},{"location":"shards/shards/BigInt/Add/#examples","title":"Examples","text":"Code <pre><code>7 | BigInt = expected\n4 | BigInt = operand\n\n3 | BigInt\nBigInt.Add(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/And/","title":"BigInt.And","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> Outputs the result of the AND operation as a big integer represented as bytes. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The second big integer to perform the AND operation with. <code>0</code> <code>Var(Bytes)</code><code>Var([Bytes])</code> <p>This shard performs a bitwise AND operation on the input big integer with the big integer specified in the Operand parameter and outputs the result. A bitwise AND operation is a binary operation that compares each bit of the binary representations of two numbers and outputs 1 if the bits are 1 and 0 otherwise. The resulting number is a big integer representation of the 1s and 0s concatenated.</p>"},{"location":"shards/shards/BigInt/And/#examples","title":"Examples","text":"Code <pre><code>2 | BigInt = expected\n3 | BigInt = operand\n\n6 | BigInt\nBigInt.And(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Divide/","title":"BigInt.Divide","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> Outputs the result of the operation as a big integer or sequence of big integers represented as bytes. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The big integer to divide the big integer input with. <code>0</code> <code>Var(Bytes)</code><code>Var([Bytes])</code> <p>This shard divides the input big integer by the big integer specified in the Operand parameter and outputs the result.</p>"},{"location":"shards/shards/BigInt/Divide/#examples","title":"Examples","text":"Code <pre><code>4 | BigInt = expected\n2 | BigInt = operand\n\n8 | BigInt\nBigInt.Divide(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/FromFloat/","title":"BigInt.FromFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Floating point number. <code>Float</code> <code>Output \u27a1\ufe0f</code> Big integer represented as bytes. <code>Bytes</code> <code>ShiftedBy</code>  No The shift is of the decimal point, i.e. of powers of ten, and is to the left if n is negative or to the right if n is positive. <code>0</code> <code>Int</code> <p>This shard converts a floating point number to a big integer.</p>"},{"location":"shards/shards/BigInt/FromFloat/#examples","title":"Examples","text":"Code <pre><code>42 | BigInt = expected\n\n42.1 | BigInt.FromFloat\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Is/","title":"BigInt.Is","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input big integer is equal to the big integer specified in the Operand parameter and false otherwise. <code>Bool</code> <code>Operand</code>  No The big integer to compare against represented as bytes. <code>none</code> <code>Var(Bytes)</code> <p>This shard checks if the input big integer is equal to the operand.</p>"},{"location":"shards/shards/BigInt/Is/#examples","title":"Examples","text":"Code <pre><code>11 | BigInt = expected\n\n11 | BigInt\nBigInt.Is(Operand: expected)\nAssert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/IsLess/","title":"BigInt.IsLess","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input big integer is less than the big integer specified in the Operand parameter and false otherwise. <code>Bool</code> <code>Operand</code>  No The big integer to compare against represented as bytes. <code>none</code> <code>Var(Bytes)</code> <p>This shard checks if the input big integer is less than the operand.</p>"},{"location":"shards/shards/BigInt/IsLess/#examples","title":"Examples","text":"Code <pre><code>11 | BigInt = expected\n\n9 | BigInt\nBigInt.IsLess(Operand: expected)\nAssert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/IsLessEqual/","title":"BigInt.IsLessEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input big integer is less than or equal to the big integer specified in the Operand parameter and false otherwise. <code>Bool</code> <code>Operand</code>  No The big integer to compare against represented as bytes. <code>none</code> <code>Var(Bytes)</code> <p>This shard checks if the input big integer is less than or equal to the operand.</p>"},{"location":"shards/shards/BigInt/IsLessEqual/#examples","title":"Examples","text":"Code <pre><code>11 | BigInt = expected\n\n9 | BigInt\nBigInt.IsLessEqual(Operand: expected)\nAssert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/IsMore/","title":"BigInt.IsMore","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input big integer is greater than the big integer specified in the Operand parameter and false otherwise. <code>Bool</code> <code>Operand</code>  No The big integer to compare against represented as bytes. <code>none</code> <code>Var(Bytes)</code> <p>This shard checks if the input big integer is greater than the operand.</p>"},{"location":"shards/shards/BigInt/IsMore/#examples","title":"Examples","text":"Code <pre><code>11 | BigInt = expected\n\n12 | BigInt\nBigInt.IsMore(Operand: expected)\nAssert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/IsMoreEqual/","title":"BigInt.IsMoreEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input big integer is greater than or equal to the big integer specified in the Operand parameter and false otherwise. <code>Bool</code> <code>Operand</code>  No The big integer to compare against represented as bytes. <code>none</code> <code>Var(Bytes)</code> <p>This shard checks if the input big integer is greater than or equal to the operand.</p>"},{"location":"shards/shards/BigInt/IsMoreEqual/#examples","title":"Examples","text":"Code <pre><code>11 | BigInt = expected\n\n12 | BigInt\nBigInt.IsMoreEqual(Operand: expected)\nAssert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/IsNot/","title":"BigInt.IsNot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input big integer is not equal to the big integer specified in the Operand parameter and false otherwise. <code>Bool</code> <code>Operand</code>  No The big integer to compare against represented as bytes. <code>none</code> <code>Var(Bytes)</code> <p>This shard checks if the input big integer is not equal to the operand.</p>"},{"location":"shards/shards/BigInt/IsNot/#examples","title":"Examples","text":"Code <pre><code>11 | BigInt = expected\n\n9 | BigInt\nBigInt.IsNot(Operand: expected)\nAssert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Max/","title":"BigInt.Max","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> Outputs the larger of the two input big integers. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The big integer to compare the input with. <code>0</code> <code>Var(Bytes)</code><code>Var([Bytes])</code> <p>This shard compares the input big integer with the big integer specified in the Operand parameter and outputs the larger of the two.</p>"},{"location":"shards/shards/BigInt/Max/#examples","title":"Examples","text":"Code <pre><code>7 | BigInt = expected\n4 | BigInt = operand\n\n7 | BigInt\nBigInt.Max(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Min/","title":"BigInt.Min","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> Outputs the smaller of the two input big integers. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The big integer to compare the input with. <code>0</code> <code>Var(Bytes)</code><code>Var([Bytes])</code> <p>This shard compares the input big integer with the big integer specified in the Operand parameter and outputs the smaller of the two.</p>"},{"location":"shards/shards/BigInt/Min/#examples","title":"Examples","text":"Code <pre><code>4 | BigInt = expected\n4 | BigInt = operand\n\n7 | BigInt\nBigInt.Min(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Mod/","title":"BigInt.Mod","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> Outputs the result of the operation as a big integer or sequence of big integers represented as bytes. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The big integer to compute the modulus with respect to. <code>0</code> <code>Var(Bytes)</code><code>Var([Bytes])</code> <p>This shard computes the modulus of the input big integer with respect to the big integer specified in the Operand parameter and outputs the result.</p>"},{"location":"shards/shards/BigInt/Mod/#examples","title":"Examples","text":"Code <pre><code>3 | BigInt = expected\n10 | BigInt = operand\n\n13 | BigInt\nBigInt.Mod(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Multiply/","title":"BigInt.Multiply","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> Outputs the result of the operation as a big integer or sequence of big integers represented as bytes. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The big integer to multiply the big integer input with. <code>0</code> <code>Var(Bytes)</code><code>Var([Bytes])</code> <p>This shard multiplies the input big integer with the big integer specified in the Operand parameter and outputs the result.</p>"},{"location":"shards/shards/BigInt/Multiply/#examples","title":"Examples","text":"Code <pre><code>24 | BigInt = expected\n3 | BigInt = operand\n\n8 | BigInt\nBigInt.Multiply(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Or/","title":"BigInt.Or","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> Outputs the result of the OR operation as a big integer represented as bytes. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The second big integer to perform the OR operation with. <code>0</code> <code>Var(Bytes)</code><code>Var([Bytes])</code> <p>This shard performs a bitwise OR operation on the input big integer with the big integer specified in the Operand parameter and outputs the result. A bitwise OR operation is a binary operation that compares each bit of the binary representations of two numbers and outputs 1 if the either or both bits are 1 and 0 if both bits are 0. The resulting number is a big integer representation of the 1s and 0s concatenated.</p>"},{"location":"shards/shards/BigInt/Or/#examples","title":"Examples","text":"Code <pre><code>7 | BigInt = expected\n3 | BigInt = operand\n\n6 | BigInt\nBigInt.Or(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Pow/","title":"BigInt.Pow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Outputs the BigInt result of the operation as bytes. <code>Bytes</code> <code>Operand</code>  No The power to which the input big integer will be raised. This must be a non-negative integer. <code>none</code> <code>Int</code><code>Var(Int)</code> <p>This shard raises the input big integer to the power of the exponent specified in the  Operand parameter.</p>"},{"location":"shards/shards/BigInt/Pow/#examples","title":"Examples","text":"Code <pre><code>8 | BigInt = expected\n\n2 | BigInt\nBigInt.Pow(Operand: 3)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Shift/","title":"BigInt.Shift","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Outputs the big integer with its decimal point shifted represented as bytes. <code>Bytes</code> <code>By</code>  No The number of decimal places to shift the input big integer by. A positive number shifts the decimal point to the right, while a negative number shifts it to the left. <code>0</code> <code>Int</code><code>Var(Int)</code> <p>This shard shifts the decimal point of the input big integer by the amount specified in the By parameter.</p>"},{"location":"shards/shards/BigInt/Shift/#examples","title":"Examples","text":"Code <pre><code>4200 | BigInt = expected\n\n42 | BigInt\nBigInt.Shift(By: 2)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Sqrt/","title":"BigInt.Sqrt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Outputs the square root of the input big integer represented as bytes. <code>Bytes</code> <p>This shard computes the square root of the input big integer represented as bytes.</p>"},{"location":"shards/shards/BigInt/Sqrt/#examples","title":"Examples","text":"Code <pre><code>2 | BigInt = expected\n\n4 | BigInt\nBigInt.Sqrt\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Subtract/","title":"BigInt.Subtract","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> Outputs the result of the operation as a big integer or sequence of big integers represented as bytes. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The big integer to subtract from the input as bytes. <code>0</code> <code>Var(Bytes)</code><code>Var([Bytes])</code> <p>This shard subtracts the input big integer from the big integer specified in the Operand parameter and outputs the result.</p>"},{"location":"shards/shards/BigInt/Subtract/#examples","title":"Examples","text":"Code <pre><code>5 | BigInt = expected\n2 | BigInt = operand\n\n7 | BigInt\nBigInt.Subtract(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/ToBytes/","title":"BigInt.ToBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer to convert, represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>Bits</code>  No The desired bit length for the output to take. If set to 0, the output will be the minimum number of bytes required to represent the big integer. <code>0</code> <code>Int</code> <p>This shard converts a big integer value into a bytes representaion with the specified bit length set in the Bits parameter. If set to 0, the output will be the minimum number of bytes required to represent the big integer. If set to a positive number, the output will be padded with leading zeros to match the specified bit length. An error is thrown if the number requires more bits than specified.</p>"},{"location":"shards/shards/BigInt/ToBytes/#examples","title":"Examples","text":"Code <pre><code>42 | BigInt\nBigInt.ToBytes(Bits: 16)\nToHex\nAssert.Is(\"0x002a\" true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/ToFloat/","title":"BigInt.ToFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The big integer to convert, represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Floating point number representation of the big integer value. <code>Float</code> <code>ShiftedBy</code>  No The number of decimal places to shift the input big integer by. A positive number shifts the decimal point to the right, while a negative number shifts it to the left. <code>0</code> <code>Int</code> <p>This shard converts the input big integer value to a floating point number.</p>"},{"location":"shards/shards/BigInt/ToFloat/#examples","title":"Examples","text":"Code <pre><code>3 | BigInt\nBigInt.ToFloat(ShiftedBy: 1)\nAssert.Is(3.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/ToHex/","title":"BigInt.ToHex","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer to convert, represented as bytes. <code>Int</code><code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> Outputs the hexadecimal representation of the input big integer value. <code>String</code> <p>This shard converts the input big integer value to its hexadecimal representation.</p>"},{"location":"shards/shards/BigInt/ToHex/#examples","title":"Examples","text":"Code <pre><code>42 | BigInt\nBigInt.ToHex\nAssert.Is(\"0x2a\" true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/ToInt/","title":"BigInt.ToInt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The big integer to convert, represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Integer representation of the big integer value. <code>Int</code> <p>This shard converts the input big integer value to an integer.</p>"},{"location":"shards/shards/BigInt/ToInt/#examples","title":"Examples","text":"Code <pre><code>42 | BigInt\nBigInt.ToInt\nAssert.Is(42 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/ToString/","title":"BigInt.ToString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Big integer represented as bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> String representation of the big integer value. <code>String</code> <p>Converts the value to a string representation.</p>"},{"location":"shards/shards/BigInt/ToString/#examples","title":"Examples","text":"Code <pre><code>42 | BigInt | BigInt.Shift(20)\nBigInt.ToString\nAssert.Is(\"4200000000000000000000\" true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/BigInt/Xor/","title":"BigInt.Xor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any valid big integer(s) represented as bytes supported by this operation. <code>Bytes</code><code>[Bytes]</code> <code>Output \u27a1\ufe0f</code> Outputs the result of the XOR operation as a big integer represented as bytes. <code>Bytes</code><code>[Bytes]</code> <code>Operand</code>  No The second big integer to perform the XOR operation with. <code>0</code> <code>Var(Bytes)</code><code>Var([Bytes])</code> <p>This shard performs a bitwise XOR operation on the input big integer with the big integer specified in the Operand parameter and outputs the result. A bitwise XOR operation is a binary operation that compares each bit of the binary representations of two numbers and outputs 1 if the bits are different and 0 if they are the same. The resulting number is a big integer representation of the 1s and 0s concatenated.</p>"},{"location":"shards/shards/BigInt/Xor/#examples","title":"Examples","text":"Code <pre><code>5 | BigInt = expected\n3 | BigInt = operand\n\n6 | BigInt\nBigInt.Xor(Operand: operand)\nBigInt.Is(expected) | Assert.Is(true true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Brotli/Compress/","title":"Brotli.Compress","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The byte array to compress. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The compressed byte array. <code>Bytes</code> <code>Quality</code>  No Compression quality, higher is better but slower, valid values from 1 to 11. <code>11</code> <code>Int</code> <p>This shard compresses the input byte array using the Brotli algorithm and outputs the smaller compressed byte array. The size of the resulting byte array and the speed of compression can be controlled using the Quality parameter.</p>"},{"location":"shards/shards/Brotli/Compress/#details","title":"Details","text":"<p>The compressed output includes a 4-byte header containing the original input size. This allows for easier decompression if required.</p> <p> </p>"},{"location":"shards/shards/Brotli/Decompress/","title":"Brotli.Decompress","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The compressed byte array to decompress. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The reverted uncompressed byte array. <code>Bytes</code> <p>This shard decompresses the input byte array that has been previously compressed using the Brotli.Compress shard.</p>"},{"location":"shards/shards/Brotli/Decompress/#details","title":"Details","text":"<p>This shard expects a 4-byte header that contains the original data size present in the input bytes sequence to be able to decompress it. If the 4-byte header is not present (If the input is not compressed or was compressed in a way other than Brotli.Compress which results in a compressed output that does not contain this header), the shard will throw an error.</p> <p> </p>"},{"location":"shards/shards/Bytes/Join/","title":"Bytes.Join","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The sequence of strings or byte array to concatenate. <code>[String Bytes]</code> <code>Output \u27a1\ufe0f</code> The concatenated string or bytes represented as a byte array. <code>Bytes</code> <p>This shard will concatenate a sequence of strings or bytes into a single string or byte array and output it as a byte array.</p>"},{"location":"shards/shards/Bytes/Join/#details","title":"Details","text":"<p>This shard is also able to accept a sequence that contains a mixture of strings and bytes.</p> <p> </p>"},{"location":"shards/shards/CSV/Read/","title":"CSV.Read","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A multiline string in CSV format. <code>String</code> <code>Output \u27a1\ufe0f</code> A sequence of rows, with each row being a sequence of strings. <code>[[String]]</code> <code>NoHeader</code>  No Whether the shard should parse the first row as data, instead of header. <code>false</code> <code>Bool</code> <code>Separator</code>  No The character to use as fields separator. <code>,</code> <code>String</code> <p>Reads a CSV string and outputs the data as a sequence of strings in a sequence of rows.</p> <p> </p>"},{"location":"shards/shards/CSV/Write/","title":"CSV.Write","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of rows, with each row being a sequence of strings. <code>[[String]]</code> <code>Output \u27a1\ufe0f</code> A multiline string in CSV format. <code>String</code> <code>NoHeader</code>  No Whether the shard should parse the first row as data, instead of header. <code>false</code> <code>Bool</code> <code>Separator</code>  No The character to use as fields separator. <code>,</code> <code>String</code> <p>Reads a sequence of strings in a sequence of rows and outputs the data as a CSV string.</p> <p> </p>"},{"location":"shards/shards/ChaChaPoly/Decrypt/","title":"ChaChaPoly.Decrypt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The encrypted byte array to decrypt. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The decrypted byte array. <code>Bytes</code> <code>Key</code>  No The private key to be used to encrypt/decrypt the input. Must be 32 bytes long. <code>none</code> <code>Bytes</code><code>Var(Bytes)</code> <p>This shard decrypts an input ChaCha20-Poly1305 encrypted byte array using the provided key (provided in the Key parameter). It then outputs the decrypted byte array.</p>"},{"location":"shards/shards/ChaChaPoly/Decrypt/#details","title":"Details","text":"<p>If the wrong key was provided in the <code>Key</code> parameter to decrypt the input, the shard will throw an error.</p> <p> </p>"},{"location":"shards/shards/ChaChaPoly/Encrypt/","title":"ChaChaPoly.Encrypt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string or byte array to encrypt. <code>String</code><code>Bytes</code> <code>Output \u27a1\ufe0f</code> The encrypted byte array. <code>Bytes</code> <code>Key</code>  No The private key to be used to encrypt/decrypt the input. Must be 32 bytes long. <code>none</code> <code>Bytes</code><code>Var(Bytes)</code> <p>This shard takes the input string or byte array and encrypts it using the ChaCha20-Poly1305 algorithm with the provided key (provided in the Key parameter). It then outputs the encrypted byte array.</p> <p> </p>"},{"location":"shards/shards/DSP/FFT/","title":"DSP.FFT","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The time-domain representation of an audio to be converted. Can be a float sequence, float2 sequence or a sound object. <code>[Float]</code><code>[Float2]</code><code>Audio</code> <code>Output \u27a1\ufe0f</code> The frequency-domain representation of the audio as a float2 sequence. <code>[Float2]</code> <p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p>This shard performs a Fast Fourier Transform (FFT) on the input. It takes the time-domain representation of an audio (represented as a sounds object, float sequence or float2 sequence) and outputs its frequency-domain representation as a float2 sequence.</p> <p> </p>"},{"location":"shards/shards/DSP/IFFT/","title":"DSP.IFFT","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The frequency-domain representation of an audio to be converted. <code>[Float2]</code> <code>Output \u27a1\ufe0f</code> The time-domain representation of the audio as a float sequence, float2 sequence or an audio object (determined by the Audio and Complex parameters). <code>[Float]</code><code>[Float2]</code><code>Audio</code> <code>Audio</code>  No If the output should be an Audio chunk. <code>false</code> <code>Bool</code> <code>Complex</code>  No If the output should be complex numbers (only if not Audio). <code>false</code> <code>Bool</code> <p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p>This shard performs an Inverse Fast Fourier Transform (IFFT) on the input. It takes the frequency-domain representation of an audio (represented as a float2 sequence) and outputs its time-domain representation (as a float sequence, float2 sequence or an audio object.)</p> <p> </p>"},{"location":"shards/shards/Date/Format/","title":"Date.Format","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> An epoch timestamp (seconds after epoch). <code>Int</code> <code>Output \u27a1\ufe0f</code> A formatted readable string. <code>String</code> <code>Format</code>  No The actual formatting string, see full docs: https://docs.rs/chrono/0.4.19/chrono/format/strftime/index.html#specifiers <code>%a %b %e %T %Y</code> <code>String</code> <p>Reads an epoch timestamps and formats it into a readable string.</p> <p> </p>"},{"location":"shards/shards/ECDSA/PublicKey/","title":"ECDSA.PublicKey","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The private key to generate the public key from. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The public key generated from the private key. <code>Bytes</code> <code>Compressed</code>  No Indicates if the output PublicKey should be in compressed format. <code>false</code> <code>Bool</code> <p>Generates the public key from the private key using the ECDSA algorithm.</p> <p> </p>"},{"location":"shards/shards/ECDSA/Recover/","title":"ECDSA.Recover","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The message hash to recover the public key from. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The public key recovered from the signature and message. <code>Bytes</code> <code>Signature</code>  No The signature generated from signing the input message with the private key. <code>none</code> <code>Bytes</code><code>Var(Bytes)</code> <code>Compressed</code>  No Indicates if the output PublicKey should be in compressed format. <code>false</code> <code>Bool</code> <p>Recovers the public key from the signature and message using the ECDSA algorithm.</p> <p> </p>"},{"location":"shards/shards/ECDSA/Seed/","title":"ECDSA.Seed","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The seed to generate the private key from. <code>String</code> <code>Output \u27a1\ufe0f</code> The private key generated from the seed. <code>Bytes</code> <code>Compressed</code>  No Indicates if the output PublicKey should be in compressed format. <code>false</code> <code>Bool</code> <p>Generates the private key from the seed using the ECDSA algorithm.</p> <p> </p>"},{"location":"shards/shards/ECDSA/Sign/","title":"ECDSA.Sign","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The message hash to sign with the private key, must be 32 bytes. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The signature generated from signing the input message with the private key. <code>Bytes</code> <code>Key</code>  No The private key used to sign the hashed message input. <code>none</code> <code>Bytes</code><code>Var(Bytes)</code> <p>Signs a message with the private key using the ECDSA algorithm.</p> <p> </p>"},{"location":"shards/shards/Ed25519/PublicKey/","title":"Ed25519.PublicKey","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <p>Extracts the public key from an Ed25519 signing key</p> <p> </p>"},{"location":"shards/shards/Ed25519/Sign/","title":"Ed25519.Sign","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>Key</code>  No The private key to be used to sign the message input. <code>none</code> <code>Bytes</code><code>Var(Bytes)</code> <p>Signs a message using the Ed25519 signature algorithm.</p> <p> </p>"},{"location":"shards/shards/Ed25519/Verify/","title":"Ed25519.Verify","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Key</code>  No The public key of the keypair that signed the message. This will be used to verify the signature. <code>none</code> <code>Bytes</code><code>Var(Bytes)</code> <code>Message</code>  No The message that was signed to produce the signature. This is the original plain bytes message that the signature was created for. <code>none</code> <code>Bytes</code><code>Var(Bytes)</code> <p>Verifies an Ed25519 signature</p> <p> </p>"},{"location":"shards/shards/Fbl/ClientId/","title":"Fbl.ClientId","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required for this operation. <code>None</code> <code>Output \u27a1\ufe0f</code> The output is an integer representing the current client's ID. <code>Int16</code> <p>Retrieves the current client's ID.</p> <p> </p>"},{"location":"shards/shards/Fbl/Deform/","title":"Fbl.Deform","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> If typed or untyped Form ID is provided, the shard destroys the specified form. If none is provided, the current form is destroyed. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Undoable</code>  No If the deform should be undoable <code>none</code> <code>Bool</code> <p>Destroys the specified form. The Form ID is passed through unchanged. Be careful when using this output Form ID as the form has been destroyed and no longer exists in the domain</p> <p> </p>"},{"location":"shards/shards/Fbl/Dispatch/","title":"Fbl.Dispatch","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to be dispatched. This value is then used to update the variable specified in the Name: parameter <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Form</code>  No The typed or untyped Form ID of the form to update. If none is provided, it will dispatch to the current form. <code>none</code> <code>None</code><code>Int16</code><code>Var(Int16)</code><code>Var(Fbl.TypedFormId)</code> <code>Behavior</code>  No The Behavior where the variable to update is located. <code>none</code> <code>Behavior</code><code>Var(Behavior)</code> <code>Name</code>  No The variable name to update. <code>none</code> <code>String</code><code>Var(String)</code> <code>Key</code>  No The optional key name if the variable to update is a table. <code>none</code> <code>None</code><code>String</code><code>Var(String)</code> <code>Optional</code>  No The target variable or Behaviors might not exist, in this case the dispatch does nothing. <code>false</code> <code>Bool</code> <code>Undoable</code>  No If true, the dispatch will be flagged as undo-able (when Undo/Redo is supported). <code>false</code> <code>Bool</code> <code>Unsafe</code>  No Don't perform type checks. <code>false</code> <code>Bool</code> <p>Dispatches a value to update a variable in a specified form. The form is identified by its Form ID and the variable is identified by its Behavior and Name. This operation is asynchronous and can cross Behaviors, serving as a means to communicate between them. However, when used within the same Behavior, it will execute inline. Supports optional updates and can be marked as undo-able.</p> <p> </p>"},{"location":"shards/shards/Fbl/Dupe/","title":"Fbl.Dupe","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The Form ID of the form to be duplicated. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Output \u27a1\ufe0f</code> The Form ID of the newly duplicated form. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Wait</code>  No Wait for the duplication process to complete before continuing. <code>true</code> <code>Bool</code> <p>Duplicates the form specified (that is specified through the Form ID passed in as input). The duplicated form retains the same traits, variables, and other properties as the original form. This operation is asynchronous, and the Form ID of the new form is returned once the duplication process is complete.</p> <p> </p>"},{"location":"shards/shards/Fbl/Fetch/","title":"Fbl.Fetch","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The typed or untyped Form ID of the form(s) from which the variable is to be read. It can be a single Form ID or a sequence of Form IDs. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code><code>[None Int16 Fbl.TypedFormId]</code> <code>Output \u27a1\ufe0f</code> The value(s) of the requested variable from the specified form(s). The output is either a single value or a sequence of values, depending on the input. <code>Any</code><code>[Any]</code> <code>Behavior</code>  No The Behavior where the variable to read is located. <code>none</code> <code>Behavior</code><code>Var(Behavior)</code> <code>Name</code>  No The variable name to read. <code>none</code> <code>String</code><code>Var(String)</code> <code>Key</code>  No The optional key name if the variable to read is within table. <code>none</code> <code>None</code><code>String</code><code>Var(String)</code> <code>Silent</code>  No Ignore failures without logging. <code>none</code> <code>None</code><code>Bool</code> <code>NoCache</code>  No Don't cache variable states. <code>none</code> <code>None</code><code>Bool</code> <p>Fetches the value of a specified variable from a form or a sequence of forms. The form is identified by its Form ID, and the variable is identified by its Behavior and name. This operation is asynchronous and can cross Behaviors, but when used within the same subsystem, it will execute inline. Supports optional caching and silent failure handling.</p> <p> </p>"},{"location":"shards/shards/Fbl/Find/","title":"Fbl.Find","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A table with search criteria including 'name' for the form name, 'asset' for the asset type. eg. {name:\" \" asset:\" \" <code>{Any}</code> <code>Output \u27a1\ufe0f</code> The untyped Form ID of the first matching form or a sequence of untyped Form IDs if multiple forms match the criteria. typed Form ID's are retrieved instead if Traits are provided. <code>Int16</code> <code>Partial</code>  No Search for partial name. <code>none</code> <code>None</code><code>Bool</code> <code>Insensitive</code>  No Search case insensitive. <code>none</code> <code>None</code><code>Bool</code> <code>Origin</code>  No The positional origin to start the search from. <code>none</code> <code>None</code><code>Float3</code><code>Var(Float3)</code> <code>Multiple</code>  No Return multiple forms. When set to true, the output of the shard will be a sequence of Form IDs. <code>none</code> <code>None</code><code>Bool</code> <code>Traits</code>  No Traits to check for <code>none</code> <code>None</code><code>{[Trait]}</code> <p>Searches for forms based on specified criteria such as name, asset type, and traits. Supports partial and case-insensitive search options. Can return a single form or multiple forms based on the input parameters.</p> <p> </p>"},{"location":"shards/shards/Fbl/FormId/","title":"Fbl.FormId","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> If a typed Form ID is provided, the corresponding untyped Form ID is retrieved. If none is provided, the untyped Form ID from the current form is retrieved. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Output \u27a1\ufe0f</code> The untyped Form ID of the form. <code>Int16</code> <p>Retrieves the untyped Form ID of the specified form or current form.</p> <p> </p>"},{"location":"shards/shards/Fbl/FormName/","title":"Fbl.FormName","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> If a typed Form ID is provided, the corresponding name is retrieved. If none is provided, the name from the current form is retrieved. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Output \u27a1\ufe0f</code> The name of the form. <code>String</code> <p>Retrieves the name of the specified form or current form.</p> <p> </p>"},{"location":"shards/shards/Fbl/Formalize/","title":"Fbl.Formalize","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input can be either none or a table with initial variable values, and the Behaviors the variables are located in, for the form to take such. Eg. {Graphics: {\"fbl/pose\": {translation: @f3(0 4.0 0) rotation: @f4(0 0 0 1) scale: @f3(1 1 1)}}} <code>{Any}</code><code>None</code> <code>Output \u27a1\ufe0f</code> The output is the Form ID of the form, which can be either typed or untyped depending on the traits. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Id</code>  No full asset ID or asset name to formalize <code>none</code> <code>String</code><code>Var(String)</code> <code>Wait</code>  No If the wire should wait for the form to complete formalization before continuing execution. <code>false</code> <code>Bool</code> <code>Tags</code>  No The tags to add to the form. <code>none</code> <code>[Any]</code><code>None</code> <code>Traits</code>  No Creates a form and verifies if it has the given traits. If Traits are provided, the shard will wait regardless of what is set in the Wait parameter. <code>none</code> <code>None</code><code>{[Trait]}</code> <code>Undoable</code>  No If the formalization should be undoable <code>none</code> <code>Bool</code> <code>Channel</code>  No The channel where the form will be created, can be none, in that case the current channel is used <code>none</code> <code>Int</code><code>None</code><code>Var(Int)</code> <p>Formalizes a form with optional tags and traits using the specified asset ID or asset name. This shard can wait for the formalization process to complete before proceeding.</p> <p> </p>"},{"location":"shards/shards/Fbl/HasTags/","title":"Fbl.HasTags","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The typed or untyped Form ID of the form to check for the specified tags. If none is provided, the current form is checked for the specified tags <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the form has the specified tags. <code>Bool</code> <code>Tags</code>  No The tags to check for. <code>none</code> <code>[Any]</code><code>Var([Any])</code> <code>All</code>  No Check if all tags are present. If set to false, it will check if any tag is present. <code>true</code> <code>Bool</code> <p>Checks if the specified form has the given tags. Supports checking if all specified tags are present or if any of the tags are present.</p> <p> </p>"},{"location":"shards/shards/Fbl/IsAgent/","title":"Fbl.IsAgent","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Returns true if current user is an Agent and false otherwise. <code>Bool</code> <code>Name</code>  No The additional agent name to check against. <code>agent-007</code> <code>String</code><code>Var(String)</code> <p>This shard checks if the current user running the code is an Agent. If the user is an Agent, it returns true and false otherwise. If an agent name was provided in the Name parameter, this shard will only return true if the current user is an Agent and also has the same specified name.</p> <p> </p>"},{"location":"shards/shards/Fbl/MarkdownViewer/","title":"Fbl.MarkdownViewer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{Any}</code> <p>A markdown viewer.</p> <p> </p>"},{"location":"shards/shards/Fbl/NextFrame/","title":"Fbl.NextFrame","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input value will pass through unchanged. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <p>Suspends execution until the next frame is processed. This operation is typically used to synchronize between Behaviors.</p> <p> </p>"},{"location":"shards/shards/Fbl/RunMode/","title":"Fbl.RunMode","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required for this operation. <code>None</code> <code>Output \u27a1\ufe0f</code> The output is an enumeration value representing the current run mode. <code>DomainRunMode</code> <p>Retrieves the current run mode as an enumeration value.</p> <p> </p>"},{"location":"shards/shards/Fbl/Username/","title":"Fbl.Username","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required for this operation. <code>None</code> <code>Output \u27a1\ufe0f</code> The output is a string representing the username. <code>String</code> <p>Retrieves the current user's username as a string.</p> <p> </p>"},{"location":"shards/shards/Fbl/Users/","title":"Fbl.Users","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required for this operation. <code>None</code> <code>Output \u27a1\ufe0f</code> A copy of the network clients' data, retrieved from the latest frame. <code>{none: {count: Int username: String is-agent: Bool ltc: Float}}</code> <p>Retrieves a copy of the network clients' data from the latest frame to avoid data races.</p> <p> </p>"},{"location":"shards/shards/Fbl/WithTag/","title":"Fbl.WithTag","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The tag to check for. <code>Any</code> <code>Output \u27a1\ufe0f</code> A sequence of untyped Form IDs that have the specified tag. <code>[Int16]</code> <p>Checks forms for the specified tag and outputs a sequence of untyped Form IDs that have that tag.</p> <p> </p>"},{"location":"shards/shards/Fbl/WithTags/","title":"Fbl.WithTags","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required for this shard. <code>None</code> <code>Output \u27a1\ufe0f</code> A sequence of untyped Form IDs of forms that match the specified tag criteria. <code>[Int16]</code> <code>Tags</code>  No The tags to check for. <code>none</code> <code>[Any]</code><code>Var([Any])</code> <code>All</code>  No Check if all tags are present, if false check if any tag is present. <code>true</code> <code>Bool</code> <p>Checks forms based on the specified tags and outputs a sequence of untyped Form ID's of forms that match the criteria. Supports checking if all specified tags are present or if any of the tags are present.</p> <p> </p>"},{"location":"shards/shards/Fbl/WithTrait/","title":"Fbl.WithTrait","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> If a typed Form ID is provided, the specified form is checked for a specific trait. If none is provided, the current form is checked for a specific trait. <code>None</code><code>Int16</code><code>Fbl.TypedFormId</code> <code>Output \u27a1\ufe0f</code> The typed Form ID if the form possesses the specified trait. <code>Fbl.TypedFormId</code> <code>Behavior</code>  No The Behavior to check <code>none</code> <code>Behavior</code> <code>Trait</code>  No The trait to check for <code>none</code> <code>Trait</code> <p>Checks if the given form possesses a specified trait for a particular Behavior. If the form has the trait, it outputs the form's typed Form ID.</p> <p> </p>"},{"location":"shards/shards/GFX/Buffer/","title":"GFX.Buffer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Buffer</code> <code>Type</code>  No The type descriptor of the buffer <code>none</code> <code>{Any}</code> <code>AddressSpace</code>  No The address space to use the buffer with <code>none</code> <code>None</code><code>BufferAddressSpace</code> <p>Creates a new graphics buffer </p> <p> </p>"},{"location":"shards/shards/GFX/BuiltinFeature/","title":"GFX.BuiltinFeature","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The feature object for use in a rendering pass. <code>GFX.Feature</code> <code>Id</code>  No Builtin feature id. <code>BuiltinFeatureId::Transform</code> <code>BuiltinFeatureId</code> <p>This shard creates the ready-made feature object of the feature specified in the ID parameter, for use in a rendering pass.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#details","title":"Details","text":"<p>The <code>GFX.Feature</code> shard is used to create a custom feature using the parameters provided while the <code>GFX.BuiltinFeature</code> shard is for adding a \"ready-made\" feature.</p> <p>The feature object created by this shard is usually collected into a sequence, which is then in turn used to create a render pass using <code>GFX.DrawablePass</code>.</p> <p>Listed below are the different available built in features that can be used in the <code>Id</code> parameter.</p> <ul> <li>"},{"location":"shards/shards/GFX/BuiltinFeature/#transform","title":"Transform","text":"<p>This Feature implements basic world/view/projection transform.</p> <p>Here are the entry points that are defined and can be added as dependencies by your own features.</p> <p>initLocalPosition (vertex) Sets the localPosition (float4) global from the vertex position.</p> <p>initScreenPosition (vertex) Sets the screenPosition global (float4) to the transformed vertex position (=projviewworld*). <p>writePosition (vertex) Writes screenPosition global to position output.</p> <p>initWorldNormal (vertex) Transforms the object normal and writes the transformed result into the worldNormal global (float3). If the mesh doesn't have vertex normals, the normal will be (0.0, 0.0, 1.0).</p> <p>writeNormal (vertex) Writes worldNormal global into worldNormal output.</p> <p> </p>"},{"location":"shards/shards/GFX/BuiltinFeature/#basecolor","title":"BaseColor","text":"<p>This Feature adds a per-object shader parameter with the name baseColor and a texture parameter with the same name.</p> <p>Here are the entry points that are defined and can be added as dependencies by your own features.</p> <p>initColor (vertex) This vertex shader entry point sets up the color global (float4) with the vertex color from the mesh if it has been set. If the mesh doesn't have a vertex color, it'll be white with alpha 1.0.</p> <p>writeColor (vertex) Writes color global to color output.</p> <p>readColor (fragment) Reads color input into color global (float4).</p> <p>textureColor (fragment) Reads the texture color from the baseColor texture and multiplies it with the current color global. It does nothing if the texture does not exist.</p> <p>writeColor (fragment) Writes color global to color output. color is the default name for the main color output from the fragment shader.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#vertexcolorfromnormal","title":"VertexColorFromNormal","text":"<p>This Feature outputs the mesh normal as a per-vertex color output.</p> <p>Use for debugging.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#wireframe","title":"Wireframe","text":"<p>This Feature changes how objects are rendered so that their edges are highlighted. Very basic, with a fixed edge width and color.</p> <p>Use for debugging.</p>"},{"location":"shards/shards/GFX/BuiltinFeature/#velocity","title":"Velocity","text":"<p>This Feature outputs per-object velocity into a velocity output and velocity global. For usage with effects that require a velocity buffer such as motion blur or temporal anti-aliasing.</p>"},{"location":"shards/shards/GFX/BuiltinMesh/","title":"GFX.BuiltinMesh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The output is a mesh object. <code>GFX.Mesh</code> <code>Type</code>  No The type of object to make. <code>BuiltinMeshType::Cube</code> <code>BuiltinMeshType</code> <p>This shard creates the ready-made mesh object of the shape defined in the Type parameter.</p>"},{"location":"shards/shards/GFX/BuiltinMesh/#details","title":"Details","text":"<p>The mesh object output created by this shard can be passed to the <code>Mesh</code> parameter of the <code>GFX.DrawablePass</code> shard to be added to the render pipeline and subsequently rendered.</p> <p> </p>"},{"location":"shards/shards/GFX/ClearQueue/","title":"GFX.ClearQueue","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The drawable queue object to clear. <code>GFX.DrawQueue</code> <code>Output \u27a1\ufe0f</code> None. <code>None</code> <p>Removes all drawable objects from the input drawable queue.</p> <p> </p>"},{"location":"shards/shards/GFX/CopyPass/","title":"GFX.CopyPass","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The render pass object for use in a render pipeline. <code>GFX.PipelineStep</code> <code>Name</code>  No A name for this pass, to aid in debugging <code>none</code> <code>None</code><code>String</code> <code>Outputs</code>  No The outputs to render into <code>none</code> <code>None</code><code>[{Any}]</code><code>Var([{Any}])</code> <code>OutputScale</code>  No The scale that the output should be rendered as <code>{main: none}</code> <code>None</code><code>Any</code> <code>Inputs</code>  No The names of the render pass objects to modify as a sequence of strings. <code>none</code> <code>None</code><code>[String]</code><code>Var([String])</code> <p>This shard creates a render pass object that is meant for transferring render data from one stage of the render pipeline to the next. It is also able to make changes to the render data specified in the Inputs parameter, like changing its texture format or down sampling the texture. It makes these changes through its Outputs and OutputScale parameters.</p>"},{"location":"shards/shards/GFX/CopyPass/#details","title":"Details","text":"<p>The render pass object created by this shard can be placed in a sequence with other render pass objects (created by <code>GFX.DrawablePass</code> and <code>GFX.EffectPass</code>). This sequence of render pass objects can then be used in conjuction with a view object (created by <code>GFX.View</code>) and passed to <code>GFX.Render</code> to produce a scene.</p> <p> </p>"},{"location":"shards/shards/GFX/Draw/","title":"GFX.Draw","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The drawable object (or sequence of drawable objects) to add to the draw queue. <code>GFX.Drawable</code><code>[GFX.Drawable]</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>GFX.Drawable</code><code>[GFX.Drawable]</code> <code>Queue</code>  No The queue object to add the drawable object to. <code>none</code> <code>Var(GFX.DrawQueue)</code> <p>This shard takes the input drawable object (or sequence of drawable objects) and adds them to the draw queue (created by GFX.DrawQueue) specified in the Queue parameter.</p> <p> </p>"},{"location":"shards/shards/GFX/DrawQueue/","title":"GFX.DrawQueue","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The drawable queue object. <code>GFX.DrawQueue</code> <code>AutoClear</code>  No When enabled, automatically clears the queue after items have been rendered <code>true</code> <code>None</code><code>Bool</code> <code>Threaded</code>  No When enabled, output unique queue references to be able to use them with channels <code>false</code> <code>None</code><code>Bool</code> <code>Trace</code>  No Enables debug tracing on this queue <code>false</code> <code>None</code><code>Bool</code> <p>Creates a new drawable queue object to add drawables to (using GFX.Draw).</p> <p> </p>"},{"location":"shards/shards/GFX/Drawable/","title":"GFX.Drawable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The transformation matrix of the drawable object to adopt. <code>[Float4](4)</code> <code>Output \u27a1\ufe0f</code> The drawable object. <code>GFX.Drawable</code> <code>Mesh</code>  No The mesh to use for this drawable. <code>none</code> <code>Var(GFX.Mesh)</code> <code>Material</code>  No The material <code>none</code> <code>None</code><code>Var(GFX.Material)</code> <code>Params</code>  No Shader parameters for this drawable <code>none</code> <code>None</code><code>{GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4 Var(GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4)}</code><code>Var({GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4 Var(GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4)})</code> <code>Features</code>  No Features to attach to this drawable <code>none</code> <code>None</code><code>[GFX.Feature]</code><code>Var([GFX.Feature])</code> <p>This shard creates a drawable object that can be added to a drawables queue for the render pipeline.</p> <p> </p>"},{"location":"shards/shards/GFX/DrawablePass/","title":"GFX.DrawablePass","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The render pass object for use in a render pipeline. <code>GFX.PipelineStep</code> <code>Name</code>  No A name for this pass, to aid in debugging <code>none</code> <code>None</code><code>String</code> <code>Queue</code>  No The drawables queue to get drawables from. <code>none</code> <code>Var(GFX.DrawQueue)</code> <code>Features</code>  No Features to attach to this drawable <code>none</code> <code>None</code><code>[GFX.Feature]</code><code>Var([GFX.Feature])</code> <code>Outputs</code>  No The outputs to render into <code>none</code> <code>None</code><code>[{Any}]</code><code>Var([{Any}])</code> <code>OutputScale</code>  No The scale that the output should be rendered as <code>{main: none}</code> <code>None</code><code>Any</code> <code>Sort</code>  No The sorting mode to use to sort the drawables. The default sorting behavior is to sort by optimal batching. <code>none</code> <code>None</code><code>SortMode</code><code>Var(SortMode)</code> <code>IgnoreDrawableFeatures</code>  No Ignore any features on drawables and only use the features specified in this pass. <code>none</code> <code>None</code><code>Bool</code> <p>This shard creates a render pass object, meant for rendering drawable objects, using the drawables from the drawables queue (specified in the Queue parameter) and the sequence of features objects (specified in the Features parameter).</p>"},{"location":"shards/shards/GFX/DrawablePass/#details","title":"Details","text":"<p>The render pass object created by this shard can be placed in a sequence with other render pass objects (created by <code>GFX.EffectPass</code> and <code>GFX.CopyPass</code>). This sequence of render pass objects can then be used in conjuction with a view object (created by <code>GFX.View</code>) and passed to <code>GFX.Render</code> to produce a scene.</p> <p> </p>"},{"location":"shards/shards/GFX/EffectPass/","title":"GFX.EffectPass","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The render pass object for use in a render pipeline. <code>GFX.PipelineStep</code> <code>Name</code>  No A name for this pass, to aid in debugging <code>none</code> <code>None</code><code>String</code> <code>Outputs</code>  No The outputs to render into <code>[{Name: color}]</code> <code>None</code><code>[{Any}]</code><code>Var([{Any}])</code> <code>OutputScale</code>  No The scale that the output should be rendered as <code>{main: none}</code> <code>None</code><code>Any</code> <code>Inputs</code>  No <code>none</code> <code>None</code><code>[String]</code><code>Var([String])</code> <code>EntryPoint</code>  No <code>none</code> <code>None</code><code>[Shard]</code><code>Var([Shard])</code> <code>Params</code>  No Shader parameters for this drawable <code>none</code> <code>None</code><code>{GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4 Var(GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4)}</code><code>Var({GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4 Var(GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4)})</code> <code>Features</code>  No Features to attach to this drawable <code>none</code> <code>None</code><code>[GFX.Feature]</code><code>Var([GFX.Feature])</code> <code>ComposeWith</code>  No Any table of values that need to be injected into this feature's shaders <code>none</code> <code>None</code><code>{Any}</code><code>Var({Any})</code> <p>This shard creates a render pass object designed for applying post processing effects or full-screen rendering techniques.</p>"},{"location":"shards/shards/GFX/EffectPass/#details","title":"Details","text":"<p>The render pass object created by this shard can be placed in a sequence with other render pass objects (created by <code>GFX.DrawablePass</code> and <code>GFX.CopyPass</code>). This sequence of render pass objects can then be used in conjunction with a view object (created by <code>GFX.View</code>) and passed to <code>GFX.Render</code> to produce a scene.</p> <p>Values given to the pixels in the Fragment stage are interpolated. Meaning, if different values are given to different parameters of two vertices, the value of that parameter for all the pixels drawn in between those two vertices will be interpolated appropriately.</p> <p> </p>"},{"location":"shards/shards/GFX/EndFrame/","title":"GFX.EndFrame","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <p>Explicitly end frame rendering, this is done automatically inside MainWindow. This shards is only needed when you want to end a frame earlier inside MainWindow</p> <p> </p>"},{"location":"shards/shards/GFX/Feature/","title":"GFX.Feature","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The feature object for use in a rendering pass. <code>GFX.Feature</code> <code>Shaders</code>  No A list of shader entry points <code>none</code> <code>None</code><code>[{Any}]</code> <code>ComposeWith</code>  No Any table of values that need to be injected into this feature's shaders <code>none</code> <code>None</code><code>{Any}</code><code>Var({Any})</code> <code>State</code>  No The table of render state flags to override <code>none</code> <code>None</code><code>{Any}</code><code>Var({Any})</code> <code>ViewGenerators</code>  No A collection of callbacks that will be run to generate per-view shader parameters during rendering. These parameters are added to the view buffer. <code>none</code> <code>None</code><code>Wire</code><code>[Wire]</code><code>[Shard]</code><code>[[Shard]]</code><code>None</code> <code>DrawableGenerators</code>  No A collection of callbacks that will be run to generate per-drawable shader parameters during rendering <code>none</code> <code>None</code><code>Wire</code><code>[Wire]</code><code>[Shard]</code><code>[[Shard]]</code><code>None</code> <code>Params</code>  No The parameters to add to the object buffer and expose to shaders, these default values can later be modified by the Params parameter in GFX.Material or GFX.Drawable. <code>none</code> <code>None</code><code>{GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4 Var(GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4) {Any}}</code><code>Var({GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4 Var(GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4) {Any}})</code> <code>BlockParams</code>  No Custom bindings to expose to shaders <code>none</code> <code>None</code><code>{Any}</code> <code>RequiredAttributes</code>  No The parameters to expose to shaders, these default values can later be overriden by materials or drawable Params <code>none</code> <code>None</code><code>[RequiredAttributes]</code> <code>UniqueVariables</code>  No List of variables that should be made unique <code>none</code> <code>None</code><code>[String]</code> <p>This shard creates a feature object based on what was provided in the different parameters.</p>"},{"location":"shards/shards/GFX/Feature/#details","title":"Details","text":"<p>The <code>GFX.Feature</code> shard is used to create a custom feature using the parameters provided while the <code>GFX.BuiltinFeature</code> shard is for adding an existing \"ready-made\" feature.</p> <p>The feature object created by this shard is usually collected into a sequence, which is then in turn used to create a render pass using <code>GFX.DrawablePass</code>.</p> <p> </p>"},{"location":"shards/shards/GFX/Material/","title":"GFX.Material","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the material created as a material object. <code>GFX.Material</code> <code>Params</code>  No Shader parameters for this drawable <code>none</code> <code>None</code><code>{GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4 Var(GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4)}</code><code>Var({GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4 Var(GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4)})</code> <code>Features</code>  No Features to attach to this drawable <code>none</code> <code>None</code><code>[GFX.Feature]</code><code>Var([GFX.Feature])</code> <p>This shard creates a material from the given parameters and features.</p>"},{"location":"shards/shards/GFX/Material/#details","title":"Details","text":"<p>The <code>Params</code> parameter can accept a table with keys representing the shader parameters for the material and their respective values. For example:   <pre><code>GFX.Material(Params: {\nbaseColor: @f4(1.0 0.5 0.2 1.0)\nroughness: 0.7\nmetallic: 0.2\nemissive: @f3(0.1 0.1 0.1)\nnormalScale: 1.0\n  aoStrength: 0.5\n})\n</code></pre></p> <p>The <code>Features</code> parameter can accept a sequence of feature objects, created either with the <code>GFX.Feature</code> or <code>GFX.BuiltinFeature</code> shard.</p> <p> </p>"},{"location":"shards/shards/GFX/Mesh/","title":"GFX.Mesh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input table containing Vertices and Indices keys with the relevent values to construct the mesh object. <code>{Vertices: [Float2 Float3 Float4 Color] Indices: [Int]}</code> <code>Output \u27a1\ufe0f</code> The created mesh object. <code>GFX.Mesh</code> <code>Layout</code>  No The names for each vertex attribute. The sequence provided will also be the pattern that dictates how the sequence value of the Vertices key in the input table will be interpreted. <code>none</code> <code>[String]</code> <code>WindingOrder</code>  No Determines which side of the triangle is considered the front face. <code>none</code> <code>WindingOrder</code> <p>This shard creates a mesh object using the data provided in the Vertices and Indices keys of the input table.</p>"},{"location":"shards/shards/GFX/Mesh/#details","title":"Details","text":"<p>The sequence of strings given to the <code>Layout</code> parameter will be used as the pattern to interpret the sequence value in the Vertices key of the input table.</p> <p>Consider the following example: <pre><code>{\n    \"Vertices\": [\n      @f3(-1.0 1.0 1.0) @color(0x000000)\n      @f3(1.0 1.0 1.0) @color(0x0000ff)\n      @f3(-1.0 -1.0 1.0) @color(0x00ff00)\n      @f3(1.0 -1.0 1.0) @color(0x00ffff)\n      @f3(-1.0 1.0 -1.0) @color(0xff0000)\n      @f3(1.0 1.0 -1.0) @color(0xff00ff)\n      @f3(-1.0 -1.0 -1.0) @color(0xffff00)\n      @f3(1.0 -1.0 -1.0) @color(0xffffff)]\n    \"Indices\": [\n      0 1 2\n      1 3 2\n      4 6 5\n      5 6 7\n      0 2 4\n      4 2 6\n      1 5 3\n      5 7 3\n      0 4 1\n      4 5 1\n      2 3 6\n      6 3 7\n    ]\n  }\n  GFX.Mesh(Layout: [\"position\" \"color\"] WindingOrder: WindingOrder::CW) = mesh\n</code></pre> The sequence in the <code>Layout</code> parameter will make it such that each pair of elements in the sequence represent a vertex, with the first value in the pair representing the vertex position and the second value represents the vertex colour. Thus element 1 and element 2 in the sequence repesent the first vertex, element 3 and element 4 represent the second vertex and so on and so forth.</p> <p>Any string can be added to the sequence of string in the <code>Layout</code> parameter, however the following strings already have a set definition and will be interpreted accordingly:   - \"position\" : Vertex position (usually 2D or 3D)   - \"color\" : Vertex color   - \"normal\" : Vertex normal (for lighting calculations)   - \"texCoord0\" , \"texCoord1\" , \"texCoord2\" etc. : Texture coordinates   - \"tangent\" : Tangent vector (for advanced lighting techniques)</p> <p>The <code>Shader.ReadInput</code> shard can be used to read the values assigned to the strings specified in the <code>Layout</code> parameter. <code>Shader.ReadInput(Name: \"texCoord0\")</code> for example will read the texture coordinates of the current vertex set to texCoord0.</p> <p>The sequence of indices in the <code>Indices</code> key of the input table will be used to draw the triangles that will make up the mesh, with each set of three indices representing a single triangle.</p> <p>Consider the following example: <pre><code>{\n    \"Vertices\": [\n      @f3(-1.0 1.0 1.0) @color(0x000000)\n      @f3(1.0 1.0 1.0) @color(0x0000ff)\n      @f3(-1.0 -1.0 1.0) @color(0x00ff00)\n      @f3(1.0 -1.0 1.0) @color(0x00ffff)\n      @f3(-1.0 1.0 -1.0) @color(0xff0000)\n      @f3(1.0 1.0 -1.0) @color(0xff00ff)\n      @f3(-1.0 -1.0 -1.0) @color(0xffff00)\n      @f3(1.0 -1.0 -1.0) @color(0xffffff)]\n    \"Indices\": [\n      0 1 2\n      1 3 2\n      4 6 5\n      5 6 7\n      0 2 4\n      4 2 6\n      1 5 3\n      5 7 3\n      0 4 1\n      4 5 1\n      2 3 6\n      6 3 7\n    ]\n  }\n  GFX.Mesh(Layout: [\"position\" \"color\"] WindingOrder: WindingOrder::CW) = mesh\n</code></pre> In this example, the vertex with index 0, 1 and 2 will form the first triangle, the vertex with index 1, 3 and 2 will form the second triangle and so on and so forth.</p> <p>The <code>WindingOrder</code> can either be <code>WindingOrder::CW</code> or <code>WindingOrder::CCW</code>. This will determine the orientation of the triangles that will be created from the indices.</p> <p>Consider the following example: <pre><code>{\n    \"Vertices\": [\n      @f3(-1.0 1.0 1.0) @color(0x000000)\n      @f3(1.0 1.0 1.0) @color(0x0000ff)\n      @f3(-1.0 -1.0 1.0) @color(0x00ff00)\n      @f3(1.0 -1.0 1.0) @color(0x00ffff)\n      @f3(-1.0 1.0 -1.0) @color(0xff0000)\n      @f3(1.0 1.0 -1.0) @color(0xff00ff)\n      @f3(-1.0 -1.0 -1.0) @color(0xffff00)\n      @f3(1.0 -1.0 -1.0) @color(0xffffff)]\n    \"Indices\": [\n      0 1 2\n      1 3 2\n      4 6 5\n      5 6 7\n      0 2 4\n      4 2 6\n      1 5 3\n      5 7 3\n      0 4 1\n      4 5 1\n      2 3 6\n      6 3 7\n    ]\n  }\n  GFX.Mesh(Layout: [\"position\" \"color\"] WindingOrder: WindingOrder::CW) = mesh\n</code></pre> In this example, since <code>WindingOrder</code> is set to <code>WindingOrder::CW</code>, the vertices are interpreted in clockwise order when viewed from the front of the triangle. - Vertex 0: (-1.0, 1.0, 1.0) - Vertex 1: ( 1.0, 1.0, 1.0) - Vertex 2: (-1.0, -1.0, 1.0) In this case, if you were looking at the front face of the triangle, you would see the vertices arranged clockwise: 0 -&gt; 1 -&gt; 2. The normal of this triangle would point towards the viewer (out of the screen).</p> <p>If <code>WindingOrder</code> is set to <code>WindingOrder::CCW</code>, the vertices are interpreted in counter-clockwise order when viewed from the front of the triangle. - Vertex 0: (-1.0, 1.0, 1.0) - Vertex 1: ( 1.0, 1.0, 1.0) - Vertex 2: (-1.0, -1.0, 1.0) However, now this order (0 -&gt; 1 -&gt; 2) is considered to be the back face of the triangle. The front face would be the reverse order: 2 -&gt; 1 -&gt; 0. The normal of this triangle would point away from the viewer (into the screen).</p> <p>The mesh object output created by this shard can be passed to the <code>Mesh</code> parameter of the <code>GFX.DrawablePass</code> shard to be added to the render pipeline and subsequently rendered.</p> <p> </p>"},{"location":"shards/shards/GFX/QueueDrawables/","title":"GFX.QueueDrawables","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The drawable queue to retrieve the drawable objects from. <code>GFX.DrawQueue</code> <code>Output \u27a1\ufe0f</code> A sequence of drawable objects. <code>[GFX.Drawable]</code> <p>Retrieves the drawable objects from the input drawable queue and outputs it as a sequence of drawable objects.</p> <p> </p>"},{"location":"shards/shards/GFX/ReadBuffer/","title":"GFX.ReadBuffer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Buffer</code>  No The buffer to read <code>none</code> <code>Var(GFX.Buffer)</code> <code>Var</code>  No The variable to read the data into <code>none</code> <code>Var({Any})</code> <code>Wait</code>  No Wait for read to complete <code>false</code> <code>Bool</code> <p>Creates a new graphics buffer </p> <p> </p>"},{"location":"shards/shards/GFX/ReadTexture/","title":"GFX.ReadTexture","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>GFX.Texture2D</code><code>GFX.TextureCube</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Image</code> <code>Wait</code>  No Wait for read to complete <code>false</code> <code>Bool</code> <p>Adds a render step that reads back the rendered textures into a images, the returned images </p> <p> </p>"},{"location":"shards/shards/GFX/Render/","title":"GFX.Render","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> This shard outputs none. <code>None</code> <code>Steps</code>  No Sequence of render pass objects to process. <code>none</code> <code>Var([GFX.PipelineStep])</code><code>[GFX.PipelineStep]</code> <code>View</code>  No The view to render. If no view object is provided, the default view will be used. <code>none</code> <code>None</code><code>Var(GFX.View)</code> <p>This shard takes the sequence of render pass objects specified in the Steps parameter, processes it sequentially, and renders the final scene based on the view object specified in the View parameter.</p>"},{"location":"shards/shards/GFX/Render/#examples","title":"Examples","text":"Code <pre><code>@wire(main-wire-graphics {\n  Once({\n    {State: {Culling: false}\n     Shaders: [{Name: \"z-discard\"\n                After: [\"readColor\"]\n                Stage: ProgrammableGraphicsStage::Fragment\n                EntryPoint: {\n            Shader.ReadGlobal(\"color\") | Take(3)\n            When(Predicate: IsLess(0.2) Action: {\n              Shader.Literal(\"discard;\")\n            })\n          }}]}\n    GFX.Feature &gt;&gt; features\n\n    GFX.BuiltinMesh(Type: BuiltinMeshType::Cube) = cube\n  })\n  fbl/translation | Math.Translation = translation-matrix\n  fbl/rotation | Math.Rotation = rotation-matrix\n  fbl/scale | Math.Scaling = scale-matrix\n  ; matmul them\n  translation-matrix | Math.MatMul(rotation-matrix) | Math.MatMul(scale-matrix) &gt;= transformation-matrix\n  ; and feed to gltf renderer\n  transformation-matrix\n  GFX.Drawable(Features: features Mesh: cube Params: {baseColor: @f4(0.0 1.0 0.0 1.0)})\n  @fbl/draw([])\n} Looped: true)\n\n{graphics-behavior: main-wire-graphics}\n</code></pre> Output <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/GFX/RenderInto/","title":"GFX.RenderInto","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input value will pass through unchanged. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Textures</code>  No The textures to render into to create. <code>none</code> <code>None</code><code>{{Any} Var(GFX.Texture2D)}</code> <code>Contents</code>  No The shards that will render into the given textures. <code>none</code> <code>Shard</code><code>[Shard]</code> <code>Size</code>  No The reference size. This will control the size of the render targets. <code>none</code> <code>None</code><code>Int2</code><code>Var(Int2)</code> <code>MatchOutputSize</code>  No When true, the texture rendered into is automatically resized to match the output size. <code>none</code> <code>None</code><code>Bool</code> <code>Viewport</code>  No The viewport. <code>none</code> <code>None</code><code>Int4</code><code>Var(Int4)</code> <code>WindowRegion</code>  No Sets the window region for input handling. <code>none</code> <code>None</code><code>Int4</code><code>Var(Int4)</code> <p>Renders within a region of the screen and/or to a render target</p> <p> </p>"},{"location":"shards/shards/GFX/RenderTarget/","title":"GFX.RenderTarget","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.RenderTarget</code> <code>Attachments</code>  No The list of attachements to create. <code>none</code> <code>{{String}}</code> <p>Groups a collection of textures into a render target that can be rendered into</p> <p> </p>"},{"location":"shards/shards/GFX/RenderTargetTexture/","title":"GFX.RenderTargetTexture","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>GFX.RenderTarget</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Texture2D</code> <code>Name</code>  No Name of the attachment to retrieve <code>none</code> <code>String</code><code>None</code> <p>Retrieve a named attachment from a render target</p> <p> </p>"},{"location":"shards/shards/GFX/Texture/","title":"GFX.Texture","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Image</code><code>None</code><code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Texture2D</code><code>GFX.TextureCube</code> <code>InterpretAs</code>  No Type to interpret image data as. (From image only, Default: UNormSRGB for RGBA8 images, UNorm for other formats) <code>none</code> <code>TextureType</code> <code>Format</code>  No The format to use to create the texture. The texture will be usable as a render target. (Render target only) <code>none</code> <code>TextureFormat</code><code>Var(TextureFormat)</code> <code>Resolution</code>  No The resolution of the texture to create. (Render target only) <code>none</code> <code>Int2</code><code>Var(Int2)</code> <code>MipLevels</code>  No The number of mip levels to create. (Render target only) <code>none</code> <code>Int</code><code>Var(Int)</code> <code>Dimension</code>  No The type of texture to create. (Render target only) <code>none</code> <code>TextureDimension</code> <code>Addressing</code>  No For sampling, sets the address modes. <code>none</code> <code>TextureAddressing</code><code>[TextureAddressing]</code> <code>Filtering</code>  No For sampling, sets the filter mode. <code>none</code> <code>TextureFiltering</code> <code>Label</code>  No Debug label for this object. <code>none</code> <code>String</code><code>Var(String)</code><code>None</code> <p>Creates a texture from an image. Or as a render target</p> <p> </p>"},{"location":"shards/shards/GFX/UIPass/","title":"GFX.UIPass","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The render pass object. <code>GFX.PipelineStep</code> <code>Queue</code>  No The drawables queue to get the UI drawable objects from. <code>none</code> <code>None</code><code>Var(GFX.DrawQueue)</code> <code>Name</code>  No A name for this pass, to aid in debugging <code>none</code> <code>None</code><code>String</code> <p>This shard creates a render pass object designed for rendering UI using the UI drawable objects from the drawables queue specified in the Queue parameter.</p> <p> </p>"},{"location":"shards/shards/GFX/UIScaleFactor/","title":"GFX.UIScaleFactor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code> <code>Window</code>  No The window to get the UI scaling factor of. <code>none</code> <code>None</code><code>Var(Object)</code> <p>Outputs the scaling factor for UI as determined by the operating system.</p>"},{"location":"shards/shards/GFX/UIScaleFactor/#details","title":"Details","text":"<p>If no window is specified in the <code>Window</code> parameter, the window of the current context (set by <code>GFX.MainWindow</code>) is used.</p> <p> </p>"},{"location":"shards/shards/GFX/View/","title":"GFX.View","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The view object created. <code>GFX.View</code> <code>View</code>  No The view matrix. <code>none</code> <code>None</code><code>Var([Float4](4))</code> <code>Fov</code>  No The vertical field of view. (In radians. Implies perspective projection) <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>OrthographicSizeType</code>  No The type of orthographic size. (Implies orthographic projection) <code>none</code> <code>None</code><code>OrthographicSizeType</code> <code>OrthographicSize</code>  No The orthographic size. (Implies orthographic projection) <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>Near</code>  No Near clipping distance <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>Far</code>  No Far clipping distance <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <p>This shard creates and manages a view object, which defines and controls the view or camera settings for a rendering pipeline.</p>"},{"location":"shards/shards/GFX/View/#details","title":"Details","text":"<p>This view object output of this shard can be used in conjunction with a sequence of render pass objects (created by <code>GFX.DrawablePass</code>, <code>GFX.EffectPass</code> and <code>GFX.CopyPass</code>) and <code>GFX.Render</code> to render a scene.</p> <p> </p>"},{"location":"shards/shards/GFX/ViewMatrix/","title":"GFX.ViewMatrix","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A view object created by GFX.View. <code>GFX.View</code> <code>Output \u27a1\ufe0f</code> A 4x4 matrix representing the view object's view matrix. <code>[Float4](4)</code> <p>This shard takes the input view object and outputs its view matrix, which represents the camera's position and orientation in the world space.</p> <p> </p>"},{"location":"shards/shards/GFX/ViewProjectionMatrix/","title":"GFX.ViewProjectionMatrix","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A view object created by GFX.View. <code>GFX.View</code> <code>Output \u27a1\ufe0f</code> A 4x4 matrix representing the view object's combined view-projection matrix. <code>[Float4](4)</code> <code>ViewSize</code>  No The size of the screen this view is being used with <code>none</code> <code>Float2</code><code>Var(Float2)</code> <p>This shard takes the input view object and outputs its combined view-projection matrix, which encapsulates both the view position and orientation(view matrix) and its orthographic projection(projection matrix).</p> <p> </p>"},{"location":"shards/shards/GFX/ViewRange/","title":"GFX.ViewRange","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A view object created by GFX.View. <code>GFX.View</code> <code>Output \u27a1\ufe0f</code> A float2 representing the view's near and far clipping range. <code>Float2</code> <p>This shard takes the input view object and outputs a float2 representing the view's near and far clipping range. The first value in the float2 represents the near clipping range while the second value represents the far clipping range.</p> <p> </p>"},{"location":"shards/shards/GFX/Viewport/","title":"GFX.Viewport","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the dimensions of the current viewport as an int4. <code>Int4</code> <p>This shard outputs the dimensions of the current viewport as an int4</p>"},{"location":"shards/shards/GFX/Viewport/#details","title":"Details","text":"<p>The elements of the int4 output of this shard represent the physical pixel coordinates of the viewport in the following format:   - The first element represents the x coordinate of the top left edge of the viewport.   - The second element represents the y coordinate of the top left edge of the viewport.   - The third element represents the x coordinate of the bottom right edge of the viewport.   - The fourth element represents the y coordinate of the bottom right edge of the viewport.   - The origin is at the top left of the window (at 0,0) and extends to the right(+X) and downwards(+Y).</p> <p> </p>"},{"location":"shards/shards/GFX/WindowFocused/","title":"GFX.WindowFocused","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs true if the window currently has focus, false otherwise. <code>Bool</code> <code>Window</code>  No The window to check focus state of. <code>none</code> <code>None</code><code>Var(Object)</code> <p>This shard outputs whether the window specified in the Window parameter currently has focus.</p> <p> </p>"},{"location":"shards/shards/GFX/WindowInsets/","title":"GFX.WindowInsets","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The window inset values as a float4. <code>Float4</code> <code>Window</code>  No The window to get the insets of. <code>none</code> <code>None</code><code>Var(Object)</code> <p>Retrieves the window inset values when rendering on mobile devices and screens with a keep-out area.</p>"},{"location":"shards/shards/GFX/WindowInsets/#details","title":"Details","text":"<p>The first element in the float4 output of this shard, represents the left inset, the second represents the right inset, the third represents the top inset, and the fourth represents the bottom inset.</p> <p>If no window is specified in the <code>Window</code> parameter, the window of the current context (set by <code>GFX.MainWindow</code>) is used.</p> <p> </p>"},{"location":"shards/shards/GFX/WindowPosition/","title":"GFX.WindowPosition","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the position of the window as an int2. The first element represents the x-coordinate and the second represents the y-coordinate. <code>Int2</code> <code>Window</code>  No The window to get the position of. <code>none</code> <code>None</code><code>Var(Object)</code> <p>This shard outputs the position of the window specified in the Window parameter.</p>"},{"location":"shards/shards/GFX/WindowPosition/#details","title":"Details","text":"<p>If no window is specified in the <code>Window</code> parameter, the window of the current context (set by <code>GFX.MainWindow</code>) is used.</p> <p> </p>"},{"location":"shards/shards/GFX/WindowSize/","title":"GFX.WindowSize","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the dimensions of the window as an int2. The first element represents the width and the second represents the height. <code>Int2</code> <code>Window</code>  No The window to get the size of. <code>none</code> <code>None</code><code>Var(Object)</code> <p>This shard outputs the dimensions of the window specified in the Window parameter.</p>"},{"location":"shards/shards/GFX/WindowSize/#details","title":"Details","text":"<p>If no window is specified in the <code>Window</code> parameter, the window of the current context (set by <code>GFX.MainWindow</code>) is used.</p> <p> </p>"},{"location":"shards/shards/GFX/WriteBuffer/","title":"GFX.WriteBuffer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Buffer</code>  No The buffer <code>none</code> <code>Var(GFX.Buffer)</code> <code>RuntimeLength</code>  No The length of the runtime sized array of the buffer, if any <code>none</code> <code>None</code><code>Int</code><code>Var(Int)</code> <p>Creates a new graphics buffer </p> <p> </p>"},{"location":"shards/shards/GFX/glTF/","title":"GFX.glTF","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard can take 2 different types of input. It can take a 4x4 transformation for the glTF model to adopt. Or, it can accept a table which contain the transformation matrix and additional information to modify the materials of the glTF model. <code>[Float4](4)</code><code>{transform: [Float4](4) none: Any}</code> <code>Output \u27a1\ufe0f</code> Outputs the drawable object. <code>GFX.Drawable</code> <code>Path</code>  No The path to load the model from <code>none</code> <code>None</code><code>String</code><code>Var(String)</code> <code>Bytes</code>  No The bytes to load the model from <code>none</code> <code>None</code><code>Bytes</code><code>Var(Bytes)</code> <code>Copy</code>  No Reference to another glTF model to copy <code>none</code> <code>None</code><code>Var(GFX.Drawable)</code> <code>Params</code>  No Shader parameters for this drawable <code>none</code> <code>None</code><code>{GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4 Var(GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4)}</code><code>Var({GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4 Var(GFX.Texture2D GFX.TextureCube Var(GFX.Buffer) [Float4](4) Float4 Float3 Float2 Float Int Int2 Int3 Int4)})</code> <code>Features</code>  No Features to attach to this drawable <code>none</code> <code>None</code><code>[GFX.Feature]</code><code>Var([GFX.Feature])</code> <code>AnimationController</code>  No The animation controller <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>WrapRootNode</code>  No Wrap the root node so animations applied to it still work <code>none</code> <code>None</code><code>Bool</code> <p>This shard takes the glTF model (specified either in the Path, Bytes or Copy parameter) and outputs a drawable object which can be subsequently added to the drawables queue for the render pipline.</p>"},{"location":"shards/shards/GFX/glTF/#details","title":"Details","text":"<p>This shard can take a table as input that contains the following keys with the following values:   - \"transform\": The 4x4 transformation matrix that contains the translation, rotation and scale for the glTF model to adopt.   - \"materials\": A sub-table that contains information to modify the materials of the glTF model.   - [\"bone1\" \"bone2\" \"bone3\"]: A node can be modified by passing the bones path as a sequence of strings as the key and a sub-table containing the parameters to modify.     Eg.     <pre><code>{\n  [\"rootNode\" \"spine\" \"upperBody\"]: {\n    scale: @f3(2.0)\n  }\n} GFX.glTF(Bytes: asset/my-model)\n</code></pre></p> <p>The sub-table that can be provided in the materials key of the input table will take the following format: <code>\"key\" : value</code> where the key will be the name of the material to modify and the value can either be:   - a material object to replace the current material of the glTF model with, or   - another sub-table which contains information that can modify the current material.</p> <p>The sub-table that can be used to modify the material can take the following format:   - \"params\": a table containing keys representing parameters specific to the material and values with their respective types. Providing the a value to a key here will modify the value of the parameter in the final glTF model.</p> <p>The input table can include keys representing nodes to modify. The keys can be a sequence of strings representing the nodes to modify. There can also be multiple keys with different sequences of nodes. The values for these node keys can be a table with the following keys:   - \"transform\": A 4x4 transformation matrix (overrides individual components)   - \"translation\": A float3 value for node translation   - \"rotation\": A float4 quaternion for node rotation   - \"scale\": A float3 value for node scaling   - \"params\": A table of node-specific parameters (if applicable)</p> <p>In Formabble, the 3D asset is given to the <code>Copy</code> parameter for the shard to create the drawable object for that asset.</p> <p> </p>"},{"location":"shards/shards/GLTF/PackGLB/","title":"GLTF.PackGLB","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Path to the glTF file to convert. <code>String</code> <code>Output \u27a1\ufe0f</code> Outputs the GLB bytes of the converted glTF file. <code>Bytes</code> <p>This shard takes the glTF file (specified by the input file path) and converts it into GLB format.</p> <p> </p>"},{"location":"shards/shards/General/Abs/","title":"Abs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The numeric value or a sequence of numeric values to get the absolute value of. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the absolute value of the input. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard outputs the absolute value of the input.</p> <p> </p>"},{"location":"shards/shards/General/Acos/","title":"Acos","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the inverse cosine of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the angle in radians whose cosine is the input value. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the inverse cosine of the given input, where the input is the cosine value. The output is the angle in radians whose cosine is the input value.</p> <p> </p>"},{"location":"shards/shards/General/Add/","title":"Add","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value or the sequence of values to add the value specified in the Operand parameter to. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> This shard outputs the result of the addition. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The value or sequence of values to add to the input. <code>0</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard adds the input value to the value provided in the Operand parameter.</p> <p> </p>"},{"location":"shards/shards/General/And/","title":"And","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> If true, the flow continues; otherwise, it stops. <code>Bool</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be the input of the current conditional flow or wire. <code>Bool</code> <p>If the input of the preceding shard is true, the flow continues; otherwise, the flow stops. This shard is typically used within conditional flows (e.g., If, When) to chain conditions. Note: Outside a conditional flow, it might restart the current wire, which can be used as a trick in certain scenarios.</p>"},{"location":"shards/shards/General/And/#examples","title":"Examples","text":"Code <pre><code>5 = x\n\nx\nIf(Predicate: {IsMore(1) | And | IsLess(10)} Then: {\n    Log(\"Value is more than 1 and less than 10\")\n  } Else: {\n    Log(\"Value is not more than 1 and less than 10\")\n  }\n)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/AppendTo/","title":"AppendTo","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to append to the collection. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>Collection</code>  No The collection to add the input to. <code>none</code> <code>Var([Any])</code><code>Var(String)</code><code>Var(Bytes)</code> <p>Appends the input to the context variable passed to <code>:Collection</code>.</p>"},{"location":"shards/shards/General/AppendTo/#examples","title":"Examples","text":"Code <pre><code>;; append element to sequence\n[1 2 3] &gt;= seq\n4 | AppendTo(seq) ;; appends element to sequence\nseq | Log ;; updated sequence =&gt; [1, 2, 3, 4]\n\n;; append character to string\n\"Hell\" &gt;= str\n\"o\" | AppendTo(str) ;; appends character to string\nstr | Log ;; updated string =&gt; Hello\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Asin/","title":"Asin","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the inverse sine of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the angle in radians whose sine is the input value. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the inverse sine of the given input, where the input is the sine value. The output is the angle in radians whose sine is the input value.</p> <p> </p>"},{"location":"shards/shards/General/Assoc/","title":"Assoc","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input sequence that defines which element in the target sequence or table needs to be updated and with what value. Should have even number of elements. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> Modified array or table. Has the same type as the array or table on which Assoc was applied. <code>[Any]</code> <code>Name</code>  No The name of the sequence or table to be updated. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No Table key for the value that is to be updated. Parameter applicable if target is table. <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is or should be available to all the wires in the same mesh. The default value (false) makes the variable local to the wire. <code>false</code> <code>Bool</code> <p>Updates a sequence (array) or a table (associative array/ dictionary) on the basis of an input sequence.</p>"},{"location":"shards/shards/General/Assoc/#details","title":"Details","text":"<p>This shard can be used to update specific member elements within a sequence or a table with new values.</p> <p>The input sequence identifies which elements are to be updated and their new/ updated values. To achieve this, the member elements of this input sequence are parsed in pairs. The 1st element of each pair gives the index of the target element to update, and the 2nd element of that pair gives the new value for the target element. Due to this, the input sequence must always contain an even number of elements.</p>"},{"location":"shards/shards/General/Assoc/#examples","title":"Examples","text":"Code <pre><code>;; Update a global-var table (Global = true; table available to all the wires in the same mesh)\n{key1: [10 20] key2: [30 40]} | Set(Name: tableG Global: true)\nLog(\"Original Table\") ;; prints original table =&gt; {:key1 [10 20] :key2 [30 40]}\n[0 2 1 3] | Assoc(tableG \"key1\") ;; input sequence updates value of key \"key1\" in table\ntableG | Log(\"Modified Table\") ;; prints updated table =&gt; {:key1 [2 3] :key2 [30 40]}\ntableG | Assert.Is({key1: [2 3] key2: [30 40]} true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>;; Update a local-variable table (:Global = false, table available to only this wire in the mesh)\n{key1: [10 20] key2: [30 40]} &gt;= table ; (needs to be mutable!)\nLog ;; prints original table =&gt; {key1: [10 20] key2: [30 40]}\n[0 2 1 3] | Assoc(Name: table Key: \"key2\") ;; input sequence updates value of key \"key2\" in table\ntable | Log ;; prints updated table =&gt; {key1: [10 20] key2: [2 3]}\ntable | Assert.Is({key1: [10 20] key2: [2 3]} true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>;; Update a sequence (needs to be mutable!)\n[10 20] &gt;= sequence\nLog(\"Original Sequence\") ;; prints original target sequence =&gt; [10 20]\n[0 2 1 3] | Assoc(sequence) ;; input sequence updates target sequence [index-0 ele =&gt; 2, index-1 ele =&gt; 3]\nsequence | Log(\"Modified Sequence\") ;; prints updated target sequence =&gt; [2 3] \nsequence | Assert.Is([2 3] true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Atan/","title":"Atan","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the inverse tangent of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the angle in radians whose tangent is the input value. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the inverse tangent of the given input, where the input is the tangent value. The output is the angle in radians whose tangent is the input value.</p> <p> </p>"},{"location":"shards/shards/General/Await/","title":"Await","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Must match the input types of the first shard in the sequence. <code>Any</code> <code>Output \u27a1\ufe0f</code> Will match the output types of the first shard of the sequence. <code>Any</code> <code>Shards</code>  No The shards to activate. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Executes a shard or a sequence of shards asynchronously and awaits their completion.</p>"},{"location":"shards/shards/General/Await/#details","title":"Details","text":"<p><code>Await</code> runs its shards (or sequence of shards) as a separate task that is sent directly to the thread pool, while the rest of the program continues executing (via other scheduled threads). Once this <code>Await</code> task thread completes its execution the result of the execution of these inner shards is made available to the program.</p> <p>This is called asynchronous computation and is used to prevent resource intensive processing (like downloading a large file data from an http server) from holding up the execution of the rest of the program.</p> <p>Note</p> <p>Await is best used for shards that will take a long time to complete their tasks. Shards like <code>FS.Read</code> and <code>FS.Write</code> are good candidates to be wrapped in <code>Await</code>.</p>"},{"location":"shards/shards/General/Await/#examples","title":"Examples","text":"Code <pre><code>; ; Asynchronous execution of shards (using keyword `Await`)\n; ; Printing order of messages not consistent across program runs --\n; ; -- as asynchronous shards might complete at different times\n\n\n@wire(await-wire {\n  Await({\n    Msg(\"Message 1\")\n    ; ; messages might print in any order (1/2/3, 1/3/2, 3/2/1, etc.)\n    Msg(\"Message 2\")\n    ; ; messages might print in any order (1/2/3, 1/3/2, 3/2/1, etc.)) \n  })\n}\nLooped: true)\n\n@wire(my-wire {\n  Msg(\"Message 3\")\n  ; ; messages might print in any order (1/2/3, 1/3/2, 3/2/1, etc.)\n} Looped: true)\n\n@mesh(main)\n@schedule(main await-wire)\n@schedule(main my-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/BigInt/","title":"BigInt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input value to convert to a big integer. <code>Int</code><code>Float</code><code>String</code><code>Bytes</code> <code>Output \u27a1\ufe0f</code> Big integer represented as bytes. <code>Bytes</code> <p>Converts various input types to a big integer represented as bytes. Big integers are signed and can be of arbitrary size. This allows for users to work with numbers that are too large to be represented by standard integer types.</p> <p> </p>"},{"location":"shards/shards/General/BitSwap32/","title":"BitSwap32","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a 32-bit integer value. <code>Int</code> <code>Output \u27a1\ufe0f</code> Outputs the reversed bytes as an integer. <code>Int</code> <p>This shard takes a 32-bit integer, reverses their order of its bytes, and outputs the result as an integer. This is useful for converting between different endianness formats.</p> <p> </p>"},{"location":"shards/shards/General/BitSwap64/","title":"BitSwap64","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a 64-bit integer value. <code>Int</code> <code>Output \u27a1\ufe0f</code> Outputs the reversed bytes as an integer. <code>Int</code> <p>This shard takes a 64-bit integer, reverses their order of its bytes, and outputs the result as an integer. This is useful for converting between different endianness formats.</p> <p> </p>"},{"location":"shards/shards/General/Branch/","title":"Branch","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input value will pass through unchanged. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Wires</code>  No The Wires to schedule and run on this branch. <code>none</code> <code>Wire</code><code>[Wire]</code><code>None</code> <code>FailureBehavior</code>  No The policy to take when some of the Wires running on this branch fail. <code>BranchFailure::Everything</code> <code>BranchFailure</code> <code>CaptureAll</code>  No If all of the existing variables should be copied onto the branch created, regardless if they are used or not. <code>false</code> <code>Bool</code> <code>Mesh</code>  No The Behavior to branch from. If none provided, it will branch from the Behavior that the current Wire is on. <code>Mesh 0x0x3592d4100</code> <code>None</code><code>Mesh</code> <p>Creates a branch from the specified Behavior and schedules all the Wires specified. Every time this shard is called, it will progress the state of all the Wires specified asynchronously and continue execution of the current Wire. This shard is like a mass Step, where it Steps all the Wires specified.</p>"},{"location":"shards/shards/General/Branch/#details","title":"Details","text":"<p>All child wires scheduled inherits and uses the context variables of the parent wire. Any changes to said variables will also be reflected on the parent wire and subsequent child wires scheduled.</p> <p>Child wires are scheduled and executes inline. The parent wire will progress the state of all child wires sequentially, however, if there is any pauses or breaks in the child wires' execution, the shard will progress the state of the next child wire or relinquish control back to the parent wire. This means that any pauses on any child wire will not pause the parent wire.</p> <p>Child wires are scheduled on a child mesh of the mesh the parent wire is on.</p>"},{"location":"shards/shards/General/Branch/#examples","title":"Examples","text":"Code <pre><code>@wire(c1 {\n  msg1 (Log)\n})\n\n@wire(c2 {\n  msg2 (Log)\n})\n\n@wire(main-wire {\n  \"Hello\" = msg1\n  \"World\" = msg2\n  Branch([c1 c2])\n})\n\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Browse/","title":"Browse","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The URL to navigate to. <code>String</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>String</code> <p>This shard will open the URL string input in the current system's default web browser.</p>"},{"location":"shards/shards/General/Browse/#details","title":"Details","text":"<p>If an invalid URL string was provided as input, the shard will not open the browser.</p> <p> </p>"},{"location":"shards/shards/General/BytesToInts/","title":"BytesToInts","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a byte array as input. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Outputs the input bytes represented as a sequence of integers. <code>[Int]</code> <p>Convert bytes into a sequence of integers. Each byte is interpreted as an integer and stored in the sequence.</p> <p> </p>"},{"location":"shards/shards/General/BytesToString/","title":"BytesToString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts a byte array as input. Each byte in the sequence is interpreted as a character. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The output is a string created from the input sequence of bytes. <code>String</code> <p>Converts a sequence of bytes into a string. Each byte in the sequence is interpreted as a character in the resulting string.</p> <p> </p>"},{"location":"shards/shards/General/CaptureLog/","title":"CaptureLog","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input is ignored. This shard captures log messages based on specified parameters. <code>None</code> <code>Output \u27a1\ufe0f</code> A sequence of captured log messages. <code>[String]</code> <code>Size</code>  No The maximum number of logs to retain. <code>8</code> <code>Int</code> <code>MinLevel</code>  No The minimum level of logs to capture. <code>debug</code> <code>String</code> <code>Pattern</code>  No The pattern used to format the logs. <code>%^[%l]%$ [%Y-%m-%d %T.%e] [T-%t] [%s::%#] %v</code> <code>String</code> <code>Suspend</code>  No Suspend execution until new logs are available. <code>false</code> <code>Bool</code> <p>Captures log messages based on specified parameters, such as the number of messages to retain, the minimum log level, and the log format pattern. It can optionally suspend execution until new log messages are available.</p>"},{"location":"shards/shards/General/CaptureLog/#examples","title":"Examples","text":"Code <pre><code>Msg(\"Hello shards!\")\nCaptureLog(\n  Size: 24\n  MinLevel: \"info\"\n  Pattern: \"%^[%l]%$ [%Y-%m-%d %T.%e] %v\"\n) | ExpectStringSeq\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Ceil/","title":"Ceil","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to round up. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the input rounded up to the nearest integer (as a float). <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard rounds up the input to the nearest integer.</p> <p> </p>"},{"location":"shards/shards/General/Clamp/","title":"Clamp","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to clamp. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code> <code>Output \u27a1\ufe0f</code> The clamped value. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code> <code>Min</code>  No The lower bound of the range <code>none</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <code>Max</code>  No The upper bound of the range <code>none</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard ensures the input value falls within the specified range. If the value falls below the minimum, the Min value is returned. If the value exceeds the maximum, the Max value is returned. Otherwise, the value is returned unchanged.</p>"},{"location":"shards/shards/General/Clamp/#details","title":"Details","text":"<p>This shard can accept integer or float vectors as input.</p> <p>The input type and the type provided in the <code>Min</code> and <code>Max</code> parameters must be the same. (eg. if the input is a vector, the <code>Min</code> and <code>Max</code> parameters must be a vector of the same type)</p> <p>The input vector and the <code>Min</code> and <code>Max</code> vector must be of the same length.</p> <p>If the shard is comparing vectors, it will clamp each corresponding element in the input vector with the corresponding element in the <code>Min</code> and <code>Max</code>. Consider the following example: <pre><code>@i2(2 5)\n  Clamp(Min: @i2(3 3) Max: @i2(4 4))\n  Log(\"Result\")\n</code></pre> The result will be <code>@i2(3 4)</code>. The first element in the input vector is 2, which is less than the first element in the <code>Min</code> vector (3), so it is clamped to 3. The second element in the input vector is 5, which is greater than the second element in the <code>Max</code> vector (4), so it is clamped to 4. It will process the <code>Min</code> parameter first and then the <code>Max</code> parameter.</p> <p> </p>"},{"location":"shards/shards/General/Clear/","title":"Clear","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input is passed through as the output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Clears all elements from the sequence or table passed to it. Applicable only to sequences and tables. For sequences, this operation is very fast as Shards recycles memory extensively. If the variable does not exist or the type is not a sequence or table, it simply passes through without failing.</p>"},{"location":"shards/shards/General/Clear/#examples","title":"Examples","text":"Code <pre><code>[1 2 3] &gt;= seq ; ; create local sequence\nseq | Log ; ; read local sequence  =&gt; [1, 2, 3]\n\nClear(Name: seq) ; ; clear local sequence\nseq | Log ; ; local sequence cleared =&gt; []\n\n100 | AppendTo(seq) ; ; append something to local sequence\nseq | Log ; ; local sequence no more empty =&gt; [100]\n\nClear(Name: seq) ; ; clear\nseq | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Comment/","title":"Comment","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> Passes the input value through. <code>Any</code> <code>Text</code>  No The comment's text. `` <code>String</code> <p>A comment shard that does nothing.</p> <p> </p>"},{"location":"shards/shards/General/Cond/","title":"Cond","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to each predicate and action to execute. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input of the shard if <code>Passthrough</code> is <code>true</code>; otherwise, the output of the action of the first matching condition. <code>Any</code> <code>Wires</code>  No A sequence of shards, interleaving condition test predicate and action to execute if the condition matches. <code>none</code> <code>[Shard [Shard] None]</code> <code>Passthrough</code>  No The output of this shard will be its input. <code>true</code> <code>Bool</code> <code>Threading</code>  No Will not short circuit after the first true test expression. The threaded value gets used in only the action and not the test part of the clause. <code>false</code> <code>Bool</code> <p>Takes a sequence of conditions and predicates. Evaluates each condition one by one and if one matches, executes the associated action.</p>"},{"location":"shards/shards/General/Cond/#examples","title":"Examples","text":"Code <pre><code>[5 10 15 20]\nForEach({\n  Cond([\n    {IsMore(15)} {Msg(\"This number is more than 15\")}\n    {IsMore(10)} {Msg(\"This number is more than 10\")}\n    {IsMore(5)} {Msg(\"This number is more than 5\")}\n    {IsMore(0)} {Msg(\"This number is more than 0\")}])\n})\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Const/","title":"Const","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The declared constant value. <code>Any</code> <code>Value</code>  No The constant value to insert in the wire. <code>none</code> <code>Any</code> <p>Declares an un-named constant value (of any data type).</p>"},{"location":"shards/shards/General/Const/#examples","title":"Examples","text":"Code <pre><code>; ; declare an int with `Const` and consume in `Math.Multiply`\nConst(Value: 2)\nMath.Multiply(4) | Log ; ; =&gt; 8\n\n; ; declare an int without `Const` and consume in `Math.Multiply`\n2 | Math.Multiply(4) | Log ; ; =&gt; 8\n\n; ; declare a string with `Const`\nConst(\"Hello World!\") | Log ; ; =&gt; \"Hello World!\"\n\n; ; declare a sequence with `Const`\nConst([\"A\" \"B\" \"C\"]) | Log ; ; =&gt; [\"A\" \"B\" \"C\"]\n\n; ; declare a Float4 with `Const`\nConst(@f4(1.0 2.0 3.0 4.0)) | Log ; ; =&gt; @f4(1 2 3 4)\n\n; ; nullifying the input to a shard with Const(nil)\n\"Hello World\" ; ; string input for Log\nConst(none) ; ; nulls the string input\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Convolve/","title":"Convolve","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The image to extract patches from. <code>Image</code> <code>Output \u27a1\ufe0f</code> The extracted patch as an image. <code>Image</code> <code>Radius</code>  No The radius of the kernel, e.g. 1 = 1x1; 2 = 3x3; 3 = 5x5 and so on. <code>1</code> <code>Int</code> <code>Step</code>  No How many pixels to advance the centre of the patch extracted each activation. <code>1</code> <code>Int</code> <p>This shard extracts a patch from an image of dimensions specified in the Radius parameter and outputs the extracted patch as an image. Everytime the shard is subsequently called, the centre of the patch to extract is advanced by the number of pixels specified in the Step parameter.</p>"},{"location":"shards/shards/General/Convolve/#details","title":"Details","text":"<p>With each call of the shard, the center of the patch is moved along the x-axis by the number of pixels specified in the <code>Step</code> parameter. When it reaches the end of the image on that row, it wraps around to the beginning of the next row.</p> <p> </p>"},{"location":"shards/shards/General/Cos/","title":"Cos","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the cosine of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the cosine of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the cosine of the given input, where the input is the angle in radians.</p> <p> </p>"},{"location":"shards/shards/General/Count/","title":"Count","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the count of characters, elements, or key-value pairs in the specified variable. If the variable type does not match, it outputs 0. <code>Int</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>This shard counts the sequence, string or table variable specified in the Name parameter. If the variable specified is a string, it will count the number of characters. If the variable specified is a sequence, it will count the number of elements. If the variable specified is a table, it will count the number of key-value pairs.</p>"},{"location":"shards/shards/General/Count/#examples","title":"Examples","text":"Code <pre><code>; ; counting in locally scoped variables\n\"Shards\" &gt;= string\nCount(Name: string) | Log ; ; no. of characters =&gt; 6 \n[10 20 30] &gt;= sequence\nCount(sequence) | Log ; ; no. of elements =&gt; 3        \n{k1: 11 k2: 22} &gt;= table\nCount(table) | Log ; ; no. of key-value pairs =&gt; 2\n12345 &gt;= number\nCount(number) | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Dec/","title":"Dec","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The float or integer (or sequence of floats or integers) to decrease by 1. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input decreased by 1. <code>Any</code> <code>Value</code>  No The value to apply the operation to. <code>none</code> <code>Var(Int)</code><code>Var(Int2)</code><code>Var(Int3)</code><code>Var(Int4)</code><code>Var(Int8)</code><code>Var(Int16)</code><code>Var(Float)</code><code>Var(Float2)</code><code>Var(Float3)</code><code>Var(Float4)</code><code>Var(Color)</code><code>Var([Any])</code> <p>Decreases the input by 1.</p> <p> </p>"},{"location":"shards/shards/General/DecCounter/","title":"DecCounter","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code> <code>Name</code>  No The name of the counter. `` <code>String</code> <code>Amount</code>  No The amount to decrement by (default: 1). <code>1</code> <code>Int</code>"},{"location":"shards/shards/General/DegreesToRadians/","title":"DegreesToRadians","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float value representing an angle in degrees. <code>Float</code> <code>Output \u27a1\ufe0f</code> Outputs a float value representing the input angle in radians. <code>Float</code> <p>This shard converts the input angle from degrees to radians. The conversion is done using the formula: radians = degrees * (\u03c0 / 180).</p> <p> </p>"},{"location":"shards/shards/General/DemultiplyAlpha/","title":"DemultiplyAlpha","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The image to apply the demultiplication of alpha channels to. <code>Image</code> <code>Output \u27a1\ufe0f</code> The image as a result of the application of the demultiplication of alpha channels. <code>Image</code> <p>Applies the demultiplication of alpha channels of an image to its RGB channels. Does nothing if the image has already been demultiplied or never been premultiplied in Shards. This mainly applies to PNG images.</p> <p> </p>"},{"location":"shards/shards/General/Detach/","title":"Detach","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input of this shard will be given as input for the specified Wire <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Wire</code>  No The wire to execute. <code>none</code> <code>Wire</code><code>String</code><code>None</code> <code>Restart</code>  No If true, the specified wire will restart whenever the shard is called, even if it is already running. <code>false</code> <code>Bool</code> <p>Schedules and executes the specified Wire asynchronously. The current Wire will continue its execution independently of the specified Wire. Unlike Spawn, only one unique copy of the specified Wire can be scheduled using Detach. Future calls of Detach that schedules the same Wire will be ignored unless the specified Wire is Stopped or ends naturally.</p>"},{"location":"shards/shards/General/Detach/#details","title":"Details","text":"<p>The child wire scheduled makes copies of the context variables of the parent wire. Any changes to said variables will not be reflected on the parent wire.</p> <p>Child wire is scheduled asynchronously and executes independently of the parent wire. Any pauses on the child wire will not pause the parent wire.</p> <p>Child wire is scheduled on the same mesh as the parent wire.</p> <p>And only schedule one unique copy of a wire at a time. Meaning, if there is another call for <code>Detach</code> to detach the exact same wire, it will be ignored if the said wire is still running.</p>"},{"location":"shards/shards/General/Detach/#examples","title":"Examples","text":"Code <pre><code>@wire(hello {\n  Pause(2.0)\n  Msg(\"Hello\")\n})\n\n@wire(hello-2 {\n  Pause(2.0)\n  Msg(\"Hello-2\")\n})\n\n@wire(main-wire {\n  Msg(\"Start\")\n  Detach(hello) ; ;hello is run in parallel. Start End and then Hello will be logged\n  Msg(\"End\")\n\n  ; Msg(\"Start\")\n  ; Do(hello-2) ;;hello-2 is run in inline. Start will be logged, then 2s will pass, and Hello and then End will be logged\n  ; Msg(\"End\")\n})\n\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Div/","title":"Div","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value or the sequence of values to divide the value specified in the Operand parameter with. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> This shard outputs the result of the division. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The value or sequence of values to divide the input by. <code>0</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard divides the input value by the value provided in the Operand parameter.</p> <p> </p>"},{"location":"shards/shards/General/Do/","title":"Do","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input of this shard will be given as input for the specified Wire <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be the output of the Wire that is executed. <code>Any</code> <code>Wire</code>  No The Wire to execute inline. <code>none</code> <code>Wire</code><code>String</code><code>None</code> <p>Schedules and executes the specified Wire inline of the current Wire. The specified Wire needs to complete its execution before the current Wire continues its execution. This means that a pause in execution of the child Wire will also pause the parent Wire.</p>"},{"location":"shards/shards/General/Do/#details","title":"Details","text":"<p>The child wire scheduled inherits and uses the context variables of the parent wire. Any changes to said variables will also be reflected on the parent wire.</p> <p>Child wire is scheduled and executes inline. Any pauses on the child wire will also pause the parent wire.</p> <p>Child wire is scheduled on the same mesh as the parent wire.</p>"},{"location":"shards/shards/General/Do/#examples","title":"Examples","text":"Code <pre><code>@wire(hello {\n  Pause(2.0)\n  Msg(\"Hello\")\n})\n\n@wire(main-wire {\n  Msg(\"Start\")\n  Do(hello) ; ;hello is run inline. Start is logged, then 2s passes, and then Hello followed by End is logged.\n  Msg(\"End\")\n})\n\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/DoMany/","title":"DoMany","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard takes a sequence of values as input. Each value from the sequence is provided as input to its corresponding copy of the scheduled Wire. The total number of copies of the specified Wire scheduled, will be the same as the number of elements in the sequence provided. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> This shard outputs the output of all the scheduled copies in a sequence. <code>[Any]</code> <code>Wire</code>  No The wire to run many times sequentially. <code>none</code> <code>None</code><code>Wire</code><code>[Shard]</code> <code>ComposeSync</code>  No Compose new wires synchronously. <code>false</code> <code>Bool</code> <p>This shard takes a sequence of values as input, schedules multiple copies of a specified Wire and executes them sequentially. Each value from the sequence is provided as input to its corresponding copy of the specified Wire. The shard then outputs a sequence of values containing the output of all copies of the specified Wire.</p>"},{"location":"shards/shards/General/DoMany/#details","title":"Details","text":"<p>All child wires scheduled inherits and uses the context variables of the parent wire. Any changes to said variables will also be reflected on the parent wire and subsequent child wires scheduled.</p> <p>Child wires are scheduled and executes inline. The parent wire will execute all child wires sequentially, it will only continue its execution once all child wires have finished.</p> <p>Child wires are scheduled on the same mesh as the parent wire.</p> <p> </p>"},{"location":"shards/shards/General/Drop/","title":"Drop","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input is passed through as the output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Drops the last element of the sequence variable. Works only on sequences. If the variable is not a sequence, it simply passes through without failing.</p>"},{"location":"shards/shards/General/Drop/#examples","title":"Examples","text":"Code <pre><code>; ; drop last element from a local sequence\n[10 20 30 40] &gt;= seq ; ; create a local sequence\nGet(seq) | Log ; ; local sequence =&gt; [10, 20, 30, 40]\nDrop(Name: seq) ; ; drops the last element i.e., 40\nGet(seq) | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/DropFront/","title":"DropFront","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input is passed through as the output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Drops the first element of the sequence variable. Works only on sequences. If the variable is not a sequence, it simply passes through without failing.</p>"},{"location":"shards/shards/General/DropFront/#examples","title":"Examples","text":"Code <pre><code>; ; drop first element from a local sequence\n[10 20 30 40] &gt;= seq ; ; create a local sequence\nGet(seq) | Log ; ; local sequence =&gt; [10, 20, 30, 40]\nDropFront(Name: seq) ; ; drops the first element i.e., 10\nGet(seq) | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Env/","title":"Env","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <p>Get environment variables.</p> <p> </p>"},{"location":"shards/shards/General/Erase/","title":"Erase","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>Indices</code>  No One or multiple indices to filter from a sequence. <code>none</code> <code>Any</code><code>Var(Any)</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to erase from the table (nested table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is or should be available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Deletes an index or indices from a sequence or a key or keys from a table.</p>"},{"location":"shards/shards/General/Erase/#examples","title":"Examples","text":"Code <pre><code>; ; erase single element from sequence\n[100 200 300 400] &gt;= seq1\nErase([1] Name: seq1)\nLog(\"output\") ; ; =&gt; output: [100 200 300 400]      \nseq1 | Log(\"seq1\") ; ; =&gt; seq1: [100, 300, 400]\n\n; ; erase multiple elements from sequence\n[100 200 300 400] &gt;= seq2\nErase([2 0] Name: seq2)\nseq2 | Log ; ; =&gt; [200, 400]\n\n; ; erase single key-value pair from table        \n{k1: 10 k2: 20 k3: 30} &gt;= tab1\nErase(\"k2\" Name: tab1)\ntab1 | Log ; ; =&gt; {k3: 30, k1: 10}\n\n; ; erase multiple key-value pairs from table\n{k1: 100 k2: 200 k3: 300} &gt;= tab2\nErase([\"k3\" \"k1\"] tab2)\ntab2 | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Expand/","title":"Expand","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard takes a value of any type as input. This value is provided as input to every scheduled copy of the specified Wire. <code>Any</code> <code>Output \u27a1\ufe0f</code> Depending on the Policy specified the shard will return a different output. WaitUntil::FirstSuccess will return the output of the first successful Wire. WaitUntil::SomeSuccess return a sequence with all the output from all the copies of the specified Wire. WaitUntil::FirstSuccess will either stop execution of the current Wire if any of the copies fail or return a sequence with all the output from all the copies of the specified Wire. <code>[Any]</code> <code>Size</code>  No The number of copies of the specified Wire to schedule. <code>10</code> <code>Int</code> <code>Wire</code>  No The Wire to copy and schedule. <code>none</code> <code>None</code><code>Wire</code><code>[Shard]</code> <code>Policy</code>  No The execution policy for the shard to abide by. A copied Wire is only deemed successful if it did not have an internal failure (eg.through Assert) <code>WaitUntil::AllSuccess</code> <code>WaitUntil</code> <code>Threads</code>  No The number of cpu threads to use. Number specified can not be lower than 1. <code>1</code> <code>Int</code> <p>Schedules (n) number of copies of the specified Wire, where (n) is the number specified in the Size parameter. The parent Wire will wait until all the scheduled copies have ended and will either return a sequence of values outputs of all the copied Wires or the output of the first Wire that succeeds. Once done, it will continue with its own execution.</p>"},{"location":"shards/shards/General/Expand/#details","title":"Details","text":"<p>All child wires scheduled makes copies of the parent wire's context variables. Any changes to said variables will not be reflected on the parent wire or other sibling wires scheduled using this shard.</p> <p>Child wires are scheduled and executes inline. However, all child wires scheduled using this shard will execute in paralell. This shard however, will wait for all child wires to finish executing before it will continue its execution. Therefore any pauses on any child wire will also pause the parent wire.</p> <p>Child wires are scheduled on the same mesh as the parent wire.</p>"},{"location":"shards/shards/General/Expand/#examples","title":"Examples","text":"Code <pre><code>@wire(expand-test {\n  Math.Multiply(2)\n})\n\n@wire(main-wire {\n  21\n  Expand(\n    Size: 10\n    Wire: expand-test\n    Threads: 5\n  )\n  Log ; ; Logs: [42 42 42 42 42 42 42 42 42 42]\n})\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Expect/","title":"Expect","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value unchanged if it matches the expected type. <code>Any</code> <code>Type</code>  No The type to expect <code>none</code> <code>Type</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value matches the expected type specified by the 'Type' parameter. The shard outputs the input value unchanged if it is of the appropriate type, the shard will trigger an error, preventing further execution. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectAudio/","title":"ExpectAudio","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Audio. <code>Audio</code> <p>Checks the input value if it is an Audio file. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectAudioSeq/","title":"ExpectAudioSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Audio data. <code>[Audio]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Audio files. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectBool/","title":"ExpectBool","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Bool. <code>Bool</code> <p>Checks the input value if it is a Boolean. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectBoolSeq/","title":"ExpectBoolSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Booleans. <code>[Bool]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Bools. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectBytes/","title":"ExpectBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Bytes. <code>Bytes</code> <p>Checks the input value if it is of type Bytes. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectBytesSeq/","title":"ExpectBytesSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Bytes. <code>[Bytes]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Bytes. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectColor/","title":"ExpectColor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Color. <code>Color</code> <p>Checks the input value if it is vector of four color channels (RGBA). The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectColorSeq/","title":"ExpectColorSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Color vectors. <code>[Color]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Color vectors. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloat/","title":"ExpectFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Float. <code>Float</code> <p>Checks the input value if it is of type Float. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, it will fail.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloat2/","title":"ExpectFloat2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Float2. <code>Float2</code> <p>Checks the input value if it is a vector with two Float elements. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloat2Seq/","title":"ExpectFloat2Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Float2 vectors. <code>[Float2]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Float2 vectors. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloat3/","title":"ExpectFloat3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Float3. <code>Float3</code> <p>Checks the input value if it is a vector with three Float elements. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloat3Seq/","title":"ExpectFloat3Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Float3 vectors. <code>[Float3]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Float3 vectors. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloat4/","title":"ExpectFloat4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Float4. <code>Float4</code> <p>Checks the input value if it is a vector with float Float elements. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloat4Seq/","title":"ExpectFloat4Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Floats4 vectors. <code>[Float4]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Float4 vectors. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectFloatSeq/","title":"ExpectFloatSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Floats. <code>[Float]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Floats. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectImage/","title":"ExpectImage","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Image. <code>Image</code> <p>Checks the input value if it is an Image file. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectImageSeq/","title":"ExpectImageSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Images. <code>[Image]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Images files. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt/","title":"ExpectInt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Int. <code>Int</code> <p>Checks the input value if it is of type Int. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt16/","title":"ExpectInt16","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Int16 <code>Int16</code> <p>Checks the input value if it is a vector with sixteen Int elements. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt16Seq/","title":"ExpectInt16Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Int16 vectors. <code>[Int16]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Int16 vectors. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt2/","title":"ExpectInt2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Int2. <code>Int2</code> <p>Checks the input value if it is a vector with two Int elements. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt2Seq/","title":"ExpectInt2Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Int2 vectors. <code>[Int2]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Int2 vectors. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt3/","title":"ExpectInt3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Int3. <code>Int3</code> <p>Checks the input value if it is a vector with three Int elements. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt3Seq/","title":"ExpectInt3Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Int3 vectors. <code>[Int3]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Int3 vectors. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt4/","title":"ExpectInt4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Int4. <code>Int4</code> <p>Checks the input value if it is a vector with four Int elements. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt4Seq/","title":"ExpectInt4Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Int4 vectors. <code>[Int4]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Int4 vectors. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt8/","title":"ExpectInt8","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Int8. <code>Int8</code> <p>Checks the input value if it is a vector with eight Int elements. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectInt8Seq/","title":"ExpectInt8Seq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Int8 vectors. <code>[Int8]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Int8 vectors. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectIntSeq/","title":"ExpectIntSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Ints. <code>[Int]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Ints. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectLike/","title":"ExpectLike","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it matches the expected type. <code>Any</code> <code>TypeOf</code>  No The type of the constant given here will be checked against this shard's input. <code>none</code> <code>Any</code> <code>OutputOf</code>  No Evaluates the output type of the given expression. That type of the output will be checked against this shard's input. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value matches the type of the value provided in the TypeOf parameter or the output type of the given expression in the OutputOf parameter. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution. Note that it can only compare with either one of the parameters, not both; an error will be thrown if both are provided. The 'Unsafe' parameter can be set to skip deep type hashing and comparison to improve performance.</p> <p> </p>"},{"location":"shards/shards/General/ExpectNone/","title":"ExpectNone","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type None. <code>None</code> <p>Checks the input value if it is none. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectSeq/","title":"ExpectSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence. <code>[Any]</code> <p>Checks if the input value is a sequence; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectString/","title":"ExpectString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type String. <code>String</code> <p>Checks the input value if it is a String. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectStringSeq/","title":"ExpectStringSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Strings. <code>[String]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Strings. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectTable/","title":"ExpectTable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Table. <code>{}</code> <p>Checks the input value if it is a Table. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectWire/","title":"ExpectWire","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is of type Wire. <code>Wire</code> <p>Checks the input value if it is a Wire. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/ExpectWireSeq/","title":"ExpectWireSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard accepts a sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value unchanged if it is a sequence of Wires. <code>[Wire]</code> <code>Unsafe</code>  No When set to true, it will skip type comparison. Generally unsafe but it can improve performance. Only set to true if you are certain that the input type matches the expected type. <code>false</code> <code>Bool</code> <p>Checks if the input value is a sequence of Wires. The shard outputs the input value unchanged if it is of the appropriate type; otherwise, the shard will trigger an error, preventing further execution.</p> <p> </p>"},{"location":"shards/shards/General/Extend/","title":"Extend","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The sequence to be appended to the target sequence. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The input sequence (pass-through). <code>[Any]</code> <code>Target</code>  No The mutable sequence to extend. <code>none</code> <code>Var([Any])</code> <p>Extends the mutable sequence parameter with the elements of the input sequence.</p> <p> </p>"},{"location":"shards/shards/General/Fail/","title":"Fail","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The error message to cancel the flow with. <code>String</code> <code>Output \u27a1\ufe0f</code> This shard does not produce an output as it cancels the flow. <code>None</code> <p>Stops the current flow and cancels the execution with the provided error message. This shard is used to signal an error and halt the execution of the current wire.</p> <p> </p>"},{"location":"shards/shards/General/FastSqrt/","title":"FastSqrt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the square root of. This value must be a positive number or sequence of positive numbers. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the square root of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the square root of the given input.</p> <p> </p>"},{"location":"shards/shards/General/FillAlpha/","title":"FillAlpha","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The 3 channel image to convert. <code>Image</code> <code>Output \u27a1\ufe0f</code> The converted 4 channel image with the alpha channel filled. <code>Image</code> <p>This shard takes an image with 3-channels(RGB) and converts it to a 4-channel(RGBA) image with the alpha channel set to 255.</p>"},{"location":"shards/shards/General/FillAlpha/#details","title":"Details","text":"<p>If the input image already has 4 channels, the shard will return the image unchanged.</p> <p> </p>"},{"location":"shards/shards/General/First/","title":"First","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A table or sequence to get the first element from. <code>[Any]</code><code>{Any}</code> <code>Output \u27a1\ufe0f</code> For sequences: the first value. For tables: a [key, value] pair. Returns None if input is empty. <code>Any</code> <p>Returns the first element from a sorted table or sequence. For tables, returns a [key, value] pair. Returns None if empty. Note: This operation is fast but unsafe unless the output is cloned (using Set instead of Ref) when combined with await or suspended wire flow.</p> <p> </p>"},{"location":"shards/shards/General/Flatten/","title":"Flatten","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard will take a sequence or a table with nested values. <code>Any</code> <code>Output \u27a1\ufe0f</code> This shard will return a single sequence with all of values, nested values and keys of the input as elements. <code>Any</code> <p>This shard will take a sequence with nested values (eg. a sequence of sequences or a sequence of tables) and create a single sequence with all of values, nested values and keys as elements.</p>"},{"location":"shards/shards/General/Flatten/#details","title":"Details","text":"<p>Note that this shard works on any level of nesting. If the input sequence contains tables that also contains sequences for example, the shard will still place of the keys and values into a single sequence.</p> <p>This shard also works on vectors (eg. @f2 @f3 @f4 @i2 @i3 @i4)</p> <p>If a single table is provided as input, the shard will return a sequence with its keys and values as elements.</p> <p>If a sequence with no nested values is provided, the shard will return the same sequence unchanged.</p> <p>If a non-sequence is provided as input, the shard will return a sequence containing the input as the sole element.</p> <p> </p>"},{"location":"shards/shards/General/FloatsToImage/","title":"FloatsToImage","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a sequence of floats as input and converts it into an image. The sequence length must be equal to Width x Height x Channels. <code>[Float]</code> <code>Output \u27a1\ufe0f</code> This shard outputs and image. <code>Image</code> <code>Width</code>  No The width of the output image. <code>16</code> <code>Int</code> <code>Height</code>  No The height of the output image. <code>16</code> <code>Int</code> <code>Channels</code>  No The channels of the output image. <code>1</code> <code>Int</code> <p>Converts a sequence of floats into an image. The image dimensions (width and height) and the number of channels are specified by the appropriate parameters.</p> <p> </p>"},{"location":"shards/shards/General/Floor/","title":"Floor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to round down. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the input rounded down to the nearest integer (as a float). <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard rounds down the input to the nearest integer.</p> <p> </p>"},{"location":"shards/shards/General/FlushLog/","title":"FlushLog","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input value will pass through unchanged. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <p>This shard flushes the log buffer to the console. This ensures that any pending log messages are immediately written to the console.</p> <p> </p>"},{"location":"shards/shards/General/ForEach/","title":"ForEach","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Sequence/table whose elements or key-value pairs need to be processed. <code>[Any]</code><code>{Any}</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>[Any]</code><code>{Any}</code> <code>Apply</code>  No The processing logic (in the form of a shard or sequence of shards) to apply to the input sequence/table. <code>none</code> <code>Shard</code><code>[Shard]</code> <p>Processes every element or key-value pair of a sequence/table with the shards specified in the <code>Apply</code> parameter. Note that this shard is able to use the $0 and $1 internal variables, as well as $i for the current index.</p>"},{"location":"shards/shards/General/ForEach/#details","title":"Details","text":"<p>This shard is able to use the internal variable <code>$0</code> and <code>$1</code> within its <code>Apply</code> parameter.</p> <p>If a sequence was provided as input, the variable <code>$0</code> will take the value of the current element of the sequence it is iterating over. ($1 does not exist when iterating over a sequence) For example: <pre><code>[1 2 3]\nForEach(\n  Apply: {\n    $0 | Math.Add(1)\n  }\n)\n</code></pre> <code>$0</code> will take the value of 1 and then 2 and then 3 accordingly.</p> <p>When iterating over a sequence with elements of different types, <code>$0</code> will adopt the type of the current element it is iterating over, convert its type as necessary.</p> <p>If a table was provided as input, the variable <code>$0</code> will be the current key of the table it is iterating over while <code>$1</code> will take the value associated with the key. For example: <pre><code>{\n  a: 1\n  b: 2\n  c: 3\n}\nForEach(\n  Apply: {\n    $0 | LogType(\"Type\") | Log(\"key\")\n    $1 | ExpectInt | Math.Add(1)\n  }\n)\n</code></pre> <code>$0</code> will take the value of \"a\" and then \"b\" and then \"c\" while <code>$1</code> will take the value of 1 and then 2 and then 3 accordingly.</p> <p>When iterating over a table, the 'Apply' parameter receives a sequence of two elements as input, where the first element is the key and the second is the value. $0 and $1 are set to these values respectively.</p> <p><code>$0</code> will always be of type <code>String</code> while <code>$1</code>, when iterating over the table will always be of type <code>Any</code>. Convert <code>$1</code> to the appropriate type as necessary (e.g. using <code>ExpectInt</code>).</p> <p>Do note that this instance of <code>$0</code> and <code>$1</code> are unique to the <code>ForEach</code> shard and do not exist outside of the context of its <code>Apply</code> parameter. Values set to this instance of <code>$0</code> and <code>$1</code> will not be reflected on other <code>$0</code> and <code>$1</code> created in a different call of another <code>ForEach</code> shard or any other shard that is also able to use <code>$0</code> and <code>$1</code>.</p> <p><code>ForEach</code> returns the input unchanged unlike Map which returns the modified sequence or table.</p>"},{"location":"shards/shards/General/ForEach/#examples","title":"Examples","text":"Code <pre><code>{value1: 10 value2: 20 value3: 30} ;;Takes each key-value pair as a sequence\nForEach({\n  Log\n  Take(1)\n  ToInt\n  Math.Multiply(10)\n  Log\n})\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>;; ForEach on a sequence: processes every element in seq order\n[2 4 8 10]\nForEach(\n  Math.Multiply(10)\n  Log\n  Math.Multiply(100)\n  Log\n)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/ForRange/","title":"ForRange","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input value is not used and will pass through unchanged. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>From</code>  No The initial iteration value (inclusive). <code>0</code> <code>Int</code><code>Var(Int)</code> <code>To</code>  No The final iteration value (inclusive). <code>1</code> <code>Int</code><code>Var(Int)</code> <code>Action</code>  No The action to perform at each iteration. The current iteration value will be passed as input. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Executes a series of shards while an iteration value is within a specified range.</p>"},{"location":"shards/shards/General/ForRange/#examples","title":"Examples","text":"Code <pre><code>;; Sum all positive integers below 1000\n0 &gt;= sum\n\nForRange(\n  From: 1\n  To: 999\n  Action: {\n    Math.Add(sum) &gt; sum ; ; 1 then 2 then 3 then .... 999 is passsed as input\n    Log\n  }\n)\n\nsum | Assert.Is(499500 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/FreeCamera/","title":"FreeCamera","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Float4](4)</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4](4)</code> <code>FlySpeed</code>  No Controls fly speed with the keyboard <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>ScrollSpeed</code>  No Controls middle mouse movement speed <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>PanSpeed</code>  No Controls middle mouse pan speed <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>LookSpeed</code>  No Controls right mouse look speed <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <p>Provides editor free camera controls</p> <p> </p>"},{"location":"shards/shards/General/FromBase58/","title":"FromBase58","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The base58 encoded string to decode. <code>String</code> <code>Output \u27a1\ufe0f</code> Outputs the decoded byte array. <code>Bytes</code> <p>This shard decodes the base58 encoded string and outputs it as a decoded byte array.</p> <p> </p>"},{"location":"shards/shards/General/FromBase64/","title":"FromBase64","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A Base64 encoded string to be decoded. <code>String</code> <code>Output \u27a1\ufe0f</code> The decoded bytes from the input Base64 string. <code>Bytes</code> <p>Decodes a Base64 encoded string to its original byte representation.</p> <p> </p>"},{"location":"shards/shards/General/FromBytes/","title":"FromBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard will take a byte array. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> This shard will return the original value converted back to its original type. <code>Any</code> <p>This shard takes a serialized binary representation of a value and convert it back to its original type.</p>"},{"location":"shards/shards/General/FromBytes/#details","title":"Details","text":"<p>Do note that this shard can only convert serialized byte sequences to its original value. This means that it can only convert values that were previously converted to a byte sequence using the <code>ToBytes</code> shard and not other shards like <code>ToLEB128</code> or <code>IntsToBytes</code>.</p> <p> </p>"},{"location":"shards/shards/General/FromJson/","title":"FromJson","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A JSON string to be parsed. <code>String</code> <code>Output \u27a1\ufe0f</code> Outputs the contents of the input JSON string as the appropriate type. <code>Any</code> <code>Pure</code>  No If the input string is generic pure json rather then shards flavored json. <code>true</code> <code>Bool</code> <p>This shard parses a JSON string and outputs its contents as the appropriate type.</p>"},{"location":"shards/shards/General/FromJson/#details","title":"Details","text":"<p>If the input JSON string is a Shards-specific JSON string and not a standard JSON string, if the <code>Pure</code> parameter is set to true, the shard will lose the original type information and always return a table.</p> <p> </p>"},{"location":"shards/shards/General/FromLEB128/","title":"FromLEB128","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The LEB128 encoded byte array to decode. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> Outputs the decoded integer. <code>Int</code> <code>Signed</code>  No If the integer to encode/decode is signed and can be negative. <code>false</code> <code>Bool</code> <p>This shard decodes the LEB128 encoded byte array and outputs it as an integer (signed or unsigned depending on what was specified in the Signed parameter).</p> <p> </p>"},{"location":"shards/shards/General/Get/","title":"Get","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The output is the value read from the specified variable. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <code>Default</code>  No The default value used if the variable is not set, the key is not present, or there is a type mismatch. <code>none</code> <code>Any</code> <p>Reads the value of the specified variable.</p>"},{"location":"shards/shards/General/Get/#examples","title":"Examples","text":"Code <pre><code>; ; create a mutable string variable and get its value\n\"Hello\" | Set(Name: svar) ; ; set value\nGet(Name: svar) = gotSvar ; ; get value and store it\ngotSvar | Log(\"gotten value\") ; ; =&gt; gotten value: Hello\n\n; ; create an immutable numeric variable and get its value\n100 | Ref(Name: nvar) ; ; set value\nGet(Name: nvar) &gt;= gotNvar ; ; modify numeric variable\ngotNvar | Log(\"gotten value\") ; ; =&gt; gotten value: 100\n\n; ; create a mutable sequence and get it\n[10 20 30] | Set(Name: sequence)\nGet(sequence) | Log ; ; =&gt; [10, 20, 30]\n\n; ; create an empty sequence and try reading it with the Default: failsafe\n[] | Set(Name: seqEmpty)\nGet(Name: seqEmpty Default: \"Void\") | Log ; ; =&gt; Void\n\n; ; create a table and get one of it's key-values pairs\n[\"a\" \"b\"] | Set(Name: table Key: \"key1\")\nGet(Name: table Key: \"key1\") | Log ; ; =&gt; [a, b]\n\n; ; create a table and try to get a non-existent key-value using the Default: parameter\n[\"a\" \"b\"] | Set(Name: table Key: \"key1\")\nGet(Name: table Key: \"key2\" Default: \"Key missing\") | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/GetCounter/","title":"GetCounter","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code> <code>Name</code>  No The name of the counter. `` <code>String</code>"},{"location":"shards/shards/General/GetFlag/","title":"GetFlag","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Name</code>  No The name of the flag. `` <code>String</code>"},{"location":"shards/shards/General/GetImagePixel/","title":"GetImagePixel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The position of the pixel to obtain the colour value of, represented as an int2 vector. The first element of the vector represents the x coordinate, and the second element represents the y coordinate. <code>Int2</code> <code>Output \u27a1\ufe0f</code> The colour(RGBA) values of the pixel at the specified position as a int4 or float4 vector. The first element of the vector represents the red value, the second element represents the green value, the third element represents the blue value, and the fourth element represents the alpha value. <code>Int4</code><code>Float4</code> <code>Position</code>  No The position of the pixel to retrieve <code>none</code> <code>Image</code><code>Var(Image)</code> <code>AsInteger</code>  No Read the pixel as an integer <code>false</code> <code>Bool</code> <code>Default</code>  No When specified, out of bounds or otherwise failed reads will outputs this value instead of failing <code>none</code> <code>None</code><code>Float4</code><code>Int4</code> <p>This shard analyzes the image(specified in the Image parameter) and outputs the colour value(RGBA) of the pixel at the specified position.</p> <p> </p>"},{"location":"shards/shards/General/Hash/","title":"Hash","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> This shard outputs the input's hashed value as an int2 (a sequence with 2 integers as elements) with 64-bit integer elements. <code>Int2</code> <p>This shard takes any input type, hashes them using the XXH128 hashing algorithm and outputs their 128-bit hash value as an int2 (a sequence with 2 integers as elements).</p> <p> </p>"},{"location":"shards/shards/General/HexToBytes/","title":"HexToBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts a hexadecimal string as input. The input may optionally start with '0x' or '0X'. <code>String</code> <code>Output \u27a1\ufe0f</code> The decoded byte array from the input hexadecimal string. <code>Bytes</code> <p>Converts a hexadecimal string to its original byte array representation.</p> <p> </p>"},{"location":"shards/shards/General/Highest/","title":"Highest","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of elements of any type. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the element with the highest value. <code>Any</code> <p>Takes a sequence and outputs the element with the highest value.</p>"},{"location":"shards/shards/General/Highest/#details","title":"Details","text":"<p>If the input sequence has elements that traditionally hold no value (eg. a sequence of strings), these elements will be given a lexicographical value for comparison.</p> <p>If the input is a sequence with nested values or a table, the shard will also use lexicographical comparison to find the highest value.</p> <p>The input sequence can be of any type, but cannot be a sequence with elements of different types or be an empty sequence.</p> <p> </p>"},{"location":"shards/shards/General/If/","title":"If","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the predicate. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input of the shard if <code>Passthrough</code> is <code>true</code>; otherwise, the output of the action that was performed (i.e. <code>Then</code> or <code>Else</code>). <code>Any</code> <code>Predicate</code>  No The predicate to evaluate in order to trigger <code>Then</code> (when <code>true</code>) or <code>Else</code> (when <code>false</code>). <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Then</code>  No The shards to activate when <code>Predicate</code> is <code>true</code>. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Else</code>  No The shards to activate when <code>Predicate</code> is <code>false</code>. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Passthrough</code>  No The output of this shard will be its input. <code>false</code> <code>Bool</code> <p>Evaluates a predicate and executes an action.</p>"},{"location":"shards/shards/General/If/#examples","title":"Examples","text":"Code <pre><code>5\nIf(\n  Predicate: IsLess(2) Then: {\n    Msg(\"input is lesser than 2\")\n  } Else:\n  Msg(\"input is equal or greater than 2\")\n)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/ImageSize/","title":"ImageSize","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The image to get the dimensions of. <code>Image</code> <code>Output \u27a1\ufe0f</code> The dimensions of the image as an Int2 vector, where the first element is the width and the second element is the height. <code>Int2</code> <p>This shard takes an image and outputs its dimensions (width and height) as an Int2 vector.</p> <p> </p>"},{"location":"shards/shards/General/ImageToBytes/","title":"ImageToBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts an image as input. <code>Image</code> <code>Output \u27a1\ufe0f</code> The input image represented as a byte array. <code>Bytes</code> <p>Converts an image into a byte array.</p> <p> </p>"},{"location":"shards/shards/General/ImageToFloats/","title":"ImageToFloats","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes an image as input. <code>Image</code> <code>Output \u27a1\ufe0f</code> Outputs the input image represented as a seqeunce of floats. <code>[Float]</code> <p>Convert an image into a sequence of floats. Each pixel in the image is converted to a float value between 0 and 1 and stored in the sequence.</p> <p> </p>"},{"location":"shards/shards/General/Inc/","title":"Inc","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The float or integer (or sequence of floats or integers) to increase by 1. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input increased by 1. <code>Any</code> <code>Value</code>  No The value to apply the operation to. <code>none</code> <code>Var(Int)</code><code>Var(Int2)</code><code>Var(Int3)</code><code>Var(Int4)</code><code>Var(Int8)</code><code>Var(Int16)</code><code>Var(Float)</code><code>Var(Float2)</code><code>Var(Float3)</code><code>Var(Float4)</code><code>Var(Color)</code><code>Var([Any])</code> <p>Increases the input by 1.</p> <p> </p>"},{"location":"shards/shards/General/IncCounter/","title":"IncCounter","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code> <code>Name</code>  No The name of the counter. `` <code>String</code> <code>Amount</code>  No The amount to increment by (default: 1). <code>1</code> <code>Int</code>"},{"location":"shards/shards/General/IndexOf/","title":"IndexOf","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The sequence to search through. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The index of the item or a sequence of indices. <code>[Int]</code><code>Int</code> <code>Item</code>  No The item to find the index of from the input, if it's a sequence it will try to match all the items in the sequence, in sequence. <code>none</code> <code>Any</code> <code>All</code>  No If true will return a sequence with all the indices of Item, empty sequence if not found. <code>false</code> <code>Bool</code> <code>Predicate</code>  No Optional shards to use for more complex matching. <code>none</code> <code>Shard</code><code>[Shard]</code> <p>This shard will search the input sequence for the index of an item or a pattern of items (specified in the Item parameter) and return its index(or a sequence of indices).</p>"},{"location":"shards/shards/General/IndexOf/#details","title":"Details","text":"<p>The Item parameter can either accept a single value or a sequence of values.</p> <p>If a single value is specified, the shard will return the index of the first occurrence of the value in the input sequence (If All is false) or a sequence of indices of all occurrences of the value in the input sequence (If All is true).</p> <p>If a sequence of values is specified, it will compare the input sequence and check for occurrences of the specific pattern specified in the Item parameter. If All is set to true, it will return a sequence of indices of all occurrences of the pattern in the input sequence. If All is set to false, it will return the index of the first occurrence of the pattern in the input sequence.</p> <p>Consider the following example:</p> <pre><code>[1 2 3 4 1 2 3 4 1 2 3 4]\nIndexOf(Item: [1 2] All: true)\n</code></pre> <p>This will return <code>[0 4 8]</code> as the first occurrence of the pattern <code>[1 2]</code> is at index <code>0</code>, the next occurrence is at index <code>4</code> and the last occurrence is at index <code>8</code>. If all was set to false, it would return <code>0</code>.</p> <p> </p>"},{"location":"shards/shards/General/Input/","title":"Input","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. <code>None</code> <code>Output \u27a1\ufe0f</code> The input value of the wire. <code>Any</code> <p>The input value of the wire.</p> <p> </p>"},{"location":"shards/shards/General/Insert/","title":"Insert","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to prepend to the collection. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>Index</code>  No The collection to add the input to. <code>none</code> <code>Int</code><code>Var(Int)</code> <code>Collection</code>  No The collection to add the input to. <code>none</code> <code>Var([Any])</code><code>Var(String)</code><code>Var(Bytes)</code> <p>Prepends the input to the context variable passed to <code>Collection</code>.</p> <p> </p>"},{"location":"shards/shards/General/IntsToBytes/","title":"IntsToBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts sequence of integers as input. <code>[Int]</code> <code>Output \u27a1\ufe0f</code> A byte array representing the sequence of integers. <code>Bytes</code> <p>Converts a sequence of integers into a byte array. Each integer in the sequence is serialized into its binary representation and concatenated into the resulting byte array.</p> <p> </p>"},{"location":"shards/shards/General/Is/","title":"Is","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input is equal to the operand and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. <code>0</code> <code>Any</code> <p>Checks if the input is equal to the operand.</p>"},{"location":"shards/shards/General/Is/#examples","title":"Examples","text":"Code <pre><code>; ; string comparison\n\"hello\" | String.ToUpper | Is(\"HELLO\")\nLog(\"String is identical\")\nAssert.Is(true Break: true)\n\n; ; integer comparison\n2 | Math.Add(3) | Is(5)\nLog(\"Int is identical\")\nAssert.Is(true Break: true)\n\n; ; float comparison\n4.0 | Is((3.0 | Math.Add(1.0)))\nLog(\"Float is identical\")\nAssert.Is(true Break: true)\n\n; ; sequence comparison\n[1 2 3] | Is([1 2 3])\nLog(\"Sequence is identical\")\nAssert.Is(true Break: true)\n\n; ; table comparison 1\n{key1: [10 20] key2: [30]} | Is({key1: [10 20] key2: [30]})\nLog(\"Table is  identical\")\nAssert.Is(true Break: true)\n\n; ; table comparison 2\n{key2: [30] key1: [10 20]} | Is({key1: [10 20] key2: [30]})\nLog(\"Table is identical\")\nAssert.Is(true Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/IsAll/","title":"IsAll","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. For types without inherent value (e.g., None, Bool), a lexicographical comparison is used. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if all elements in the input are equal to the specified value and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. Note: This shard will not evaluate variables nested within sequences and tables. If you need to compare them against such variables, wrap them in parentheses, so that they are evaluated first. Example: Value:([your-variable]) instead of Value:your-variable. <code>0</code> <code>Any</code> <p>Checks if all elements in the input are equal to the given value. It outputs true if all elements are equal and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsAllLess/","title":"IsAllLess","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. For types without inherent value (e.g., None, Bool), a lexicographical comparison is used. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if all elements in the input are less than the specified value and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. Note: This shard will not evaluate variables nested within sequences and tables. If you need to compare them against such variables, wrap them in parentheses, so that they are evaluated first. Example: Value:([your-variable]) instead of Value:your-variable. <code>0</code> <code>Any</code> <p>Checks if all elements in the input are less than the given value. It outputs true if all elements are less and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsAllLessEqual/","title":"IsAllLessEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. For types without inherent value (e.g., None, Bool), a lexicographical comparison is used. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if all elements in the input are less than or equal to the specified value and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. Note: This shard will not evaluate variables nested within sequences and tables. If you need to compare them against such variables, wrap them in parentheses, so that they are evaluated first. Example: Value:([your-variable]) instead of Value:your-variable. <code>0</code> <code>Any</code> <p>Checks if all elements in the input are less than or equal to the given value. It outputs true if all elements are less or equal and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsAllMore/","title":"IsAllMore","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. For types without inherent value (e.g., None, Bool), a lexicographical comparison is used. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if all elements in the input are greater than the specified value and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. Note: This shard will not evaluate variables nested within sequences and tables. If you need to compare them against such variables, wrap them in parentheses, so that they are evaluated first. Example: Value:([your-variable]) instead of Value:your-variable. <code>0</code> <code>Any</code> <p>Checks if all elements in the input are greater than the given value. It outputs true if all elements are greater and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsAllMoreEqual/","title":"IsAllMoreEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. For types without inherent value (e.g., None, Bool), a lexicographical comparison is used. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if all elements in the input are greater than or equal to the specified value and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. Note: This shard will not evaluate variables nested within sequences and tables. If you need to compare them against such variables, wrap them in parentheses, so that they are evaluated first. Example: Value:([your-variable]) instead of Value:your-variable. <code>0</code> <code>Any</code> <p>Checks if all elements in the input are greater than or equal to the given value. It outputs true if all elements are greater or equal and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsAllNot/","title":"IsAllNot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. For types without inherent value (e.g., None, Bool), a lexicographical comparison is used. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if all elements in the input are not equal to the specified value and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. Note: This shard will not evaluate variables nested within sequences and tables. If you need to compare them against such variables, wrap them in parentheses, so that they are evaluated first. Example: Value:([your-variable]) instead of Value:your-variable. <code>0</code> <code>Any</code> <p>Checks if all elements in the input are not equal to the given value. It outputs true if all elements are not equal and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsAlmost/","title":"IsAlmost","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input can be of any number type or a sequence of such types. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> true if the input is almost equal to the given value; otherwise, false. <code>Bool</code> <code>Value</code>  No The value to test against for almost equality. <code>none</code> <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>[Any]</code> <code>Threshold</code>  No The smallest difference to be considered equal. Should be greater than zero. <code>1.19209e-07</code> <code>Float</code><code>Int</code> <p>Checks whether the input is almost equal to a given value.</p>"},{"location":"shards/shards/General/IsAlmost/#examples","title":"Examples","text":"Code <pre><code>; ; integer comparison\n199 | Math.Add(300) | IsAlmost(500 Threshold: 1)\nLog(\"Input is almost 500\")\nAssert.Is(true Break: true)\n\n; ; float comparison\n3.95 | IsAlmost(4.0 Threshold: 0.1)\nLog(\"Input is almost 4.0\")\nAssert.Is(true Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/IsAny/","title":"IsAny","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. For types without inherent value (e.g., None, Bool), a lexicographical comparison is used. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if any element in the input is equal to the specified value and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. Note: This shard will not evaluate variables nested within sequences and tables. If you need to compare them against such variables, wrap them in parentheses, so that they are evaluated first. Example: Value:([your-variable]) instead of Value:your-variable. <code>0</code> <code>Any</code> <p>Checks if any element in the input is equal to the given value. It outputs true if any element is equal and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsAnyLess/","title":"IsAnyLess","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. For types without inherent value (e.g., None, Bool), a lexicographical comparison is used. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if any element in the input is less than the specified value and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. Note: This shard will not evaluate variables nested within sequences and tables. If you need to compare them against such variables, wrap them in parentheses, so that they are evaluated first. Example: Value:([your-variable]) instead of Value:your-variable. <code>0</code> <code>Any</code> <p>Checks if any element in the input is less than the given value. It outputs true if any element is less and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsAnyLessEqual/","title":"IsAnyLessEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. For types without inherent value (e.g., None, Bool), a lexicographical comparison is used. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if any element in the input is less than or equal to the specified value and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. Note: This shard will not evaluate variables nested within sequences and tables. If you need to compare them against such variables, wrap them in parentheses, so that they are evaluated first. Example: Value:([your-variable]) instead of Value:your-variable. <code>0</code> <code>Any</code> <p>Checks if any element in the input is less than or equal to the given value. It outputs true if any element is less or equal and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsAnyMore/","title":"IsAnyMore","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. For types without inherent value (e.g., None, Bool), a lexicographical comparison is used. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if any element in the input is greater than the specified value and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. Note: This shard will not evaluate variables nested within sequences and tables. If you need to compare them against such variables, wrap them in parentheses, so that they are evaluated first. Example: Value:([your-variable]) instead of Value:your-variable. <code>0</code> <code>Any</code> <p>Checks if any element in the input is greater than the given value. It outputs true if any element is greater and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsAnyMoreEqual/","title":"IsAnyMoreEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. For types without inherent value (e.g., None, Bool), a lexicographical comparison is used. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if any element in the input is greater than or equal to the specified value and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. Note: This shard will not evaluate variables nested within sequences and tables. If you need to compare them against such variables, wrap them in parentheses, so that they are evaluated first. Example: Value:([your-variable]) instead of Value:your-variable. <code>0</code> <code>Any</code> <p>Checks if any element in the input is greater than or equal to the given value. It outputs true if any element is greater or equal and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsAnyNot/","title":"IsAnyNot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. For types without inherent value (e.g., None, Bool), a lexicographical comparison is used. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if any element in the input is not equal to the specified value and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. Note: This shard will not evaluate variables nested within sequences and tables. If you need to compare them against such variables, wrap them in parentheses, so that they are evaluated first. Example: Value:([your-variable]) instead of Value:your-variable. <code>0</code> <code>Any</code> <p>Checks if any element in the input is not equal to the given value. It outputs true if any element is not equal and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsAudio/","title":"IsAudio","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Audio, and false otherwise. <code>Bool</code> <p>Checks the input value if it is an Audio file. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsBool/","title":"IsBool","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Bool, and false otherwise. <code>Bool</code> <p>Checks the input value if it is a Boolean. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsBytes/","title":"IsBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Bytes, and false otherwise. <code>Bool</code> <p>Checks the input value if it is of type Bytes. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsColor/","title":"IsColor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Color, and false otherwise. <code>Bool</code> <p>Checks the input value if it is vector of four color channels (RGBA). The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsFalse/","title":"IsFalse","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to check against. <code>Bool</code> <code>Output \u27a1\ufe0f</code> <code>true</code> if the input is <code>false</code>; otherwise, <code>false</code>. <code>Bool</code> <p>Gets whether the input is <code>false</code>.</p> <p> </p>"},{"location":"shards/shards/General/IsFloat/","title":"IsFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Float, and false otherwise. <code>Bool</code> <p>Checks the input value if it is of type Float. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsFloat2/","title":"IsFloat2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Float2, and false otherwise. <code>Bool</code> <p>Checks the input value if it is a vector with two Float elements. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsFloat3/","title":"IsFloat3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Float3, and false otherwise. <code>Bool</code> <p>Checks the input value if it is a vector with three Float elements. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsFloat4/","title":"IsFloat4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Float4, and false otherwise. <code>Bool</code> <p>Checks the input value if it is a vector with float Float elements. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsImage/","title":"IsImage","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Image, and false otherwise. <code>Bool</code> <p>Checks the input value if it is an Image file. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsInt/","title":"IsInt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Int, and false otherwise. <code>Bool</code> <p>Checks the input value if it is of type Int. The shard will return true if the input value is of type Int, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsInt16/","title":"IsInt16","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Int16, and false otherwise. <code>Bool</code> <p>Checks the input value if it is a vector of 16 Int elements. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsInt2/","title":"IsInt2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Int2, and false otherwise. <code>Bool</code> <p>Checks the input value if it is a vector of 2 Int elements. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsInt3/","title":"IsInt3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Int3, and false otherwise. <code>Bool</code> <p>Checks the input value if it is a vector of 3 Int elements. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsInt4/","title":"IsInt4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Int4, and false otherwise. <code>Bool</code> <p>Checks the input value if it is a vector of 4 Int elements. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsInt8/","title":"IsInt8","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Int8, and false otherwise. <code>Bool</code> <p>Checks the input value if it is a vector of 8 Int elements. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsLess/","title":"IsLess","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input is less than the operand and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. <code>0</code> <code>Any</code> <p>Checks if the input is less than the operand.</p>"},{"location":"shards/shards/General/IsLess/#examples","title":"Examples","text":"Code <pre><code>; ; string comparison\n\"a\" | IsLess(\"z\")\nLog(\"a is less than z numerically\")\nAssert.Is(true Break: true)\n\n; ; integer comparison\n2 | IsLess(5)\nLog(\"2 is less than 5\")\nAssert.Is(true Break: true)\n\n; ; float comparison\n2.0 | IsLess((2.0 | Math.Add(2.0)))\nLog(\"2.0 is less than 4.0\")\nAssert.Is(true Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/IsLessEqual/","title":"IsLessEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input is less than or equal to the operand and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. <code>0</code> <code>Any</code> <p>Checks if the input is less than or equal to the operand.</p> <p> </p>"},{"location":"shards/shards/General/IsMore/","title":"IsMore","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input is greater than the operand and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. <code>0</code> <code>Any</code> <p>Checks if the input is greater than the operand.</p>"},{"location":"shards/shards/General/IsMore/#examples","title":"Examples","text":"Code <pre><code>; ; string comparison\n\"z\" | IsMore(\"a\")\nLog(\"'z' is more than 'a' numerically\")\nAssert.Is(true Break: true)\n\n; ; integer comparison\n5 | IsMore(2)\nLog(\"5 is more than 2\")\nAssert.Is(true Break: true)\n\n; ; float comparison\n5.0 | IsMore((1.0 | Math.Add(3.0)))\nLog(\"5.0 is more than 4.0\")\nAssert.Is(true Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/IsMoreEqual/","title":"IsMoreEqual","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input is greater than or equal to the operand and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. <code>0</code> <code>Any</code> <p>Checks if the input is greater than or equal to the operand.</p>"},{"location":"shards/shards/General/IsMoreEqual/#examples","title":"Examples","text":"Code <pre><code>; ; string comparison\n\"z\" | IsMoreEqual(\"a\")\nLog(\"'z' is more or equal than 'a' numerically\")\nAssert.Is(true Break: true)\n\n; ; integer comparison\n5 | IsMoreEqual(2)\nLog(\"5 is more or equal to 2\")\nAssert.Is(true Break: true)\n\n; ; float comparison\n9.0 | IsMoreEqual((1.0 | Math.Add(2.0)))\nLog(\"9.0 is more or equal to 2.0\")\nAssert.Is(true Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/IsNone/","title":"IsNone","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value which type to check against. <code>Any</code> <code>Output \u27a1\ufe0f</code> <code>true</code> is the type of input is <code>None</code>; otherwise, <code>false</code>. <code>Bool</code> <p>Gets whether the type of the input is <code>None</code>.</p> <p> </p>"},{"location":"shards/shards/General/IsNot/","title":"IsNot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input is not equal to the operand and false otherwise. <code>Bool</code> <code>Value</code>  No The value to check against. <code>0</code> <code>Any</code> <p>Checks if the input is not equal to the operand.</p>"},{"location":"shards/shards/General/IsNot/#examples","title":"Examples","text":"Code <pre><code>; ; string comparison\n\"hello\" | IsNot(\"HELLO\")\nLog(\"hello is not HELLO\")\nAssert.Is(true Break: true)\n\n; ; integer comparison\n2 | Math.Add(3) | IsNot(4)\nLog(\"5 is not 4\")\nAssert.Is(true Break: true)\n\n; ; integer/float comparison\n4 | IsNot((3.0 | Math.Add(1.0)))\nLog(\"4is not 4.0\")\nAssert.Is(true Break: true)\n\n; ; string/integer comparison\n\"Shards\" | IsNot(122)\nLog(\"'Shards' is not 122\")\nAssert.Is(true Break: true)\n\n; ; sequence comparison\n[1 2 3] | IsNot([1 3])\nLog(\"[1 2 3] is not [1 3]\")\nAssert.Is(true Break: true)\n\n; ; table comparison\n{key3: [10 20] key2: [30]} | IsNot({key1: [10 20] key2: [30]})\nAssert.Is(true Break: true)\n\n; ; sequence/table comparison\n[1 2 3] | IsNot({key1: [1 2] key2: [3]})\nAssert.Is(true Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/IsNotNone/","title":"IsNotNone","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value which type to check against. <code>Any</code> <code>Output \u27a1\ufe0f</code> <code>true</code> is the type of input different from <code>None</code>; otherwise, <code>false</code>. <code>Bool</code> <p>Gets whether the type of the input is different from <code>None</code>.</p> <p> </p>"},{"location":"shards/shards/General/IsRunning/","title":"IsRunning","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> This shard will either return true if the specified Wire is still running, or false if it has ended. <code>Bool</code> <code>Wire</code>  No The wire to check. <code>none</code> <code>Wire</code><code>String</code><code>None</code><code>Var(Wire)</code> <p>Checks if a Wire is running and outputs true if it is, false if otherwise. (Note that a looped Wire will always be running and thus will always return true)</p> <p> </p>"},{"location":"shards/shards/General/IsSeq/","title":"IsSeq","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of the specified type, and false otherwise. <code>Bool</code> <p>Checks the input value if it is of the type specified. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsString/","title":"IsString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type String, and false otherwise. <code>Bool</code> <p>Checks the input value if it is a String. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsTable/","title":"IsTable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Table, and false otherwise. <code>Bool</code> <p>Checks the input value if it is a Table. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/IsTrue/","title":"IsTrue","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to check against. <code>Bool</code> <code>Output \u27a1\ufe0f</code> <code>true</code> if the input is <code>true</code>; otherwise, <code>false</code>. <code>Bool</code> <p>Gets whether the input is <code>true</code>.</p> <p> </p>"},{"location":"shards/shards/General/IsValidNumber/","title":"IsValidNumber","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The floating-point number to be checked. <code>Float</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input is a valid normal floating-point number, otherwise outputs false. <code>Bool</code> <p>Checks if the input is a valid floating-point number (not zero, subnormal, infinity, or NaN). Outputs true if the input is a normal floating-point number, otherwise outputs false.</p> <p> </p>"},{"location":"shards/shards/General/IsWire/","title":"IsWire","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs true if the input value is of type Wire, and false otherwise. <code>Bool</code> <p>Checks the input value if it is a Wire. The shard will return true if the input is of the appropriate type, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/General/Isolate/","title":"Isolate","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Contents</code>  No <code>none</code> <code>Shard</code><code>[Shard]</code> <code>Include</code>  No Includes only the listed variables <code>none</code> <code>None</code><code>[String]</code> <code>Exclude</code>  No Ignores all the listed variables <code>none</code> <code>None</code><code>[String]</code> <p>Isolates the inner shards' environment by only allowing certain variables</p> <p> </p>"},{"location":"shards/shards/General/Iterate/","title":"Iterate","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input table to perform the range query on. <code>{Any}</code> <code>Output \u27a1\ufe0f</code> Passes through the input table unchanged. <code>{Any}</code> <code>From</code>  No The starting key to begin searching from (including this key). <code>none</code> <code>Any</code> <code>To</code>  No The ending key to stop searching at (not including this key). If not provided or same as From, will keep searching until From no longer matches. <code>none</code> <code>Any</code><code>None</code> <code>Action</code>  No The shards to run on each matching element that is found. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Searches through a sorted table input for a range of matching elements. Returns all values from the table that have keys between the From and To keys. If Focused is true, will stop searching once From no longer matches.</p> <p> </p>"},{"location":"shards/shards/General/Last/","title":"Last","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A table or sequence to get the last element from. <code>[Any]</code><code>{Any}</code> <code>Output \u27a1\ufe0f</code> For sequences: the last value. For tables: a [key, value] pair. Returns None if input is empty. <code>Any</code> <p>Returns the last element from a sorted table or sequence. For tables, returns a [key, value] pair. Returns None if empty. Note: This operation is fast but unsafe unless the output is cloned (using Set instead of Ref) when combined with await or suspended wire flow.</p> <p> </p>"},{"location":"shards/shards/General/LastError/","title":"LastError","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The last error message that occurred as a string. <code>String</code> <p>This shard outputs the last error message that occurred as a string.</p> <p> </p>"},{"location":"shards/shards/General/Lerp/","title":"Lerp","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The factor to interpolate between the start and end values. <code>Float</code> <code>Output \u27a1\ufe0f</code> The interpolated value between the start and end values based on the factor provided as input. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>First</code>  No The start value <code>none</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code> <code>Second</code>  No The end value <code>none</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code> <p>Linearly interpolate between the start value specified in the <code>First</code> parameter and the end value specified in the <code>Second</code> parameter based on the factor provided as input.</p> <p> </p>"},{"location":"shards/shards/General/Limit/","title":"Limit","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input sequence to truncate. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The truncated sequence (or a single element if Max is 1). <code>Any</code> <code>Max</code>  No How many maximum elements to take from the input sequence. <code>0</code> <code>Int</code> <p>This shard truncates the input sequence to the specified number of elements(specified by the Max parameter) and outputs the truncated sequence.</p>"},{"location":"shards/shards/General/Limit/#details","title":"Details","text":"<p>If 0 was provided in the <code>Max</code> parameter, the shard will return an empty sequence as 0 elements were obtained.</p> <p>If 1 was provided in the <code>Max</code> parameter, the shard will return the first element of the input sequence (Not a sequence containing the first element).</p> <p> </p>"},{"location":"shards/shards/General/LoadImage/","title":"LoadImage","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> An image represented as a byte array <code>Bytes</code><code>Any</code> <code>Output \u27a1\ufe0f</code> The image as an image type. <code>Image</code> <code>File</code>  No The file to load the image from <code>none</code> <code>String</code><code>Var(String)</code><code>None</code> <code>BPP</code>  No bits per pixel (HDR images loading and such!) <code>BPP::u8</code> <code>BPP</code> <code>PremultiplyAlpha</code>  No Toggle premultiplication of alpha channel <code>false</code> <code>Bool</code> <p>This shard loads an image from a file (specified in the File parameter) or byte array (passed as input) and outputs it as an image type, that can subsequently be used by other shards such as UI.Image and UI.ImageButton.</p>"},{"location":"shards/shards/General/LoadImage/#details","title":"Details","text":"<p>If both a bytes sequence is provided as input and a a file path was provided in the <code>File</code> parameter, the file path will supersede the input and the shard will load the image from the file path.</p> <p> </p>"},{"location":"shards/shards/General/Log/","title":"Log","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to be logged to the console. <code>Any</code> <code>Output \u27a1\ufe0f</code> The same value that was inputted, unmodified. <code>Any</code> <code>Prefix</code>  No The message to prefix to the logged output. Note: the prefix will include a colon ':' before the value. `` <code>String</code> <code>Level</code>  No The level of logging. <code>LogLevel::Info</code> <code>LogLevel</code> <code>Name</code>  No The name of the logger to use, the default is 'shards'. <code>shards</code> <code>String</code> <p>Logs the output of a shard or the value of a variable to the console along with an optional prefix string. The logging level can be specified to control the verbosity of the log output.</p>"},{"location":"shards/shards/General/Log/#examples","title":"Examples","text":"Code <pre><code>\"I am a var\" = var\n2 | Math.Multiply(4) | Log(Level: LogLevel::Info) ;; log previous shard output\nvar | Log(Level: LogLevel::Warning) ;; log a variable value\n3 | Math.Add(4) | Log(Prefix: \"String\" Level: LogLevel::Error) ;; prefix a string to the logged output\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>\"I am a var\" = var\n2 | Math.Multiply(4) | Log ;; log previous shard output\nvar | Log ;; log a variable value\n3 | Math.Add(4) | Log(Prefix: \"String\")\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/LogType/","title":"LogType","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value whose type will be logged to the console. <code>Any</code> <code>Output \u27a1\ufe0f</code> The same value that was inputted, unmodified. <code>Any</code> <code>Prefix</code>  No The message to prefix to the logged output. Note: the prefix will include a colon ':' before the value. `` <code>String</code> <code>Level</code>  No The level of logging. <code>LogLevel::Info</code> <code>LogLevel</code> <code>Name</code>  No The name of the logger to use, the default is 'shards'. <code>shards</code> <code>String</code> <p>Logs the type of the value to the console along with an optional prefix string. The logging level can be specified to control the verbosity of the log output.</p> <p> </p>"},{"location":"shards/shards/General/Lowest/","title":"Lowest","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of elements of any type. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the element with the lowest value. <code>Any</code> <p>Takes a sequence and outputs the element with the lowest value.</p>"},{"location":"shards/shards/General/Lowest/#details","title":"Details","text":"<p>If the input sequence has elements that traditionally hold no value (eg. a sequence of strings), these elements will be given a lexicographical value for comparison.</p> <p>If the input is a sequence with nested values or a table, the shard will also use lexicographical comparison to find the lowest value.</p> <p>The input sequence can be of any type, but cannot be a sequence with elements of different types or be an empty sequence.</p> <p> </p>"},{"location":"shards/shards/General/MakeColor/","title":"MakeColor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses the values provided in the parameters to construct the vector. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of four color channels (RGBA). <code>Any</code> <code>0</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>1</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>2</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>3</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <p>Creates a vector of four color channels (RGBA). If fewer than four values are provided, the remaining elements will be set to 0. The alias for this shard is @color.</p> <p> </p>"},{"location":"shards/shards/General/MakeFloat2/","title":"MakeFloat2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses the values provided in the parameters to construct the vector. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of two Float elements. <code>Any</code> <code>0</code>  No Vector element <code>none</code> <code>Var(Float)</code><code>Float</code> <code>1</code>  No Vector element <code>none</code> <code>Var(Float)</code><code>Float</code> <p>Creates a vector of two Float elements from the values provided in the parameters. If fewer than two values are provided, the remaining elements will be set to 0. The alias for this shard is @f2.</p> <p> </p>"},{"location":"shards/shards/General/MakeFloat3/","title":"MakeFloat3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses the values provided in the parameters to construct the vector. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of three Float elements. <code>Any</code> <code>0</code>  No Vector element <code>none</code> <code>Var(Float)</code><code>Float</code> <code>1</code>  No Vector element <code>none</code> <code>Var(Float)</code><code>Float</code> <code>2</code>  No Vector element <code>none</code> <code>Var(Float)</code><code>Float</code> <p>Creates a vector of three Float elements from the values provided in the parameters. If fewer than three values are provided, the remaining elements will be set to 0. The alias for this shard is @f3.</p> <p> </p>"},{"location":"shards/shards/General/MakeFloat4/","title":"MakeFloat4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses the values provided in the parameters to construct the vector. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of Four Float elements. <code>Any</code> <code>0</code>  No Vector element <code>none</code> <code>Var(Float)</code><code>Float</code> <code>1</code>  No Vector element <code>none</code> <code>Var(Float)</code><code>Float</code> <code>2</code>  No Vector element <code>none</code> <code>Var(Float)</code><code>Float</code> <code>3</code>  No Vector element <code>none</code> <code>Var(Float)</code><code>Float</code> <p>Creates a vector of four Float elements from the values provided in the parameters. If fewer than four values are provided, the remaining elements will be set to 0. The alias for this shard is @f4.</p> <p> </p>"},{"location":"shards/shards/General/MakeInt16/","title":"MakeInt16","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses the values provided in the parameters to construct the vector. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of sixteen Int elements. <code>Any</code> <code>0</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>1</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>2</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>3</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>4</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>5</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>6</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>7</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>8</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>9</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>10</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>11</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>12</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>13</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>14</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>15</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <p>Creates a vector of sixteen Int elements from the values provided in the parameters. If fewer than sixteen values are provided, the remaining elements will be set to 0. The alias for this shard is @i16.</p> <p> </p>"},{"location":"shards/shards/General/MakeInt2/","title":"MakeInt2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses the values provided in the parameters to construct the vector. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of two Int elements. <code>Any</code> <code>0</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>1</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <p>Creates a vector of two Int elements from the values provided in the parameters. If fewer than two values are provided, the remaining elements will be set to 0. The alias for this shard is @i2.</p> <p> </p>"},{"location":"shards/shards/General/MakeInt3/","title":"MakeInt3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses the values provided in the parameters to construct the vector. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of three Int elements. <code>Any</code> <code>0</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>1</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>2</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <p>Creates a vector of three Int elements from the values provided in the parameters. If fewer than three values are provided, the remaining elements will be set to 0.The alias for this shard is @i3.</p> <p> </p>"},{"location":"shards/shards/General/MakeInt4/","title":"MakeInt4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses the values provided in the parameters to construct the vector. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of four Int elements. <code>Any</code> <code>0</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>1</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>2</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>3</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <p>Creates a vector of four Int elements from the values provided in the parameters. If fewer than four values are provided, the remaining elements will be set to 0. The alias for this shard is @i4.</p> <p> </p>"},{"location":"shards/shards/General/MakeInt8/","title":"MakeInt8","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input is required. This shard uses the values provided in the parameters to construct the vector. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of eight Int elements. <code>Any</code> <code>0</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>1</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>2</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>3</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>4</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>5</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>6</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <code>7</code>  No Vector element <code>none</code> <code>Var(Int)</code><code>Int</code> <p>Creates a vector of eight Int elements from the values provided in the parameters. If fewer than eight values are provided, the remaining elements will be set to 0. The alias for this shard is @i8</p> <p> </p>"},{"location":"shards/shards/General/MakeTrait/","title":"MakeTrait","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The trait object created. <code>Any</code> <code>Name</code>  No The trait name <code>none</code> <code>String</code> <code>Types</code>  No The trait types <code>none</code> <code>{Type}</code> <p>This shard creates a trait with the specified name and types and makes it available for use in the wire.</p> <p> </p>"},{"location":"shards/shards/General/Map/","title":"Map","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The sequence or table to process. <code>[Any]</code><code>{Any}</code> <code>Output \u27a1\ufe0f</code> The resulting processed sequence or table. <code>[Any]</code> <code>Apply</code>  No The function to apply to each item of the sequence or key-value pair of the table. <code>none</code> <code>Shard</code><code>[Shard]</code> <p>Processes each element of a sequence or key-value pair of a table using the shards specified in the <code>Apply</code> parameter and outputs the modified sequence or table. Note that this shard is able to use the $0 and $1 internal variables, as well as $i for the current index.</p>"},{"location":"shards/shards/General/Map/#details","title":"Details","text":"<p>This shard is able to use the internal variable <code>$0</code> and <code>$1</code> within its <code>Apply</code> parameter.</p> <p>If a sequence was provided as input, the variable <code>$0</code> will take the value of the current element of the sequence it is iterating over. ($1 does not exist when iterating over a sequence) For example: <pre><code>[1 2 3]\nMap(\n  Apply: {\n    $0 | Math.Add(1)\n  }\n)\nLog(\"Result\") ;; Results in [2 3 4]\n</code></pre> <code>$0</code> will take the value of 1 and then 2 and then 3 accordingly.</p> <p>When iterating over a sequence with elements of different types, <code>$0</code> will adopt the type of the current element it is iterating over, convert its type as necessary.</p> <p>If a table was provided as input, the variable <code>$0</code> will be the current key of the table it is iterating over while <code>$1</code> will take the value associated with the key. For example: <pre><code>{\n  \"a\": 1\n  \"b\": 2\n  \"c\": 3\n}\nMap(\n  Apply: {\n    $0 | Log\n    $1 | ExpectInt | Math.Add(1)\n  }\n)\nLog(\"Result\") ;; Results in [2 3 4]\n</code></pre> <code>$0</code> will take the value of \"a\" and then \"b\" and then \"c\" while <code>$1</code> will take the value of 1 and then 2 and then 3 accordingly.</p> <p>When iterating over a table, the <code>Apply</code> parameter receives a sequence of two elements as input, where the first element is the key and the second is the value. <code>$0</code> and <code>$1</code> are set to these values respectively.</p> <p><code>$0</code> will always be of type <code>String</code> while <code>$1</code>, when iterating over the table will always be of type <code>Any</code>. Convert <code>$1</code> to the appropriate type as necessary (e.g. using <code>ExpectInt</code>).</p> <p>Do note that this instance of <code>$0</code> and <code>$1</code> are unique to the Map shard and do not exist outside of the context of its <code>Apply</code> parameter. Values set to this instance of <code>$0</code> and <code>$1</code> will not be reflected on other <code>$0</code> and <code>$1</code> created in a different call of another Map shard or any other shard that is also able to use <code>$0</code> and <code>$1</code>.</p> <p> </p>"},{"location":"shards/shards/General/Match/","title":"Match","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that's compared with the declared cases. <code>Any</code> <code>Output \u27a1\ufe0f</code> Same value as input if <code>:Passthrough</code> is <code>true</code> else the output of the matched case's shard if <code>:Passthrough</code> is <code>false</code>. <code>Any</code> <code>Cases</code>  No Values to match against the input. A <code>none</code> case will match anything. <code>[]</code> <code>[Any]</code> <code>Passthrough</code>  No Parameter to control the shard's output. <code>true</code> allows the <code>Match</code> shard's input itself to appear as its output; <code>false</code> allows the matched shard's output to appear as <code>Match</code> shard's output. <code>true</code> <code>Bool</code> <p>Compares the input with the declared cases (in order of the declaration) and activates the shard of the first matched case.</p>"},{"location":"shards/shards/General/Match/#details","title":"Details","text":"<p><code>Match</code> compares its input with every case declared via the <code>Cases</code> parameter (in the order of their declaration) till a match is found.</p> <p>Once a match is found the shard of that matched case is activated/executed and <code>Match</code> execution stops. All subsequent cases (even matching ones) are ignored.</p> <p>A <code>none</code> case matches anything, so it's a good practice to declare a <code>none</code> case at the end of <code>Cases</code> to execute some default logic if no valid matches exist for a given input. If you do not have a <code>none</code> case, then a non-matching input to <code>Match</code> will fail the shard.</p>"},{"location":"shards/shards/General/Match/#a-note-on-passthrough","title":"A note on <code>Passthrough</code>","text":"<p>The <code>Passthrough</code> parameter can control the final output of the shard it applies to.</p> <p>Setting this parameter to <code>true</code> allows the original input of a shard to pass through as its output as well. If this parameter is set to <code>false</code>, passthrough is suppressed and then the output of the shard is the actual computed value coming out from the shard execution.</p> <p><code>Passthrough</code> parameter set to <code>true</code> will allow the original input (the one that was used to match against every case in the shard) to be returned as the final output of <code>Match</code>, irrespective of the case match results. Setting <code>Passthrough</code> to <code>false</code> will enable the matched case's shard output to be returned as the final output of <code>Match</code>.</p> <p>However, for <code>Passthrough</code> to work correctly, the data types of the shard input and the shard's case outputs must match.</p>"},{"location":"shards/shards/General/Match/#examples","title":"Examples","text":"Code <pre><code>; ; no matches + nil match in the middle + with passthrough\n1\nMatch([2 {Msg(\"Matched 2\")} ; ; case processed, match not found\n       none Msg(\"Matched nil\") ; ; case processed, match found\n       3 Msg(\"Matched 3\")] ; ; case ignored\nPassthrough: true) ; ; passthrough --\nAssert.Is(1 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; ; multiple matches + nil match at end + no passthrough\n1\nMatch([\n  (0 | Math.Add(1)) {\"Matched 1a\"} ; ; case processed, match found\n  1 {\"Matched 1\"} ; ; case ignored\n  2 {\"Matched 2\"} ; ; case ignored\n  none {\"Matched nil\"}\n] ; ; case ignored \nPassthrough: false) ; ; no passthrough --\nLog(\"Result\")\nAssert.Is(\"Matched 1a\" true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; ; multiple matches + nil match at start + with passthrough\n1\nMatch([\n  none {Msg(\"Case 0\")}\n  1 {Msg(\"Case 1\")}\n  2 {Msg(\"Case 2\")}\n] Passthrough: true)\nLog(\"Match Passthrough Value\")\nAssert.Is(1 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; ; single match + nil match at end + no passthrough\n1\nMatch([2 {\"Matched 2\"} ; ; case processed, match not found\n       1 {\"Matched 1\"} ; ; case processed, match found\n       3 {\"Matched 3\"} ; ; case ignored\n       none {\"Matched nil\"}] ; ; case ignored \nPassthrough: false) ; ; no passthrough --\nLog(\"Result\")\nAssert.Is(\"Matched 1\" true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Max/","title":"Max","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The first value to compare with. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The larger value between the input and the operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard compares the input with the value specified in the <code>Operand</code> parameter and outputs the larger value.</p>"},{"location":"shards/shards/General/Max/#details","title":"Details","text":"<p>The input and the value in the <code>Operand</code> parameter must be of the same type. (e.g you cant compare an integer with a float, a sequence of integers can only be compared with an integer or sequence of integers, a int vector can only be compared with an int or another int vector)</p> <p>If a sequence of numbers was provided as input, and a single  the shard will compare each element in the sequence with the value in the <code>Operand</code> parameter and output a sequence of numbers with the maximum value for each element.</p> <p>If a sequence of numbers was provided as input and a sequence was also provided in the <code>Operand</code> parameter, the shard will compare each element in the input sequence with the corresponding element in the <code>Operand</code> sequence and output a sequence of numbers with the maximum value for each element. If the operand sequence is shorter than the input sequence, the shard will loop back to the first element of the operand sequence and continue the comparison. If the operand sequence is longer than the input sequence, the extra elements in the operand sequence will be ignored. This shard will behave the same if the input and operand are vectors.</p>"},{"location":"shards/shards/General/Max/#examples","title":"Examples","text":"Code <pre><code>; ; sequence vs number\nConst([-1 0 1 2 5])\nMax(Operand: 3)\nLog(\"Result 1\")\nAssert.Is([3 3 3 3 5] true)\n\n; ; number vs number\nConst(3)\nMax(Operand: 2)\nLog(\"Result 2\")\nAssert.Is(3 true)\n\n; ; sequence (equal) vs sequence (equal)\nConst([-1 0 1 2 5])\nMax(Operand: [3 -2 4 0 1])\nLog(\"Result 3\")\nAssert.Is([3 0 4 2 5] true)\n\n; ; sequence (smaller) vs sequence (bigger)\nConst([-1 0 5])\nMax(Operand: [3 -2 4 0 1])\nLog(\"Result 4\")\nAssert.Is([3 0 5] true)\n\n; ; sequence (bigger) vs sequence (smaller)\nConst([-1 0 1 2 5])\nMax(Operand: [3 -2 1])\nLog(\"Result 5\")\nAssert.Is([3 0 1 3 5] true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Maybe/","title":"Maybe","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Must match the input types of the first shard in the sequence. <code>Any</code> <code>Output \u27a1\ufe0f</code> Will match the output types of the first shard of the sequence. <code>Any</code> <code>Shards</code>  No The shards to activate. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Else</code>  No The shards to activate on failure. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Silent</code>  No If logging should be disabled while running the shards (this will also disable (Log) and (Msg) shards) and no warning message should be printed on failure. <code>false</code> <code>Bool</code> <p>Attempts to activate a shard or a sequence of shards. Upon failure, activate another shard or sequence of shards.</p>"},{"location":"shards/shards/General/Maybe/#examples","title":"Examples","text":"Code <pre><code>[1 2]\nMaybe(\n  Shards: Take(3)\n  Else:\n  {Msg(\"Invalid, default to 42\" LogLevel::Warning)\n    42\n  }\n  Silent: true\n)\nLog(\"result\")\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>[1 2]\nMaybe(\n  Shards: Take(3)\n  Else: Take(0)\n  Silent: true\n)\nLog(\"result\")\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Memoize/","title":"Memoize","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Evaluate</code>  No The shards to evaluate the cached value based on input <code>none</code> <code>Shard</code><code>[Shard]</code> <p>Computes a value</p> <p> </p>"},{"location":"shards/shards/General/Merge/","title":"Merge","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{Any}</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{Any}</code> <code>Target</code>  No The table to merge into. <code>none</code> <code>Var({Any})</code> <p>Combine two tables into one, with the input table taking priority over the operand table, which will be written and returned as output. This shard is useful in scenarios where you need to merge data from different sources while keeping the priority of certain values.</p> <p> </p>"},{"location":"shards/shards/General/Min/","title":"Min","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The first value to compare with. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The smaller value between the input and the operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard compares the input with the value specified in the <code>Operand</code> parameter and outputs the smaller value.</p>"},{"location":"shards/shards/General/Min/#details","title":"Details","text":"<p>The input and the value in the <code>Operand</code> parameter must be of the same type. (e.g you cant compare an integer with a float, a sequence of integers can only be compared with an integer or sequence of integers, a int vector can only be compared with an int or another int vector)</p> <p>If a sequence of numbers was provided as input, and a single  the shard will compare each element in the sequence with the value in the <code>Operand</code> parameter and output a sequence of numbers with the minimum value for each element.</p> <p>If a sequence of numbers was provided as input and a sequence was also provided in the <code>Operand</code> parameter, the shard will compare each element in the input sequence with the corresponding element in the <code>Operand</code> sequence and output a sequence of numbers with the minimum value for each element. If the operand sequence is shorter than the input sequence, the shard will loop back to the first element of the operand sequence and continue the comparison. If the operand sequence is longer than the input sequence, the extra elements in the operand sequence will be ignored. This shard will behave the same if the input and operand are vectors.</p>"},{"location":"shards/shards/General/Min/#examples","title":"Examples","text":"Code <pre><code>;; sequence vs number\nConst([-1 0 1 2 5])\nMin(Operand: 3)\nLog(\"Result 1\")\nAssert.Is([-1 0 1 2 3] true)\n\n;; number vs number\nConst(3)\nMin(Operand: 2)\nLog(\"Result 2\")\nAssert.Is(2 true)\n\n;; sequence (equal) vs sequence (equal)\nConst([-1 0 1 2 5])\nMin(Operand: [3 -2 4 0 1])\nLog(\"Result 3\")\nAssert.Is([-1 -2 1 0 1] true)\n\n;; sequence (smaller) vs sequence (bigger)\nConst([-1 0 5])\nMin(Operand: [3 -2 4 0 1])\nLog(\"Result 4\")\nAssert.Is([-1 -2 4] true)\n\n;; sequence (bigger) vs sequence (smaller)\nConst([-1 0 1 2 5])\nMin(Operand: [3 -2 1])\nLog(\"Result 5\")\nAssert.Is([-1 -2 1 2 -2] true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Msg/","title":"Msg","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input is ignored. This shard displays a static message. <code>Any</code> <code>Output \u27a1\ufe0f</code> The same variable that was inputted, unmodified. <code>Any</code> <code>Message</code>  No The message to display on the user's screen or console. `` <code>String</code> <code>Level</code>  No The level of logging. <code>LogLevel::Info</code> <code>LogLevel</code> <p>Displays the passed message string to the user via standard output. The input variable is ignored, and only the static message is displayed.</p>"},{"location":"shards/shards/General/Msg/#examples","title":"Examples","text":"Code <pre><code>@template(msgshard [a b] {\n  Msg(a LogLevel::Warning) ; ; print value of 1st arg passed\n  Msg(b LogLevel::Error)\n})\n; ; print value of 2nd arg passed\n\n@wire(main-wire {\n\n  Msg(\"Hello World\" LogLevel::Info) ; ; prints string\n  @msgshard(\"Bye\" \"Universe\")\n\n})\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@template(msgshard [a b] {\n  Msg(a) ; ; print value of 1st arg passed\n  Msg(b)\n})\n; ; print value of 2nd arg passed\n\n@wire(main-wire {\n\n  Msg(\"Hello World\") ; ; prints string\n  @msgshard(\"Bye\" \"Universe\")\n\n})\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Mul/","title":"Mul","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value or the sequence of values to multiply the value specified in the Operand parameter with. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> This shard outputs the result of the multiplication. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The value or sequence of values to multiply the input by. <code>0</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard multiplies the input value by the value provided in the Operand parameter.</p> <p> </p>"},{"location":"shards/shards/General/NaNTo0/","title":"NaNTo0","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A float value or a sequence of float values to be checked for NaN. <code>Float</code><code>[Float]</code> <code>Output \u27a1\ufe0f</code> The input with any NaN values replaced by 0. <code>Float</code><code>[Float]</code> <p>Replaces NaN (Not a Number) values in the input with 0. This shard can handle both single float values and sequences of float values.</p> <p> </p>"},{"location":"shards/shards/General/NanoID/","title":"NanoID","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <code>Size</code>  No The output string length of the created NanoID. <code>21</code> <code>Int</code> <p>Creates a random NanoID.</p> <p> </p>"},{"location":"shards/shards/General/Not/","title":"Not","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to be negated. <code>Bool</code> <code>Output \u27a1\ufe0f</code> The negation of the input. <code>Bool</code> <p>Computes the logical negation of the input.</p>"},{"location":"shards/shards/General/Not/#examples","title":"Examples","text":"Code <pre><code>false | Not\nLog(\"Result 1\")\nAssert.Is(true Break: true)\n\ntrue | Not\nLog(\"Result 2\")\nAssert.Is(false Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Once/","title":"Once","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Action</code>  No The shard or sequence of shards to execute. <code>none</code> <code>Shard</code><code>[Shard]</code> <code>Every</code>  No The number of seconds to wait until repeating the action, if 0 the action will happen only once per wire flow execution. <code>none</code> <code>Float</code><code>Var(Float)</code> <p>Executes the shard or sequence of shards with the desired frequency in a wire flow execution.</p>"},{"location":"shards/shards/General/Once/#examples","title":"Examples","text":"Code <pre><code>@wire(main-wire {\n\n  Once({\n    0 &gt;= counter\n    counter | Log(\"counter set to 0 only once\")\n    ; ; =&gt; 0\n  })\n  Math.Inc(counter)\n  counter | Log(\"counter incremented every time wire executes\")\n  ; ; =&gt; 1, 2, 3, 4, 5\n} Looped: true)\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(main-wire {\n\n  \"Hello World, every 1.5s during a wire flow execution\" = string1\n  \"Hello World, once during every wire flow execution\" = string2\n\n  string1\n  Once(\n    Action: Log\n    Every: 1.5\n  )\n\n  string2\n  Once(\n    Action: Log\n  )\n\n} Looped: true)\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Or/","title":"Or","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> If true, the flow stops and succeeds; otherwise, the flow continues. <code>Bool</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be the input of the current conditional flow or wire. <code>Bool</code> <p>Computes the logical OR between the input of this shard and the output of the next shard. If the input is true, the flow stops and succeeds; if false, the flow continues with the next shard. Typically used within conditional flows (e.g., If, When) to chain conditions. Note: Outside a conditional flow, it might restart the current wire, which can be used as a trick in certain scenarios.</p>"},{"location":"shards/shards/General/Or/#examples","title":"Examples","text":"Code <pre><code>false | Or | false\nAssert.Is(false Break: true)\n\nfalse | Or | true\nAssert.Is(true Break: true)\n\ntrue | Or | false\nAssert.Is(true Break: true)\n\ntrue | Or | true\nAssert.Is(true Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Output/","title":"Output","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string or bytes to output to stdout. <code>String</code><code>Bytes</code> <code>Output \u27a1\ufe0f</code> The same variable that was inputted, unmodified. <code>String</code><code>Bytes</code> <p>Outputs data directly to stdout</p> <p> </p>"},{"location":"shards/shards/General/ParseFloat/","title":"ParseFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A string representing a number. <code>String</code> <code>Output \u27a1\ufe0f</code> A floating-point number equivalent to the number contained in the string input. <code>Float</code> <p>Converts the string representation of a number to its floating-point number equivalent.</p>"},{"location":"shards/shards/General/ParseFloat/#details","title":"Details","text":"<p>This shard is only able to parse strings that represent floating-point numbers. It can handle: - Integer parts eg. <code>\"123\"</code> - Decimal points &amp; Fractional parts eg. <code>\"123.456\"</code> - Scientific notation eg. <code>\"1.23e-4\"</code> - Leading whitespace (which is ignored) eg. <code>\"  123.456\"</code> - Leading plus or minus signs eg. <code>\"+123.456\"</code> or <code>\"-123.456\"</code></p>"},{"location":"shards/shards/General/ParseFloat/#examples","title":"Examples","text":"Code <pre><code>\"3.14\" | ParseFloat | Log\nAssert.Is(3.14 Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/ParseInt/","title":"ParseInt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A number represented as a string. <code>String</code> <code>Output \u27a1\ufe0f</code> A signed integer equivalent to the number contained in the string input. <code>Int</code> <code>Base</code>  No Numerical base (radix) that determines the valid characters and their interpretation. <code>10</code> <code>Int</code> <p>Converts the string representation of a number to its signed integer equivalent.</p>"},{"location":"shards/shards/General/ParseInt/#details","title":"Details","text":"<p>The value passed into the <code>Base</code> parameter determines which characters are valid. The default base for this shard is 10.</p> <p>The value passed into the <code>Base</code> parameter must be between 2 and 36.</p> <p>For bases beyond 10, alphabetical characters are given a value and it is not case-sensitive.</p> <p>Some common bases include:   - 2 (binary) - only valid characters are 0 and 1.   - 8 (octal) - only valid characters are 0-7.   - 10 (decimal) - Standard base, valid characters are 0-9. (default)   - 16 (hexadecimal) - only valid characters are 0-9, a-f, and A-F.   - 36 (base-36) - only valid characters are 0-9, a-z, and A-Z.</p>"},{"location":"shards/shards/General/ParseInt/#examples","title":"Examples","text":"Code <pre><code>\"42\" | ParseInt | Log\nAssert.Is(42 Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Pass/","title":"Pass","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input value will pass through unchanged. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <p>This shard is a \"no operation\" shard. It simply passes through the input without modifying it.</p>"},{"location":"shards/shards/General/Pass/#details","title":"Details","text":"<p>This shard is useful for placeholding, debugging or \"skipping\". For example, using <code>Pass</code> in the <code>Then</code> parameter of the conditional shard <code>If</code>,  <code>If(Predicate: some-condition Then: {do-something} Else: Pass)</code>, this means that nothing will happen when the condition set in the <code>Predicate</code> parameter is not met.</p> <p> </p>"},{"location":"shards/shards/General/Pause/","title":"Pause","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> Passes the input value through. <code>Any</code> <code>Time</code>  No The amount of time in seconds (can be fractional) to pause this wire. <code>none</code> <code>None</code><code>Float</code><code>Int</code><code>Var(Float)</code><code>Var(Int)</code> <p>Pauses the wire for a given amount of time.</p> <p> </p>"},{"location":"shards/shards/General/PauseMs/","title":"PauseMs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> Passes the input value through. <code>Any</code> <code>Time</code>  No The amount of time in milliseconds to pause this wire. <code>none</code> <code>None</code><code>Int</code><code>Var(Int)</code> <p>Pauses the wire for a given amount of time.</p> <p> </p>"},{"location":"shards/shards/General/Peek/","title":"Peek","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> This shard either outputs none if the peeked Wire is still in progress, or the peeked Wire's output if it has ended. <code>Any</code> <code>Wire</code>  No The wire to check. <code>none</code> <code>Wire</code><code>String</code><code>None</code><code>Var(Wire)</code> <p>Checks if another Wire has ended (Note that a looped Wire will never end). Outputs the Wire's output if it has ended, or none if it is still in progress.</p> <p> </p>"},{"location":"shards/shards/General/Percentile/","title":"Percentile","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The sequence of floats to calculate the percentile of. <code>[Float]</code> <code>Output \u27a1\ufe0f</code> The percentile of the input value within the specified sequence. <code>Float</code> <code>Percentile</code>  No The percentile to calculate. <code>50</code> <code>Float</code><code>Var(Float)</code> <p>This shard calculates the percentile of the input value within the specified sequence.</p> <p> </p>"},{"location":"shards/shards/General/Pop/","title":"Pop","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The element popped from the sequence. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Pops (removes and outputs) the last element of the sequence variable. Works only on sequences. If the variable is not a sequence or the sequence is empty, an error is thrown.</p>"},{"location":"shards/shards/General/Pop/#examples","title":"Examples","text":"Code <pre><code>; ; pop last element from a local sequence\n[10 20 30 40] &gt;= seq ; ; create a local sequence\nGet(seq) | Log ; ; local sequence =&gt; [10, 20, 30, 40]\nPop(Name: seq) | Log ; ; pops the last element as output =&gt; 40\nGet(seq) | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/PopFront/","title":"PopFront","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The element popped from the sequence. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Pops (removes and outputs) the first element of the sequence variable. Works only on sequences. If the variable is not a sequence or the sequence is empty, an error is thrown.</p>"},{"location":"shards/shards/General/PopFront/#examples","title":"Examples","text":"Code <pre><code>; ; pop first element from a local sequence\n[10 20 30 40] &gt;= seq ; ; create a local sequence\nGet(seq) | Log ; ; local sequence =&gt; [10, 20, 30, 40]\nPopFront(Name: seq) | Log ; ; pops the first element as output =&gt; 10\nGet(seq) | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Pow/","title":"Pow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The base value to raise the power of. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of raising the input to the power of the operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard raises the input to the power of the exponent specified in the Operand parameter.</p> <p> </p>"},{"location":"shards/shards/General/PremultiplyAlpha/","title":"PremultiplyAlpha","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The image to apply the premultiplication of alpha channels to. <code>Image</code> <code>Output \u27a1\ufe0f</code> The image as a result of the application of the premultiplication of alpha channels. <code>Image</code> <p>Applies the premultiplication of alpha channels of an image to its RGB channels. Does nothing if the image has already been premultiplied in Shards. This mainly applies to PNG images.</p> <p> </p>"},{"location":"shards/shards/General/PrependTo/","title":"PrependTo","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to prepend to the collection. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>Collection</code>  No The collection to add the input to. <code>none</code> <code>Var([Any])</code><code>Var(String)</code><code>Var(Bytes)</code> <p>Prepends the input to the context variable passed to <code>Collection</code>.</p>"},{"location":"shards/shards/General/PrependTo/#examples","title":"Examples","text":"Code <pre><code>;; prepend element to sequence\n[1 2 3] &gt;= seq\n0 | PrependTo(seq) ;; prepends element to sequence\nseq (Log) ;; updated sequence =&gt; [0, 1, 2, 3]\n\n;; prepend character to string\n\"pen\" &gt;= str\n\"O\" | PrependTo(str) ;; prepends character to string\nstr (Log) ;; updated string =&gt; Open\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Profile/","title":"Profile","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard will be provided as input to the shards in the Action parameter. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be the output of the shards in the Action parameter. <code>Any</code> <code>Action</code>  No The action shards to profile. <code>none</code> <code>Shard</code><code>[Shard]</code> <code>Label</code>  No The label to print when outputting time data. <code>&lt;no label&gt;</code> <code>String</code> <p>This shard outputs the amount of time(nanoseconds) it took to execute the shards provided in the Action parameter.</p> <p> </p>"},{"location":"shards/shards/General/Push/","title":"Push","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to push into the sequence. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to write in the table (parameter applicable only if the target variable is a table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <code>Clear</code>  No Whether to clear this sequence at every wire iteration. This only works if it's the first push. The default is true. <code>true</code> <code>Bool</code> <p>Pushes a new value into a sequence variable. If the variable does not exist, it will be created.</p>"},{"location":"shards/shards/General/Push/#details","title":"Details","text":"<p><code>Push</code> updates sequences and tables by pushing elements and/or sequences into them.</p> <p>The name of the variable to update should come from the <code>Name</code> parameter and the new update value(s) should come from the shard's input.</p> <p>For existing sequences <code>Push</code> pushes in the new elements. If a sequence doesn't exist then <code>Push</code> will create it while pushing in the first element. These elements may be string constants, numerics, or even sequences themselves.</p> <p>For tables <code>Push</code> can update only those existing keys whose values are of the type sequence. In such cases <code>Push</code> can push in new elements in those key-value pair sequences. The key to be updated must be passed in via the <code>Key</code> parameter.</p> <p>[!NOTE] 1. Do not use <code>Push</code> to update any variables created by <code>Set</code> (or its aliases <code>&gt;=</code>). <code>Push</code> is best used to update variables that were themselves created by <code>Push</code> (first push). 2. Though, if you really want to do (1.) you can offload the current sequence into another sequence variable, push new values into it, and update the table with this sequence variable (see the last code example).</p> <p>The <code>Global</code> parameter controls whether the created variables can be referenced across wires (<code>Global</code> set to <code>true</code>) or only within the current wire (<code>Global</code> set to <code>false</code>, default behavior).</p> <p>Variables may be locally scoped (created with <code>Global: false</code>; exists only for current wire) or globally scoped (created with <code>Global: true</code>; exists for all wires of that mesh). Hence, in update mode (i.e. when you apply <code>Push</code> to an existing variable) the <code>Global</code> parameter is used in conjunction with the <code>Name</code> parameter to identify the correct variable to update.</p> <p>The parameter <code>Clear</code> controls whether we should clear out this sequence after every wire iteration (<code>Clear</code> set to <code>true</code>, default behavior) or should the sequence data persist across wire iterations (<code>Clear</code> set to <code>false</code>).</p> <p>The input to this shard is the new update value that is to be pushed into the sequence/table being modified. This value is also passed through as this shard's output.</p> <p>[!NOTE] <code>Push</code> has one alias: <code>&gt;&gt;</code> which is equal to <code>Push(... Clear: true)</code>.</p>"},{"location":"shards/shards/General/Push/#examples","title":"Examples","text":"Code <pre><code>; ; create and update sequence with `| Push`; value available only to current wire\n1 | Push(Name: seq1) ; ; create a sequence by | Pushing the first element\nseq1 | Log(\"seq1\") ; ; sequence created =&gt; [1]\n2 | Push(Name: seq1) ; ; | Push one more element into sequence\nseq1 | Log(\"seq1\") ; ; sequence updated =&gt; [1, 2]\n\n; ; Update an existing sequence  with `| Push`; value available to all wires on mesh\n[10 20] | Set(Name: seq2 Global: true) ; ; create sequence with two elements\nseq2 | Log(\"seq2\") ; ; sequence created =&gt; [10, 20]\n30 | Push(Name: seq2 Global: true) ; ; | Push one more element into sequence\nseq2 | Log(\"seq2\") ; ; sequence updated =&gt; [10, 20, 30]\n\n; ; create empty sequence with `Sequence`; add elements with `| Push`\nSequence(Name: seq3) ; ; create empty sequence\nseq3 | Log(\"seq3\") ; ; empty sequence created =&gt; []\n1 | Push(Name: seq3 Clear: false) ; ; | Push an element into sequence\nseq3 | Log(\"seq3\") ; ; sequence updated =&gt; [1]               \n2 | Push(Name: seq3 Clear: false) ; ; | Push another element into sequence\nseq3 | Log(\"seq3\") ; ; sequence updated =&gt; [1, 2]    \n\n; ; create empty table with `Table`; add/update key sequence values with `| Push`\nTable(Name: table1) ; ; created an empty table (one key, no value)\ntable1 | Log ; ; table with one key (no value) created =&gt; {A: []}\n1 | Push(table1 \"A\") ; ; | Push new key \"A\" with sequence value \"[1]\"\ntable1 | Log ; ; table key/value updated =&gt; {A: [1]}\n2 | Push(table1 \"A\") ; ; | Push new element into key \"A\" existing sequence\ntable1 | Log ; ; table key/value updated =&gt; {A: [1, 2]}\n\n; ; Using a `| Push` alias: `&gt;&gt;` is alias for `| Push(Clear: true)` \n\"Hello\" &gt;&gt; seq4 ; ; create sequence by | Pushing the first element\nseq4 | Log(\"seq4\") ; ; sequence created =&gt; [Hello]\n\"World\" &gt;&gt; seq4 ; ; update the sequence by | Pushing one more element\nseq4 | Log(\"seq4\") ; ; sequence updated with second element =&gt; [Hello, World]\n\n; ; Technique to update a non-| Push created Table's sequence values with `| Push`\n{k1: [1 2 3]} &gt;= table2 ; ; table is created using `Set`\ntable2 | Log ; ; table with key/value pair created =&gt; {k1: [1 2 3]}\nGet(table2 \"k1\") &gt;= seqvar ; ; target value offloaded into a sequence variable\n4 | Push(seqvar) ; ; update sequence variable using `| Push`\nseqvar | Log ; ; sequence variable updated =&gt; [1, 2, 3, 4] \n{k1: seqvar} &gt;= table2 ; ; update table key sequence value with modified sequence variable                      \ntable2 | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/RLimit/","title":"RLimit","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input sequence to truncate. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The truncated sequence containing the last 'Max' elements, or a single element if Max is 1. <code>Any</code> <code>Max</code>  No The maximum number of elements to take from the end of the input sequence. <code>0</code> <code>Int</code> <p>This shard truncates the input sequence to the last specified number of elements (Max) and outputs the truncated sequence. If Max is set to 1, it outputs a single element.</p> <p> </p>"},{"location":"shards/shards/General/RTake/","title":"RTake","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The sequence from which elements will be extracted. <code>Bytes</code><code>String</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The extracted elements. <code>Any</code> <code>Indices</code>  No One or more indices (counted backwards from the last element) to extract from a sequence. <code>none</code> <code>Int</code><code>[Int]</code><code>Var(Int)</code><code>Var([Int])</code> <p>Works exactly like <code>Take</code> except that the selection indices are counted backwards from the last element in the target sequence. Also, <code>RTake</code> works only on sequences, not on tables.</p>"},{"location":"shards/shards/General/RTake/#examples","title":"Examples","text":"Code <pre><code>; ; RTake on sequences\n[10 20 30 40] | RTake(1) | Log\nAssert.Is(30 Break: true)\n[10 20 30 40] | RTake([0 1]) | Log\nAssert.Is([40 30] Break: true)\n\n; ; RTake not valid on tables\n\n; ; RTake using a variable as index\n1 = index\n[1 2 3 4] | RTake(index) | Log\nAssert.Is(3 Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/RadiansToDegrees/","title":"RadiansToDegrees","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float value representing an angle in radians. <code>Float</code> <code>Output \u27a1\ufe0f</code> Outputs a float value representing the input angle in degrees. <code>Float</code> <p>This shard converts the input angle from radians to degrees. The conversion is done using the formula: degrees = radians * (180 / \u03c0).</p> <p> </p>"},{"location":"shards/shards/General/RandomBytes/","title":"RandomBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a random sequence of bytes. <code>Bytes</code> <code>Size</code>  No The amount of bytes to output. <code>32</code> <code>Int</code> <p>This shard generates a random sequence of bytes. The size of the sequence is specified in the Size parameter.</p> <p> </p>"},{"location":"shards/shards/General/RandomFloat/","title":"RandomFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a random float. <code>Float</code> <code>Max</code>  No The maximum (if integer, not including) value to output. <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <p>This shard generates a random float between 0 and the maximum value specified in the Max parameter (exclusive).</p> <p> </p>"},{"location":"shards/shards/General/RandomInt/","title":"RandomInt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a random integer. <code>Int</code> <code>Max</code>  No The maximum (if integer, not including) value to output. <code>none</code> <code>None</code><code>Int</code><code>Var(Int)</code> <p>This shard generates a random integer between 0 (inclusive) and the maximum value specified in the Max parameter (exclusive).</p> <p> </p>"},{"location":"shards/shards/General/Recur/","title":"Recur","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> After the first cycle of Recur, the output of the Wire that calls Recur will be fed back as input for the next cycle. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of Recur will be the output of the Wire that calls it. <code>Any</code> <p>The Recur shard executes the Wire that calls it recursively, using the output of the Wire as input again, until the base cases are reached. It then combines the results to produce the final result. For the shard not to Recur endlessly, a base case needs to be defined, usually through a When or If shard.</p>"},{"location":"shards/shards/General/Recur/#examples","title":"Examples","text":"Code <pre><code>@wire(fibo {\n  &gt;= n\n  If(IsLess(2)\n    Then: {Pass}\n    Else: {n | Math.Subtract(2) (Recur) &gt;= a\n      n | Math.Subtract(1) (Recur) &gt;= b\n      a | Math.Add(b)\n    }\n  )\n})\n\n@wire(main-wire {\n  16\n  Do(fibo)\n  Log(\"Result\")\n  Assert.Is(987 true)\n})\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Reduce/","title":"Reduce","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The sequence to reduce. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The resulting value after applying the operation to each item of the sequence. <code>Any</code> <code>Apply</code>  No The function to apply to each item of the sequence. <code>none</code> <code>Shard</code><code>[Shard]</code> <p>Reduces a sequence to a single value by applying an operation (specified in the Apply parameter) to each item of the sequence. Note that this shard is able to use the $0 internal variable for the current item and $i for the current index.</p>"},{"location":"shards/shards/General/Reduce/#details","title":"Details","text":"<p>This shard is able to use a special temporary variable <code>$0</code> which acts as an Accumulator which will hold the intermediate result during the reduction process.</p> <p>For example consider the following: <code>[1 2 3 4 5] | Reduce(Math.Subtract($0))</code></p> <p>This shard will be processed as follows: - Each element of the sequence will be passed as input to Math.Subtract and the Accumulator($0) will be subtracted from it. - The result will then be set as the new value of the Accumulator($0). - First, $0 is initialized with the first element of the sequence: $0 = 1 - 2 - 1 = 1 ($0 then becomes 1) - 3 - 1 = 2 ($0 then becomes 2) - 4 - 2 = 2 ($0 then becomes 2) - 5 - 2 = 3 ($0 then becomes 3) - The final value of <code>$0</code> is then returned.</p> <p>Do note that this instance of <code>$0</code> is unique to the Reduce shard and do not exist outside of the context of its <code>Apply</code> parameter. Values set to this instance of <code>$0</code> will not be reflected on other <code>$0</code> created in a different call of another Reduce shard or any other shard that is also able to use <code>$0</code>.</p> <p> </p>"},{"location":"shards/shards/General/Ref/","title":"Ref","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to be set to the variable. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value is passed through as the output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <code>Overwrite</code>  No If the variable should be overwritten if it already exists. <code>false</code> <code>Bool</code> <p>Creates an immutable reference variable. Once created this variable cannot be changed.</p>"},{"location":"shards/shards/General/Ref/#examples","title":"Examples","text":"Code <pre><code>; ; create an immutable string variable (by default available only to current wire)\n\"Hello\" | Ref(Name: svar)\nsvar | Log(\"svar\") ; ; =&gt; svar: Hello\n\n; ; uncomment next line to see the immutable-variable-update error\n; ; 20 | Update(svar)\n; ; =&gt; Error composing shard: Set/Ref/Update, attempted to write an immutable variable.\n\n; ; create an immutable numeric variable (available to all wires because `Global: true`)\n100 | Ref(Name: nvar Global: true)\nnvar | Log(\"nvar\") ; ; =&gt; nvar: 100\n\n; ; create an immutable sequence\n[10 20] | Ref(Name: seq)\nseq | Log(\"seq\") ; ; =&gt; seq: [10, 20]\n\n; ; create an immutable table\nConst([\"a\" \"b\"]) | Ref(Name: \"table\" Key: \"key1\")\ntable | Log(\"table\") ; ; =&gt; table: {key1: [a, b]}\n\n; ; Using `Ref` aliases\n\n; ; `=` is alias for `| Ref(Global: false)`: create an immutable string variable: \n\"World\" = svarA\nsvarA | Log(\"svarA\")\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Remove/","title":"Remove","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Output is the filtered sequence. <code>[Any]</code> <code>From</code>  No The name of the sequence variable to edit in place. <code>none</code> <code>Var([Any])</code> <code>Join</code>  No Other columns to join sort/filter using the input (they must be of the same length). <code>none</code> <code>Var([Any])</code><code>[Var([Any])]</code> <code>Predicate</code>  No The shards to use as predicate, if true the item will be popped from the sequence. <code>none</code> <code>Shard</code><code>[Shard]</code> <code>Unordered</code>  No Turn on to remove items very quickly but will not preserve the sequence items order. <code>false</code> <code>Bool</code> <p>Removes all elements from a sequence that match the given condition. Can also take these matched indices and remove corresponding elements from a joined sequence.</p>"},{"location":"shards/shards/General/Remove/#details","title":"Details","text":"<p><code>Remove</code> removes all the elements of the <code>Name</code> parameter sequence that matches the condition laid out in the <code>Predicate</code> parameter.</p> <p>It can also take these condition-matched indices (from the <code>From</code> sequence) and remove the corresponding elements from a joined sequence (passed via the <code>Join</code> parameter). Remember, <code>Remove</code> doesn't apply the <code>Predicate</code> conditions to the joined sequence, but removes corresponding elements from it based on <code>Predicate</code> matched indices of the main sequence. For this to work both the sequences must have the same length.</p> <p>[!NOTE] Think of this as the Shards equivalent of a relational database inner join. The main sequence and the joined sequence can be thought of as columns from two different tables inner joined over indices equality. So that the changes in elements of one sequence (rows in the first table) can be propagated to the corresponding elements of the joined sequence (corresponding rows in the joined table).</p> <p>In this case the operation is deletion of selected elements (selected rows) from one sequence (table) leading to deletion of corresponding elements (connected rows) of the joined sequence (joined table).</p> <p>The <code>Predicate</code> parameter can take any conditional/logical expression or combination of shards that will result in assertion that can be tested on the sequence elements.</p> <p>The <code>Unordered</code> parameter can be set to <code>true</code> if you need to make the removal process faster, but then the order of the remaining elements in the resulting sequence elements may not be preserved. By default, this order is preserved.</p> <p><code>Remove</code> works only on sequences.</p> <p>Any input to this shard is ignored and its output is the main filtered sequence.</p>"},{"location":"shards/shards/General/Remove/#examples","title":"Examples","text":"Code <pre><code>; ; remove predicate-satisfying elements from From: sequence\n[10 20 30] &gt;= seq1\nRemove(\n  From: seq1\n  Predicate: IsMore(20)\n  Unordered: false\n)\nLog(\"output\") ; ; =&gt; output: [10, 20]\nseq1 | Log(\"seq1\") ; ; index-2 element matched, removed =&gt; seq1: [10, 20]\n\n; ; remove corresponding index elements from Join: sequence\n[10 20 30] &gt;= seq2\n[100 200 300] &gt;= seqJ\nRemove(seq2 Predicate: Is(20) Join: seqJ)\nseq2 | Log(\"seq2\") ; ; index-1 element matched, removed from seq2 =&gt; seq2: [10, 30]\nseqJ | Log(\"seqJ\") ; ; matched index-1 element removed from seqJ  =&gt; seqJ: [100, 300]\n\n; ; remove with Unordered: true (faster but sequence items order may not be preserved)\n[[20 30] [30 40] [40 50]] &gt;= seq3\nRemove(seq3 Predicate: {Take(0) | IsLess(30)} Unordered: true)\nseq3 | Log(\"seq3\")\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Repeat/","title":"Repeat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input will be passed to both the action and the <code>Until</code> condition if used. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Action</code>  No The shards to repeat. <code>none</code> <code>Shard</code><code>[Shard]</code> <code>Times</code>  No How many times we should repeat the action. <code>none</code> <code>Int</code><code>Var(Int)</code><code>None</code> <code>Forever</code>  No If we should repeat the action forever. <code>false</code> <code>Bool</code> <code>Until</code>  No Optional shards to use as predicate to continue repeating until it's true <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Repeat an action a given number of times or until the 'Until' parameter returns true.</p>"},{"location":"shards/shards/General/Repeat/#examples","title":"Examples","text":"Code <pre><code>0 &gt;= n\nRepeat({\n    n | Log(\"Counting\")\n    Math.Inc(n)\n  }\n  Forever: true\n  Until: {n | IsMore(9)}\n)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>Repeat({\n  Msg(\"Hello\")\n}\nTimes: 5)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Replace/","title":"Replace","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input sequence or string to be modified. <code>[Any]</code><code>String</code> <code>Output \u27a1\ufe0f</code> Outputs the resulting sequence or string with the replacements applied. <code>[Any]</code><code>String</code> <code>Patterns</code>  No The patterns to find represented as a sequence. <code>none</code> <code>None</code><code>[String]</code><code>Var([String])</code><code>Var([Any])</code><code>[Any]</code> <code>Replacements</code>  No The corresponding replacements to apply to the input, if a single value is provided every match will be replaced with that single value. <code>none</code> <code>None</code><code>Any</code><code>Var(Any)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard replaces all occurrences of the pattern(specified in the Patterns parameter) found in the input sequence or string, with replacements (specified in the Replacements parameter).</p>"},{"location":"shards/shards/General/Replace/#details","title":"Details","text":"<p>The sequence provided in the <code>Replacements</code>parameter can only be a sequence containing a single element or a sequence of the same length as the <code>Patterns</code> parameter.</p> <p>If the <code>Replacements</code> sequence has more than 1 element, each element in the <code>Patterns</code> sequence is a pattern to be matched against and will be replaced with the corresponding element in the <code>Replacements</code> sequence. Eg. <code>\"Hello World\" | Replace(Patterns: [\"Hello\", \"World\"], Replacements: [\"Hi\", \"Universe\"])</code> will replace <code>\"Hello\"</code> with <code>\"Hi\"</code> and World with Universe, thus returning <code>\"Hi Universe\"</code>.</p> <p>If the <code>Replacements</code> sequence has only 1 element, that element will be used to replace all occurrences of the patterns in the <code>Patterns</code> sequence. Eg. <code>\"Hello World\" | Replace(Patterns: [\"Hello\", \"World\"], Replacements: [\"Hi\"])</code> will replace <code>\"Hello\"</code> with <code>\"Hi\"</code> and <code>\"World\"</code> with <code>\"Hi\"</code>, thus returning <code>\"Hi Hi\"</code>.</p> <p> </p>"},{"location":"shards/shards/General/ResizeImage/","title":"ResizeImage","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The image to resize. <code>Image</code> <code>Output \u27a1\ufe0f</code> The resized image. <code>Image</code> <code>Width</code>  No The target width. <code>32</code> <code>Int</code><code>Var(Int)</code> <code>Height</code>  No The target height. <code>32</code> <code>Int</code><code>Var(Int)</code> <p>This shard resizes an image to the specified dimensions specified in the Width and Height parameters.</p> <p> </p>"},{"location":"shards/shards/General/Restart/","title":"Restart","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input to restart the wire with. Must match the wire's root input type. <code>Any</code> <code>Output \u27a1\ufe0f</code> This shard does not produce an output as it restarts the flow. <code>None</code> <p>Restarts the current flow with the provided input. This shard is used to restart the execution of the current wire from the beginning, using the same input. It ensures that the input type matches the wire's root input type. Note: This is a flow stopper and will not continue to subsequent shards in the current execution sequence.</p> <p> </p>"},{"location":"shards/shards/General/Resume/","title":"Resume","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input value will pass through unchanged. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Wire</code>  No The Wire to resume. <code>none</code> <code>Wire</code><code>String</code><code>None</code><code>Var(Wire)</code> <p>Resumes another Wire (previously paused using Suspend).</p>"},{"location":"shards/shards/General/Resume/#examples","title":"Examples","text":"Code <pre><code>@wire(add-progress {\n\n  Once({\n    progress-stat | Math.Add(1.0) &gt; progress-stat\n  } 1.0)\n\n\n\n  progress-stat\n  When(Predicate: Is(5.0) Action: {; ; add progress will suspend once progress-stat reaches 5\n    Once({\n      Suspend\n    })\n  })\n} Looped: true)\n\n@wire(main-wire {\n\n  Once({; ; initialize variables and detach the add-progress wire\n    0.0 | Set(progress-stat Global: true)\n    0.0 | Set(resume-timer)\n    Detach(add-progress)\n  })\n\n  Once({\n    progress-stat\n    Log(\"Progress\")\n\n    resume-timer | Math.Add(1.0) &gt; resume-timer\n    Log(\"Resume Timer\")\n  } 1.0)\n\n  resume-timer\n  When(Predicate: Is(10.0) Action: {\n    Resume(add-progress) ; ;When resume-timer reaches 10, it will Resume add-progress wire which was previously suspended\n  })\n} Looped: true)\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Return/","title":"Return","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input to return (when supported) and stop the flow. <code>Any</code> <code>Output \u27a1\ufe0f</code> This shard does not produce an output as it stops the flow. <code>None</code> <p>Stops the current flow and outputs the provided input. This shard is used to exit the execution of the current wire early within loops or conditional flows, returning the specified input.</p> <p> </p>"},{"location":"shards/shards/General/Reverse/","title":"Reverse","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input sequence or string to be reversed. <code>[Any]</code><code>String</code><code>Bytes</code> <code>Output \u27a1\ufe0f</code> Outputs the reversed sequence or string. <code>[Any]</code><code>String</code><code>Bytes</code> <p>This shard reverses the order of the elements in the input sequence or string.</p> <p> </p>"},{"location":"shards/shards/General/Sequence/","title":"Sequence","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to write in the table (parameter applicable only if the target variable is a table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <code>Clear</code>  No If we should clear this sequence at every wire iteration; works only if this is the first push; default: true. <code>true</code> <code>Bool</code> <code>Type</code>  No The sequence type to forward declare. <code>none</code> <code>None</code><code>Type</code> <p>Creates an empty sequence (or sequence in a table if a key is passed). Useful to declare and specify types.</p>"},{"location":"shards/shards/General/Sequence/#details","title":"Details","text":"<p><code>Sequence</code> creates an empty sequence when the <code>Key</code> parameter is not set. If a key is passed via this parameter <code>Sequence</code> creates an empty table instead (behaving like the <code>Table</code> shard). The created sequence name is defined in the <code>Name</code> parameter.</p> <p>This shard can control the scope of the created sequence variable. A <code>true</code> value for the <code>Global</code> parameter makes the scope of the sequence global (available to all wires on the mesh), and a <code>false</code> value makes the scope local (available only to the wire its defined in).</p> <p>By default a sequence created with this shard would be cleared (emptied) every time the wire is executed (since <code>Clear</code> is <code>true</code> by default). To retain the sequence values across wire iterations set the <code>Clear</code> parameter to <code>false</code>.</p> <p>This shard can also define the sequence's inner data types via the <code>Types</code> parameter. More than one data type may be set.</p> <p>Any input to this shard is ignored and instead passed through as its output.</p>"},{"location":"shards/shards/General/Sequence/#examples","title":"Examples","text":"Code <pre><code>; ; without key, without types, local scope, Clear: true, using `Push`\nSequence(Name: seqA)\nseqA | Log ; ; created an empty sequence =&gt; []\n1 | Push(seqA)\nseqA | Log ; ; updated sequence =&gt; [1]\n2 | Push(seqA)\nseqA | Log ; ; updated sequence =&gt; [1, 2]\n\n; ; with key (becomes table), single type, global scope, Clear: true, using `Set`\nSequence(seqB Key: \"A\" Global: true Type: @type([Type::Float]))\nseqB | Log ; ; created an empty table =&gt; {A: []}\n10.2 | Set(seqB \"A\")\nseqB | Log ; ; updated table =&gt; {A: 10.2}\n20.1 | Set(seqB \"A\")\nseqB | Log ; ; updated table =&gt; {A: 20.1}\n\n; ; without key, multiple types, local scope, Clear: false, using `Push`\nSequence(seqC Type: @type([Type::Float Type::Int]) Clear: false)\nseqC | Log ; ; created an empty sequence =&gt; []\n10.3 | Push(seqC)\nseqC | Log ; ; updated sequence =&gt; [10.3]\n20 | Push(seqC)\nseqC | Log ; ; updated sequence =&gt; [10.3, 20]\n\n; ; with key (becomes table), single type, local scope, Clear: true, using `Push`\n; ; Sequence(seqD Key: \"A\" Type:s Type.Int)\n; ; seqD | Log             ;; created an empty table =&gt; {A: []}\n10 | Push(seqD \"A\")\nseqD | Log ; ; updated table =&gt; {A: [10]}\n20 | Push(seqD \"A\")\nseqD | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Set/","title":"Set","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to be set to the variable. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value is passed through as the output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to write in the table (parameter applicable only if the target variable is a table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <code>Tracked</code>  No If the variable should be marked as tracked. <code>false</code> <code>Bool</code> <p>Creates a mutable variable and assigns a value to it.</p>"},{"location":"shards/shards/General/Set/#details","title":"Details","text":"<p><code>Set</code> creates a mutable variable and assigns a value to it. Once created this variable can be modified.</p> <p>The name of the variable comes from the <code>Name</code> parameter and the variable value comes from the input. The type of input controls the kind of variable that will created: numeric input creates numeric variable, string input creates string variable, and sequence input would create a sequence variable.</p> <p>To create a table variable, along with the input, you also have to pass the key in the <code>Key</code> parameter. In this case the input (whatever it may be - numeric, string, sequence) becomes the value of the key that was passed in parameter <code>Key</code>.</p> <p>The <code>Global</code> parameter controls whether the created variables can be referenced across wires (<code>Global</code> set to <code>true</code>) or only within the current wire (<code>Global</code> set to <code>false</code>, default behavior).</p> <p>Though it will generate a warning <code>Set</code> can also be used to update existing variables (like adding a new key-value pair to an existing table).</p> <p>[!NOTE] Do not use <code>Push</code> to update any variables created by <code>Set</code> (or its aliases <code>&gt;=</code>). Such variables are best best updated by <code>Set</code> itself (all types of variables) or <code>AppendTo</code> (only sequences and string variables).</p> <p>Variables may be locally scoped (created with <code>Global: false</code>; exists only for current wire) or globally scoped (created with <code>Global: true</code>; exists for all wires of that mesh). Hence, in update mode (i.e. when you apply <code>Set</code> to an existing variable) the <code>Global</code> parameter is used in conjunction with the <code>Name</code> parameter to identify the correct variable to update.</p> <p>The input to this shard is used as the value for the variable being created and is also passed through as this shard's output.</p> <p>[!NOTE] <code>Set</code> has one alias: <code>&gt;=</code> meaning <code>Set(... Global: false)</code>.</p>"},{"location":"shards/shards/General/Set/#examples","title":"Examples","text":"Code <pre><code>; ; create a mutable string variable, modify it (by default available only to current wire)\n\"Hello\" | Set(Name: svar)\nsvar | Log(\"svar\") ; ; =&gt; svar: Hello\n\"World\" | Update(svar) ; ; modify string variable\nsvar | Log(\"modified svar\") ; ; =&gt; svar: World\n\n; ; create a mutable numeric variable, modify it (available to all wires because `Global: true`)\n100 | Set(Name: nvar Global: true)\nnvar | Log(\"nvar\") ; ; =&gt; nvar: 100\n200 | Update(nvar) ; ; modify numeric variable\nnvar | Log(\"modified nvar\") ; ; =&gt; modified nvar: 200\n\n; ; create a mutable sequence\n[10 20 30] | Set(Name: sequence)\nsequence | Log(\"sequence\") ; ; =&gt; sequence: [10, 20, 30]\n\n; ; create a mutable table\nConst([\"a\" \"b\"]) | Set(Name: table Key: \"key1\")\ntable | Log(\"table\") ; ; =&gt; table: {key1: [a, b]}\n\n; ; add a key-value pair to existing mutable table (will generate warnings)\n\"def\" | Set(table Key: \"key2\") ; ; add new key\ntable | Log(\"modified table\") ; ; =&gt; modified table: {key2: def, key1: [a, b]}\n\n; ; Using `Set` aliases\n\n; ; `&gt;=` is alias for `| Set(Global: false)`: create a mutable string variable\n\"World\" &gt;= svarA\nsvarA | Log(\"svarA\") ; ; =&gt; svarA: World\n\n; ; create and update local/global variables\n\"Local\" | Set(str) ; ; create local variable\n\"Global\" | Set(str Global: true) ; ; create same-name global variable\nGet(str) (Log) ; ; get updated local variable =&gt; \"Local\"\nGet(str Global: true) (Log) ; ; get same-name updated global variable =&gt; \"Global\"\n\"LocalNew\" | Set(str) ; ; create local variable\n\"GlobalNew\" | Set(str Global: true) ; ; create same-name global variable\nGet(str) (Log) ; ; get updated local variable =&gt; \"LocalNew\"\nGet(str Global: true) (Log)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/SetCounter/","title":"SetCounter","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code> <code>Name</code>  No The name of the counter. `` <code>String</code>"},{"location":"shards/shards/General/SetFlag/","title":"SetFlag","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bool</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Name</code>  No The name of the flag. `` <code>String</code>"},{"location":"shards/shards/General/SetLogLevel/","title":"SetLogLevel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A string representing the new log level (e.g., 'debug', 'info', 'warn', 'error', 'critical'). <code>String</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <p>This shard changes the log level to the level specified by the string passed as input. </p> <p> </p>"},{"location":"shards/shards/General/Shuffle/","title":"Shuffle","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input is passed through as the output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Shuffles the elements of the sequence variable. Works only on sequences. If the variable is not a sequence, it simply passes through without failing.</p> <p> </p>"},{"location":"shards/shards/General/Sin/","title":"Sin","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the sine of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the sine of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the sine of the given input, where the input is the angle in radians.</p> <p> </p>"},{"location":"shards/shards/General/Slice/","title":"Slice","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string or sequence from which characters/elements have to be extracted. <code>[Any]</code><code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The extracted characters/elements. <code>Any</code> <code>From</code>  No The position/index of the first character or element that is to be extracted (including). Negative position/indices simply loop over the target string/sequence counting backwards. <code>0</code> <code>Int</code><code>[Int]</code><code>Var(Int)</code><code>Var([Int])</code> <code>To</code>  No The position/index of the last character or element that is to be extracted (excluding). Negative position/indices simply loop over the target string/sequence counting backwards. <code>none</code> <code>Int</code><code>[Int]</code><code>Var(Int)</code><code>Var([Int])</code><code>None</code> <code>Step</code>  No The increment between each position/index. Chooses every nth sample to extract, where n is the increment. Value has to be greater than zero. <code>1</code> <code>Int</code> <p>Extracts characters from a string or elements from a sequence based on the start and end positions/indices and an increment parameter. Operation is non-destructive; the target string/sequence is not modified.</p>"},{"location":"shards/shards/General/Slice/#examples","title":"Examples","text":"Code <pre><code>; ; Slice on strings\n\"Hello World\" | Slice(From: 1 To: 3 Step: 1)\nLog ; ; =&gt; \"el\"\n\"Hello World\" | Slice(0 11 2)\nLog ; ; =&gt; \"HloWrd\"\n\n; ; Slice on sequences\n[10 20 30 40 50 60 70 80 90] | Slice(1 3 1)\nLog ; ; =&gt; [20, 30]\n[10 20 30 40 50 60 70 80 90] | Slice(0 7 3)\nLog ; ; =&gt; [10, 40, 70]\n[10 20 30 40 50 60 70 80 90] | Slice(-9 -2 3)\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Snowflake/","title":"Snowflake","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int</code> <code>MachineId</code>  No The machine ID, must be less than 32 <code>0</code> <code>Int</code> <code>NodeId</code>  No The node ID, must be less than 32 <code>0</code> <code>Int</code> <p>Creates a Snowflake ID.</p> <p> </p>"},{"location":"shards/shards/General/Sort/","title":"Sort","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Output is the sorted sequence. <code>[Any]</code> <code>From</code>  No The name of the sequence variable to edit in place. <code>none</code> <code>Var([Any])</code> <code>Join</code>  No Other columns to join sort/filter using the input (they must be of the same length). <code>none</code> <code>Var([Any])</code><code>[Var([Any])]</code> <code>Desc</code>  No If sorting should be in descending order, defaults ascending. <code>false</code> <code>Bool</code> <code>Key</code>  No The shards to use to transform the collection's items before they are compared. Can be None. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Sorts the elements of a sequence. Can also move around the elements of a joined sequence in alignment with the sorted sequence.</p>"},{"location":"shards/shards/General/Sort/#details","title":"Details","text":"<p><code>Sort</code> sorts all the elements of the sequence that has been passed to it in the <code>Name</code> parameter based on the value of the <code>Desc</code> parameter. If <code>Desc</code> is set to true the sequence is sorted in descending order, else it's sorted in the ascending order (which is the default behavior).</p> <p>This shard can also take final element order of the sorted sequence and apply that to a joined sequence (passed via the <code>Join</code> parameter). For example, if the element at index-7 moved to index-3 in the main sequence due to sorting then in the joined sequence too the element at index-7 would move to index-3. The movement of all elements in the main sequence (post-sort) would be mirrored in the joined sequence. For this to work both the sequences must have the same length.</p> <p>[!NOTE] Think of this as the Shards equivalent of a relational database inner join. The main sequence and the joined sequence can be thought of as columns from two different tables inner joined over indices equality. So that the changes in elements of one sequence (rows in the first table) can be propagated to the corresponding elements of the joined sequence (corresponding rows in the joined table).</p> <p>In this case the operation is changing of indices (position) of selected elements (selected rows) in one sequence (table) leading to an equivalent change of indices (position) of corresponding elements (connected rows) of the joined sequence (joined table).</p> <p>The <code>Key</code> parameter can take a shard or group of shards to transform the sequence elements before they're compared for sorting. This transformation doesn't actually change the value of the elements in the final sorted sequence (it's used only for sort comparisons).</p> <p><code>Sort</code> works only on sequences.</p> <p>Any input to this shard is ignored and its output is the main sorted sequence.</p>"},{"location":"shards/shards/General/Sort/#examples","title":"Examples","text":"Code <pre><code>; sort ascending (since default Desc: is false)\n[9 5 1 3 8] &gt;= seq1\nSort(From: seq1)\nseq1 | Log(\"seq1\") ; ; sorted ascending =&gt; seq1: [1, 3, 5, 8, 9]\n\n; sorting descending (Desc: set to true)\n[9 5 1 3 8] &gt;= seq2\nSort(seq2 Desc: true)\nseq2 | Log(\"seq2\") ; ; sorted ascending =&gt; seq2: [9, 8, 5, 3, 1]\n\n; ; sort ascending using a Key:\n[9 5 1 3 8] &gt;= seq3\nSort(seq3 Key: Math.Multiply(-1))\nseq3 | Log(\"seq3\") ; ; Key: transform makes it look like descending sort =&gt; seq3: [9, 8, 5, 3, 1]\n\n; ; sort ascending with a joined sequence\n[9 5 1 3 8] &gt;= seq4\n[\"a\" \"b\" \"c\" \"d\" \"e\"] &gt;= seqJ\nSort(seq4 Join: seqJ)\nseq4 | Log(\"seq4\") ; ; main sequence sorted in ascending order =&gt; seq4: [1, 3, 5, 8, 9]\nseqJ | Log(\"seqJ\")\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Spawn/","title":"Spawn","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input of this shard will be given as input for the specified Wire <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the specific copy of the Wire that was scheduled. <code>Wire</code> <code>Wire</code>  No The Wire to schedule and run asynchronously <code>none</code> <code>None</code><code>Wire</code><code>[Shard]</code> <p>Schedules the specified Wire and runs it asynchronously. The current Wire will continue its execution independently of the specified Wire. Unlike Detach, a copy of the specified Wire is scheduled every time the shard is called.</p>"},{"location":"shards/shards/General/Spawn/#details","title":"Details","text":"<p>The child wire scheduled makes copies of the context variables of the parent wire. Any changes to said variables will not be reflected on the parent wire.</p> <p>Child wire is scheduled asynchronously and executes independently of the parent wire. Any pauses on the child wire will not pause the parent wire.</p> <p>Child wire is scheduled on the same mesh as the parent wire.</p> <p>Multiple copies of the specified wire can be scheduled. Everytime spawn is called, it will create and schedule a new copy of the wire.</p>"},{"location":"shards/shards/General/Spawn/#examples","title":"Examples","text":"Code <pre><code>@wire(spawn-wire {Msg(\"Msg 1\")\n  Pause(1.0)\n  Msg(\"Msg 2\")\n  Pause(1.0)\n  Msg(\"Msg 3\")\n  Stop\n})\n\n@wire(main-wire {Once({Spawn(spawn-wire)})})\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Sqrt/","title":"Sqrt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the square root of. This value must be a positive number or sequence of positive numbers. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the square root of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the square root of the given input.</p> <p> </p>"},{"location":"shards/shards/General/Step/","title":"Step","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input of this shard will be given as input for the specified Wire <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Wire</code>  No The Wire to schedule and progress. <code>none</code> <code>Wire</code><code>String</code><code>None</code> <p>The first time Step is called, the specified wire is scheduled. On subsequent calls, the specified Wire's state is progressed before the current Wire continues its execution. This means that a pause in execution of the child Wire will not pause the parent Wire.</p>"},{"location":"shards/shards/General/Step/#details","title":"Details","text":"<p>The child wire scheduled inherits and uses the context variables of the parent wire. Any changes to said variables will also be reflected on the parent wire.</p> <p>Child wire is scheduled and executes inline. However, the shard will only progress the state of the wire with each call and relinquish control back to the parent wire if there is any pause or break in the wire's execution. This means that any pauses on the child wire will not pause the parent wire.</p> <p>Child wire is scheduled on the same mesh as the parent wire.</p>"},{"location":"shards/shards/General/Step/#examples","title":"Examples","text":"Code <pre><code>@wire(step-1 {\n  value-1 | Math.Subtract(1.0) &gt; value-1\n})\n\n@wire(main-wire {\n\n  Once({; ; initialize variables and detach the add-progress wire\n    100.0 | Set(value-1)\n    100.0 | Set(value-2)\n  })\n\n  Once({\n    Step(step-1)\n    value-1\n    Log(\"value-1\")\n  } 1.0)\n} Looped: true)\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Stop/","title":"Stop","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input value will either pass through unchanged or be ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> Depending on what is specified in the Passthrough parameter, this shard either outputs the input value, passed through unchanged or it outputs the output of the stopped Wire. Note that if it outputs the output of the stopped wire, it will be of Type::Any and thus should be checked or converted to the appropriate Type. <code>Any</code> <code>Wire</code>  No The Wire to stop. If none provided, the shard will stop the current Wire. <code>none</code> <code>Wire</code><code>String</code><code>None</code><code>Var(Wire)</code> <code>Passthrough</code>  No If set to true, outputs the input value, passed through unchanged. <code>true</code> <code>Bool</code> <p>Either stops the execution of a specified Wire or the current Wire.</p>"},{"location":"shards/shards/General/Stop/#examples","title":"Examples","text":"Code <pre><code>@wire(add-progress {\n\n  Once({\n    progress-stat | Math.Add(1.0) &gt; progress-stat\n  } 1.0)\n\n\n\n  progress-stat\n  When(Predicate: Is(5.0) Action: {; ; add-progress will stop once progress-stat reaches  5.0\n    Stop\n  })\n} Looped: true)\n\n@wire(main-wire {\n\n  Once({; ; initialize variables and detach the add-progress wire\n    0.0 | Set(progress-stat Global: true)\n    Detach(add-progress)\n  })\n\n  Once({\n    progress-stat\n    Log(\"Progress\")\n  } 1.0)\n} Looped: true)\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/StringToBytes/","title":"StringToBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A string to be converted to bytes. <code>String</code> <code>Output \u27a1\ufe0f</code> The byte representation of the input string. <code>Bytes</code> <p>Converts a string to its byte representation.</p> <p> </p>"},{"location":"shards/shards/General/StripAlpha/","title":"StripAlpha","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The image to remove the alpha channel from. <code>Image</code> <code>Output \u27a1\ufe0f</code> The image with the alpha channel removed. <code>Image</code> <p>This shard takes an image with 4 channels(RGBA) and converts it to a 3-channel(RGB) image with the alpha channel removed.</p>"},{"location":"shards/shards/General/StripAlpha/#details","title":"Details","text":"<p>If the input image only has 3 channels, the shard will return the image unchanged.</p> <p> </p>"},{"location":"shards/shards/General/Sub/","title":"Sub","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value or the sequence of values to subtract the value specified in the Operand parameter from. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> This shard outputs the result of the subtraction. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The value or sequence of values to subtract from the input. <code>0</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard subtracts the value provided in the Operand parameter from the input value.</p>"},{"location":"shards/shards/General/Sub/#examples","title":"Examples","text":"Code <pre><code>; ; Using `Sub`, with `-&gt;`\n5 ; ; input to `Sub` shards\nSub({Math.Multiply(2)\n  Log\n}) ; ; 5 * 2 =&gt; 10\nSub({Math.Multiply(3)\n  Log ; ; 5 * 3 =&gt; 15\n  Sub({Math.Multiply(2)\n    Log\n  })\n}) ; ; 15 * 2 =&gt; 30\nLog(\"output of the last `Sub` shard\") ; ; input is output =&gt; 5\n\n; ; Using '{}' as an alias for sub\n100 ; ; input to `|` shards\n{Math.Multiply(2)\n  Log\n} ; ; 100 * 2 =&gt; 200\n{Math.Multiply(3)\n  Log ; ; 100 * 3 =&gt; 300\n  {Math.Multiply(2)\n    Log\n  }\n} ; ; 300 * 2 =&gt; 600\nLog(\"output of the last `|` shard\")\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>5\nLog(\"input to Sub1\") ; ; =&gt; 5\nSub({\n  Math.Multiply(2)\n  Assert.Is(10 true)\n  Log(\"Sub1 inner shard o/p | 5 * 2\") ; ; =&gt; 10\n})\nLog(\"Sub1 output =&gt; input to Sub2\") ; ; =&gt; 5\nSub({\n  Math.Multiply(3)\n  Assert.Is(15 true)\n  Log(\"Sub2 inner shard o/p | 5 * 3\") ; ; =&gt; 15\n  Log(\"input to nested-Sub\") ; ; =&gt; 15\n  Sub({\n    Math.Multiply(2)\n    Assert.Is(30 true)\n    Log(\"nested-Sub inner shard o/p | (5 * 3) * 2\") ; ; =&gt; 30\n  })\n  Log(\"output from nested Sub\") ; ; =&gt; 15\n})\nLog(\"Sub2 output =&gt; output\")\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/SubFlow/","title":"SubFlow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input value passed to this Sub flow (and hence to the shard or sequence of shards in this Sub flow). <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this Sub flow (which is the same as its input). <code>Any</code> <code>Shards</code>  No The shard or sequence of shards to execute in the Sub flow. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Activates a shard or a sequence of shards independently, without consuming the input. I.e. the input of the Sub flow will also be its output regardless of the shards activated in this Sub flow.</p> <p> </p>"},{"location":"shards/shards/General/Suspend/","title":"Suspend","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input value will pass through unchanged. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Wire</code>  No The wire to pause. <code>none</code> <code>Wire</code><code>String</code><code>None</code><code>Var(Wire)</code> <p>Pauses a specified Wire's execution. If no Wire is specified, pauses the current wire.</p> <p> </p>"},{"location":"shards/shards/General/Swap/","title":"Swap","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>First</code>  No The name of first variable. <code>none</code> <code>Var(Any)</code> <code>Second</code>  No The name of second variable. <code>none</code> <code>Var(Any)</code> <p>Swaps the values of the two variables passed to it via <code>First</code> and <code>Second</code> parameters.</p>"},{"location":"shards/shards/General/Swap/#examples","title":"Examples","text":"Code <pre><code>\"Shards\" &gt;= string\n123 &gt;= number1\n456 &gt;= number2\n789 &gt;= number3\n[10 20] &gt;= sequence\n{\"k1\" | 1 | \"k2\" | 2} &gt;= table\n\nSwap(\n  First: number1\n  Second: number2\n) ; ; swap two numbers\nnumber1 | Log(\"number1\") ; ; swapped =&gt; number1: 456\nnumber2 | Log(\"number2\") ; ; swapped =&gt; number2: 123\n\nSwap(string table) ; ; swap a string and a table\nstring | Log(\"string\") ; ; swapped =&gt; string: {\"k1\" 1 \"k2\" 2}\ntable | Log(\"table\") ; ; swapped =&gt; table: \"Shards\"\n\nSwap(number3 sequence) ; ; swap a number and a sequence\nnumber3 | Log(\"number3\") ; ; swapped =&gt; number3:[10 20]\nsequence | Log(\"sequence\")\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/SwitchTo/","title":"SwitchTo","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input of this shard will be given as input for the specified Wire <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard is the output of the Wire that execution was switched to, upon switching back to the parent Wire. <code>Any</code> <code>Wire</code>  No The Wire to switch to. If none is provided, the Wire is switched back to the parent Wire it was switched from (should a parent Wire exist). <code>none</code> <code>Wire</code><code>String</code><code>None</code> <code>Restart</code>  No If the Wire should always restart from the beginning instead of resuming from its previous state. <code>false</code> <code>Bool</code> <p>Suspends the current Wire and switches execution to the specified Wire.</p> <p> </p>"},{"location":"shards/shards/General/Table/","title":"Table","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input to this shard is passed through as its output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to write in the table (parameter applicable only if the target variable is a table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <code>Type</code>  No The table type to forward declare. <code>none</code> <code>None</code><code>Type</code> <p>Creates an empty table. Useful to declare and specify types.</p>"},{"location":"shards/shards/General/Table/#details","title":"Details","text":"<p><code>Table</code> creates an empty table with or without a specified key (via the <code>Key</code> parameter). The created table name is defined in the <code>Name</code> parameter.</p> <p>Whether the created table variable has a global scope (available to all wires on the mesh) or a local scope (available only to the wire its defined in) can be controlled via the <code>Global</code> parameter (<code>true</code> for global scope, <code>false</code> for local scope; default is <code>false</code>).</p> <p>In addition to the key and the scope, this shard can also define the table's inner data types via the <code>Types</code> parameter. More than one data type may be set.</p> <p>Any input to this shard is ignored and instead passed through as its output.</p>"},{"location":"shards/shards/General/Table/#examples","title":"Examples","text":"Code <pre><code>; ; without key, without types, local scope, using `Push` (puts sequence values)\n; ; Table(:Name tableA)\n; ; tableA | Log        ;; created a table =&gt; {A: []}\n1 | Push(tableA \"A\")\ntableA | Log ; ; updated table =&gt; {A: [1]}\n2 | Push(tableA \"A\")\ntableA | Log ; ; updated table =&gt; {A: [1, 2]}\n\n; ; with key, single type, global scope, using `Set`\nTable(tableB Key: \"A\" Global: true Type: @type({A: Type::Float}))\ntableB | Log ; ; created a table =&gt; {A: {}}\n10.2 | Set(tableB \"A\")\ntableB | Log ; ; updated table =&gt; {A: 10.2}\n20.1 | Set(tableB \"A\")\ntableB | Log ; ; updated table =&gt; {A: 20.1}\n\n; ; with key, multiple types, local scope, using `Set`\nTable(tableC Key: \"A\" Type: @type({A: Type::Float B: Type::Int}))\ntableC | Log ; ; created a table =&gt; {A: {}}\n10.3 | Set(tableC \"A\")\ntableC | Log ; ; updated table =&gt; {A: 10.3}\n20 | Set(tableC \"B\")\ntableC | Log ; ; updated table =&gt; {B: 20, A: 10.3}\n\n; ; with key, single type, local scope, using `Push` (puts sequence values)\n; ; Table(tableD Key: \"A\" Type:s Type.Int)\n; ; tableD | Log        ;; created a table =&gt; {A: []}\n10 | Push(tableD \"A\")\ntableD | Log ; ; updated table =&gt; {A: [10]}\n20 | Push(tableD \"A\")\ntableD | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Take/","title":"Take","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The sequence or table from which elements or values will be extracted. <code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Bytes</code><code>Color</code><code>String</code><code>[Any]</code><code>{Any}</code> <code>Output \u27a1\ufe0f</code> The extracted elements from a sequence or values from a table. If the key cannot be established to exist at compose time, the output will be of type Any. <code>Any</code> <code>Indices/Keys</code>  No One or more indices or keys to extract from a sequence or table. <code>none</code> <code>Any</code><code>Var(Any)</code> <p>Extracts one or more elements from a sequence or values from a table using the provided indices or keys. This operation is non-destructive and does not modify the target sequence or table. If the key cannot be established to exist at compose time, the output will be of type Any.</p>"},{"location":"shards/shards/General/Take/#examples","title":"Examples","text":"Code <pre><code>; ; Take on sequences\n[10 20 30 40] | Take(1) | Log\nAssert.Is(20 Break: true)\n[10 20 30 40] | Take([1 2]) | Log\nAssert.Is([20 30] Break: true)\n\n; ; Take on tables\n{Hello: 10 World: 20} | Take(\"Hello\") | Log\nAssert.Is(10 Break: true)\n{Hello: 10 World: 20} | Take([\"World\" \"Hello\"]) | Log\nAssert.Is([20 10] Break: true)\n{Hello: 10 World: 20} | Take(\"Universe\") | Log\nAssert.Is(nil Break: true)\n{abc: 10 def: 20} | Take(\"def\") | Log\nAssert.Is(20 Break: true)\n\n; ; Take using a variable as index\n1 = index\n[1 2 3 4] | Take(index) | Log\nAssert.Is(2 Break: true)\n\"Hello\" = key\n{Hello: 10 World: 20} | Take(key) | Log\nAssert.Is(10 Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/Tan/","title":"Tan","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the tangent of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the tangent of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the tangent of the given input, where the input is the angle in radians.</p> <p> </p>"},{"location":"shards/shards/General/TargetCamera/","title":"TargetCamera","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{pivot: Float3 distance: Float rotation: Float2}</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{pivot: Float3 distance: Float rotation: Float2}</code> <code>FlySpeed</code>  No Controls fly speed with the keyboard <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>ScrollSpeed</code>  No Controls middle mouse movement speed <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>PanSpeed</code>  No Controls middle mouse pan speed <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>LookSpeed</code>  No Controls right mouse look speed <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>PivotDistance</code>  No Controls distance to the point being looked at <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <p>Provides editor free camera controls</p> <p> </p>"},{"location":"shards/shards/General/Tensor/","title":"Tensor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Int]</code><code>[Float]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Tensor</code> <code>Shape</code>  No The shape of the tensor to create. If not provided, the shape will be inferred from the input. <code>none</code> <code>[Int]</code><code>Var([Int])</code> <code>Type</code>  No The data type of the tensor to create. If not provided, the data type will be inferred from the input. <code>TensorType::F32</code> <code>TensorType</code> <code>GPU</code>  No If true, the tensor will be created on the GPU (if available). <code>false</code> <code>Bool</code> <p>Creates a tensor from a sequence (or nested sequences) of variables.</p> <p> </p>"},{"location":"shards/shards/General/ToAny/","title":"ToAny","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Converts the input to any type <code>Any</code> <code>Output \u27a1\ufe0f</code> The same value as the input but typed as Any. <code>Any</code> <p>Converts an integer, bytes, or string value into its hexadecimal string representation.</p> <p> </p>"},{"location":"shards/shards/General/ToBase58/","title":"ToBase58","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The byte array or string to encode. <code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> Outputs the base58 encoded string. <code>String</code> <p>This shard encodes the input(either a byte array or a string) into a base58 encoded string.</p> <p> </p>"},{"location":"shards/shards/General/ToBase64/","title":"ToBase64","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts a byte array or a string value as input. <code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> Outputs the Base64 encoded string representation of the input value. <code>String</code> <p>Encodes the input bytes or string value to its Base64 string representation.</p> <p> </p>"},{"location":"shards/shards/General/ToBytes/","title":"ToBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard will take any value. <code>Any</code> <code>Output \u27a1\ufe0f</code> This shard will return a seriliazed byte array representing the input value. <code>Bytes</code> <p>This shard takes a value and converts it to a serialized binary representation (a serialized byte array).</p> <p> </p>"},{"location":"shards/shards/General/ToColor/","title":"ToColor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes input values of type <code>Int</code>, <code>Float</code>, <code>String</code>, or a collection  of <code>Int</code>s and <code>Float</code>s. Note that the shard can only convert strings that represent numerical values, such as \"5\", and not words like \"Five\". <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of four color channels (RGBA). <code>Any</code> <p>Converts various input types to a vector of four color channels (RGBA). If a single value or a collection with less than 4 elements is provided, the remaining unaccounted elements in the resulting vector will be set to 0.</p> <p> </p>"},{"location":"shards/shards/General/ToFloat/","title":"ToFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes input values of type <code>Int</code>, <code>Float</code>, <code>String</code>, or a collection  of <code>Int</code>s and <code>Float</code>s. Note that the shard can only convert strings that represent numerical values, such as \"5\", and not words like \"Five\". <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs a numerical value that can include a fractional or decimal component. <code>Any</code> <p>Converts various input types to type Float.</p>"},{"location":"shards/shards/General/ToFloat/#examples","title":"Examples","text":"Code <pre><code>1 | ToFloat | Log\nAssert.Is(1.0 Break: true)\n\n2.2 | ToFloat | Log\nAssert.Is(2.2 Break: true)\n\n\"3\" | ToFloat | Log\nAssert.Is(3.0 Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/ToFloat2/","title":"ToFloat2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes input values of type <code>Int</code>, <code>Float</code>, <code>String</code>, or a collection  of <code>Int</code>s and <code>Float</code>s. Note that the shard can only convert strings that represent numerical values, such as \"5\", and not words like \"Five\". <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of two Float elements. <code>Any</code> <p>Converts various input types to a vector of two Float elements. If a single value or a collection with only one element is provided, the second element in the resulting vector will be set to 0.</p> <p> </p>"},{"location":"shards/shards/General/ToFloat3/","title":"ToFloat3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes input values of type <code>Int</code>, <code>Float</code>, <code>String</code>, or a collection  of <code>Int</code>s and <code>Float</code>s. Note that the shard can only convert strings that represent numerical values, such as \"5\", and not words like \"Five\". <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of three Float elements. <code>Any</code> <p>Converts various input types to a vector of three Float elements. If a single value or a collection with less than 3 elements is provided, the remaining unaccounted elements in the resulting vector will be set to 0.</p> <p> </p>"},{"location":"shards/shards/General/ToFloat4/","title":"ToFloat4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes input values of type <code>Int</code>, <code>Float</code>, <code>String</code>, or a collection  of <code>Int</code>s and <code>Float</code>s. Note that the shard can only convert strings that represent numerical values, such as \"5\", and not words like \"Five\". <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of Four Float elements. <code>Any</code> <p>Converts various input types to a vector of Four Float elements. If a single value or a collection with less than 4 elements is provided, the remaining unaccounted elements in the resulting vector will be set to 0.</p> <p> </p>"},{"location":"shards/shards/General/ToHex/","title":"ToHex","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes an integer, byte array, or string value. <code>Int</code><code>Int16</code><code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The hexadecimal string representation of the input value. <code>String</code> <p>Converts an integer, bytes, or string value into its hexadecimal string representation.</p> <p> </p>"},{"location":"shards/shards/General/ToInt/","title":"ToInt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes input values of type <code>Int</code>, <code>Float</code>, <code>String</code>, or a collection  of <code>Int</code>s and <code>Float</code>s. Note that the shard can only convert strings that represent numerical values, such as \"5\", and not words like \"Five\". <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs a numerical whole number without any fractional or decimal component. <code>Any</code> <p>Converts various input types to type Int.</p>"},{"location":"shards/shards/General/ToInt/#examples","title":"Examples","text":"Code <pre><code>1 | ToInt | Log\nAssert.Is(1 Break: true)\n\n2.2 | ToInt | Log\nAssert.Is(2 Break: true)\n\n\"3\" | ToInt | Log\nAssert.Is(3 Break: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/ToInt16/","title":"ToInt16","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes input values of type <code>Int</code>, <code>Float</code>, <code>String</code>, or a collection  of <code>Int</code>s and <code>Float</code>s. Note that the shard can only convert strings that represent numerical values, such as \"5\", and not words like \"Five\". <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of sixteen Int elements. <code>Any</code> <p>Converts various input types to a vector of sixteen Int elements. If a single value or a collection with less than 16 elements is provided, the remaining unaccounted elements in the resulting vector will be set to 0.</p> <p> </p>"},{"location":"shards/shards/General/ToInt2/","title":"ToInt2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes input values of type <code>Int</code>, <code>Float</code>, <code>String</code>, or a collection  of <code>Int</code>s and <code>Float</code>s. Note that the shard can only convert strings that represent numerical values, such as \"5\", and not words like \"Five\". <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of two Int elements. <code>Any</code> <p>Converts various input types to a vector of two Int elements. If a single value or a collection with only one element is provided, the second element in the resulting vector will be set to 0.</p> <p> </p>"},{"location":"shards/shards/General/ToInt3/","title":"ToInt3","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes input values of type <code>Int</code>, <code>Float</code>, <code>String</code>, or a collection  of <code>Int</code>s and <code>Float</code>s. Note that the shard can only convert strings that represent numerical values, such as \"5\", and not words like \"Five\". <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of three Int elements. <code>Any</code> <p>Converts various input types to a vector of three Int elements. If a single value or a collection with less than 3 elements is provided, the remaining unaccounted elements in the resulting vector will be set to 0.</p> <p> </p>"},{"location":"shards/shards/General/ToInt4/","title":"ToInt4","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes input values of type <code>Int</code>, <code>Float</code>, <code>String</code>, or a collection  of <code>Int</code>s and <code>Float</code>s. Note that the shard can only convert strings that represent numerical values, such as \"5\", and not words like \"Five\". <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of four Int elements. <code>Any</code> <p>Converts various input types to a vector of four Int elements. If a single value or a collection with less than 4 elements is provided, the remaining unaccounted elements in the resulting vector will be set to 0.</p> <p> </p>"},{"location":"shards/shards/General/ToInt8/","title":"ToInt8","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes input values of type <code>Int</code>, <code>Float</code>, <code>String</code>, or a collection  of <code>Int</code>s and <code>Float</code>s. Note that the shard can only convert strings that represent numerical values, such as \"5\", and not words like \"Five\". <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs a vector of eight Int elements. <code>Any</code> <p>Converts various input types to a vector of eight Int elements. If a single value or a collection with less than 8 elements is provided, the remaining unaccounted elements in the resulting vector will be set to 0.</p> <p> </p>"},{"location":"shards/shards/General/ToJson/","title":"ToJson","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> If Pure is set to false, this shard accepts an input of any type. If Pure is set to true, this shard only accepts standard JSON types (tables, sequences, strings, numbers, booleans and none). <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input converted to a JSON string. <code>String</code> <code>Pure</code>  No If the input string is generic pure json rather then shards flavored json. <code>true</code> <code>Bool</code> <code>Indent</code>  No How many spaces to use as json prettify indent. <code>0</code> <code>Int</code> <p>This shard takes its input and converts it into a JSON string.</p>"},{"location":"shards/shards/General/ToJson/#details","title":"Details","text":"<p>If the <code>Pure</code> parameter is set to false, the shard will accept an input of any type, but the output JSON will not be a standard JSON, but a Shards-specific JSON format that retains Shards type information.</p> <p>If <code>Pure</code> is set to true, the shard will only accept basic JSON-compatible types: tables, sequences, strings, integers. floats, booleans, and null, but will return a standard JSON string.</p> <p> </p>"},{"location":"shards/shards/General/ToLEB128/","title":"ToLEB128","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The integer to encode. <code>Int</code> <code>Output \u27a1\ufe0f</code> Outputs the LEB128 encoded byte array. <code>Bytes</code> <code>Signed</code>  No If the integer to encode/decode is signed and can be negative. <code>false</code> <code>Bool</code> <p>This shard encodes the input(a signed or unsigned integer) into a LEB128 encoded byte array.</p>"},{"location":"shards/shards/General/ToLEB128/#details","title":"Details","text":"<p>If an integer was encoded with ToLEB128 with Signed set to true, it can be decoded with FromLEB128 with Signed set to true and vice versa.</p> <p>Consider the following example: <code>-1000 | ToLEB128(Signed: false) | FromLEB128(Signed: true)</code>   This will throw an error because the input was not encoded with Signed set to true.</p> <p> </p>"},{"location":"shards/shards/General/ToString/","title":"ToString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. <code>Any</code> <code>Output \u27a1\ufe0f</code> The string representation of the input value. <code>String</code> <p>Converts any input value to its string representation.</p> <p> </p>"},{"location":"shards/shards/General/TraitId/","title":"TraitId","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int2</code> <code>Trait</code>  No The trait <code>none</code> <code>Trait</code> <p>Retrieves the hash id of the given trait</p> <p> </p>"},{"location":"shards/shards/General/TryMany/","title":"TryMany","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard takes a sequence of values as input. Each value from the sequence is provided as input to its corresponding copy of the scheduled Wire. The total number of copies of the specified Wire scheduled, will be the same as the number of elements in the sequence provided. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> Depending on the Policy specified the shard will return a different output. WaitUntil::FirstSuccess will return the output of the first successful Wire. WaitUntil::SomeSuccess return a sequence with all the output from all the copies of the specified Wire. WaitUntil::AllSuccess will either stop execution of the current Wire if any of the copies fail or return a sequence with all the output from all the copies of the specified Wire. <code>[Any]</code> <code>Wire</code>  No The Wire to copy and schedule. <code>none</code> <code>None</code><code>Wire</code><code>[Shard]</code> <code>Policy</code>  No The execution policy for the shard to abide by. A copied Wire is only deemed successful if it did not have an internal failure (eg.through Assert) <code>WaitUntil::AllSuccess</code> <code>WaitUntil</code> <code>Threads</code>  No The number of cpu threads to use. Number specified can not be lower than 1. <code>1</code> <code>Int</code> <p>This shard takes a sequence of values as input, schedules multiple copies of a specified Wire and executes them asynchronously. Each value from the sequence is provided as input to its corresponding copy of the scheduled Wire. The shard will then wait for all the scheduled Wires to end, and then, depending on the Policy specified, the shard will either return the output of the first successful Wire, return a sequence with all the output from all the copies of the specified Wire or stop execution of the current Wire if all the copies failed.</p>"},{"location":"shards/shards/General/TryMany/#details","title":"Details","text":"<p>All child wires scheduled makes copies of the parent wire's context variables. Any changes to said variables will not be reflected on the parent wire or other sibling wires scheduled using this shard.</p> <p>Child wires are scheduled and executes inline. However, all child wires scheduled using this shard will execute in paralell. This shard however, will wait for all child wires to finish executing before it will continue its execution. Therefore any pauses on any child wire will also pause the parent wire.</p> <p>Child wires are scheduled on the same mesh as the parent wire.</p>"},{"location":"shards/shards/General/TryMany/#examples","title":"Examples","text":"Code <pre><code>@wire(print {\n  \"Ok\"\n  Log\n})\n@wire(main-wire {\n\n  Const([\"A\" \"B\" \"C\"])\n  TryMany(\n    Wire: print\n    Policy:\n    WaitUntil::AllSuccess\n    Threads:\n    12\n  )\n  Log\n  Assert.Is([\"Ok\" \"Ok\" \"Ok\"] true)\n})\n\n@mesh(main)\n@schedule(main main-wire)\n@run(main)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/TypeOf/","title":"TypeOf","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the type of the specified expression's output. <code>Type</code> <code>OutputOf</code>  No Evaluates the output type of the given expression. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>Evaluates the output type of the given expression specified by the 'OutputOf' parameter and outputs that type. No input is required for this shard.</p> <p> </p>"},{"location":"shards/shards/General/UI/","title":"UI","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the UI. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Object</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Scale</code>  No The UI scale <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>Queue</code>  No The draw queue. <code>none</code> <code>None</code><code>Var(GFX.DrawQueue)</code> <p>Initializes a UI context</p> <p> </p>"},{"location":"shards/shards/General/UUID/","title":"UUID","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int16</code> <p>Outputs a UUID (Universally Unique Identifier).</p> <p> </p>"},{"location":"shards/shards/General/Update/","title":"Update","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to be set to the variable. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input value is passed through as the output. <code>Any</code> <code>Name</code>  No The name of the variable. `` <code>String</code><code>Var(Any)</code> <code>Key</code>  No The key of the value to read from the table (parameter applicable only if the target variable is a table). <code>none</code> <code>Any</code> <code>Global</code>  No If the variable is available to all of the wires in the same mesh. <code>false</code> <code>Bool</code> <p>Modifies the value of an existing mutable variable.</p>"},{"location":"shards/shards/General/Update/#examples","title":"Examples","text":""},{"location":"shards/shards/General/Wait/","title":"Wait","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input value will either pass through unchanged or be ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> If Passthrough is true, this shard outputs the input value, passed through unchanged. Otherwise, it outputs the output of the Wire it waited for. <code>Any</code> <code>Wire</code>  No The Wire to wait for. <code>none</code> <code>Wire</code><code>String</code><code>None</code><code>Var(Wire)</code> <code>Passthrough</code>  No If set to true, outputs the input value, passed through unchanged. <code>false</code> <code>Bool</code> <code>Timeout</code>  No The optional amount of time in seconds to wait for the specified Wire to complete. If the specified time elapses before the specified Wire is complete, the current Wire will fail with a Timeout error. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <p>Waits for the specified Wire to complete before resuming execution of the current Wire.</p>"},{"location":"shards/shards/General/Wait/#examples","title":"Examples","text":"Code <pre><code>@wire(wire-that-waits {\n  If(Predicate: IsLess(0)\n    Then: {\n      \"Negative\" &gt; result\n    } Else: {\n      \"Positive\" &gt; result\n    }\n  )\n})\n\n@wire(main-wire {\n  Once({\n    \"false\" &gt;= result\n  })\n  5\n  Detach(wire-that-waits)\n  Wait(\n    Wire: \"myWire\"\n    Passthrough: false\n  )\n\n  result\n  Log\n} Looped: true)\n\n{logic-behavior: main-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/When/","title":"When","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the predicate. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input of the shard if <code>Passthrough</code> is <code>true</code>, or the <code>Predicate</code> is <code>false</code>; otherwise, the output of the <code>Action</code>. <code>Any</code> <code>Predicate</code>  No The predicate to evaluate in order to trigger Action. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Action</code>  No The shards to activate on when Predicate is true for When and false for WhenNot. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Passthrough</code>  No The output of this shard will be its input. <code>true</code> <code>Bool</code> <p>Conditional shard that only executes the action if the predicate is true.</p>"},{"location":"shards/shards/General/When/#examples","title":"Examples","text":"Code <pre><code>64\nWhen(\n  Predicate: {\n    IsMore(50)\n  }\n  Action: {\n    Msg(\"More than 50\")\n  }\n)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/WhenDone/","title":"WhenDone","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input of this shard will be given as input for the specified Wire <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the specific copy of the Wire that was scheduled. <code>Any</code> <code>Wire</code>  No The Wire to schedule and run asynchronously <code>none</code> <code>None</code><code>Wire</code><code>[Shard]</code> <p>Schedules the specified Wire and runs it asynchronously. The current Wire will continue its execution independently of the specified Wire. Unlike Detach, a copy of the specified Wire is scheduled every time the shard is called.</p> <p> </p>"},{"location":"shards/shards/General/WhenNot/","title":"WhenNot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the predicate. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input of the shard if <code>Passthrough</code> is <code>true</code>, or the <code>Predicate</code> is <code>true</code>; otherwise, the output of the <code>Action</code>. <code>Any</code> <code>Predicate</code>  No The predicate to evaluate in order to trigger Action. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Action</code>  No The shards to activate on when Predicate is true for When and false for WhenNot. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Passthrough</code>  No The output of this shard will be its input. <code>true</code> <code>Bool</code> <p>Conditional shard that only executes the action if the predicate is false.</p>"},{"location":"shards/shards/General/WhenNot/#examples","title":"Examples","text":"Code <pre><code>42\nWhenNot(\n  Predicate: {\n    IsMore(50)\n  }\n  Action: {\n    Msg(\"Less than 50\")\n  }\n)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/General/WriteJPG/","title":"WriteJPG","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Image</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code><code>Image</code> <code>File</code>  No The file to write the image to <code>none</code> <code>String</code><code>Var(String)</code><code>None</code> <code>Quality</code>  No JPEG quality (0-100) <code>85</code> <code>Int</code> <p>Writes an image to a JPEG file or returns JPEG bytes.</p> <p> </p>"},{"location":"shards/shards/General/Zip/","title":"Zip","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[{Any}]</code><code>[[Any]]</code> <code>Sequences</code>  No The sequences to zip together. <code>none</code> <code>[[Any] Var([Any])]</code> <code>Keys</code>  No The element keys to user. <code>none</code> <code>None</code><code>[String]</code> <p>Zip will take any number of sequences and return a sequence of sequences, where each sequence is a tuple of the values from the input sequences at the same index.</p> <p> </p>"},{"location":"shards/shards/Gizmos/Arrow/","title":"Gizmos.Arrow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Float4](4)</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>BodyColor</code>  No The color of the arrow <code>@f4(1 1 1 1)</code> <code>Float4</code><code>Var(Float4)</code> <code>CapColor</code>  No The color of the arrow <code>@f4(1 1 1 1)</code> <code>Float4</code><code>Var(Float4)</code> <p>Shows an arrow</p> <p> </p>"},{"location":"shards/shards/Gizmos/Box/","title":"Gizmos.Box","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  No Center of the box <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>Size</code>  No Size of the box <code>none</code> <code>None</code><code>Float3</code><code>Var(Float3)</code> <code>Transform</code>  No Transform applied to the box <code>none</code> <code>None</code><code>[Float4](4)</code><code>Var([Float4](4))</code> <code>Color</code>  No Boxar color of the box <code>none</code> <code>None</code><code>Float4</code><code>Var(Float4)</code> <code>Thickness</code>  No Width of the box in screen space <code>none</code> <code>None</code><code>Int</code><code>Float</code> <p>Draws a box in 3d space</p> <p> </p>"},{"location":"shards/shards/Gizmos/Circle/","title":"Gizmos.Circle","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  No Center of the circle <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>XBase</code>  No X direction of the plane the circle is on <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>YBase</code>  No Y direction of the plane the circle is on <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>Radius</code>  No Radius <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>Color</code>  No Linear color of the circle <code>none</code> <code>None</code><code>Float4</code><code>Var(Float4)</code> <code>Thickness</code>  No Width of the circle in screen space <code>none</code> <code>None</code><code>Int</code><code>Float</code> <p>Draws a line in 3d space</p> <p> </p>"},{"location":"shards/shards/Gizmos/Context/","title":"Gizmos.Context","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>View</code>  No The view used to render the gizmos.When drawing over a scene, the view should be the same. <code>none</code> <code>Var(GFX.View)</code> <code>ViewSize</code>  No The size of the view <code>none</code> <code>None</code><code>Int2</code><code>Var(Int2)</code> <code>Queue</code>  No The queue to draw into. <code>none</code> <code>Var(GFX.DrawQueue)</code> <code>Contents</code>  No Actual logic to draw the actual gizmos, the input of this flow will be a boolean that will be true if the gizmo is being pressed and so edited. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Scaling</code>  No The scaling factor for gizmo elements. <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>Interactive</code>  No Used to togle gizmo interactions on/off. <code>none</code> <code>None</code><code>Var(Bool)</code> <p>Provides a context for rendering gizmos</p> <p> </p>"},{"location":"shards/shards/Gizmos/Debug/","title":"Gizmos.Debug","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <p>Shows the renderer debug visuals</p> <p> </p>"},{"location":"shards/shards/Gizmos/Disc/","title":"Gizmos.Disc","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  No Center of the disc <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>XBase</code>  No X direction of the plane the disc is on <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>YBase</code>  No Y direction of the plane the disc is on <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>OuterRadius</code>  No Radius of the outer circle of the disc <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>InnerRadius</code>  No Radius of the inner circle of the disc <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>Color</code>  No Linear color of the disc <code>none</code> <code>None</code><code>Float4</code><code>Var(Float4)</code> <code>Culling</code>  No Back-face culling of the disc <code>none</code> <code>None</code><code>Bool</code><code>Var(Bool)</code> <p>Draws a filled disc in 3d space</p> <p> </p>"},{"location":"shards/shards/Gizmos/Grid/","title":"Gizmos.Grid","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  No Center of the disc <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>XBase</code>  No X direction of the grid <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>YBase</code>  No Y direction of the grid <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>Thickness</code>  No Width of the line in screen space <code>none</code> <code>None</code><code>Int</code><code>Float</code> <code>StepSize</code>  No Step size of the grid lines <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>Size</code>  No Number of grid lines <code>none</code> <code>None</code><code>Int</code><code>Var(Int)</code> <code>Color</code>  No Linear color of the grid lines <code>none</code> <code>None</code><code>Float4</code><code>Var(Float4)</code> <p>Draws a grid</p> <p> </p>"},{"location":"shards/shards/Gizmos/Highlight/","title":"Gizmos.Highlight","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>GFX.Drawable</code><code>[GFX.Drawable]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Color</code>  No Color to render wireframe at <code>@f4(1 0 0 1)</code> <code>Float4</code> <p>Queues a draw operation to highlight a drawable</p> <p> </p>"},{"location":"shards/shards/Gizmos/Line/","title":"Gizmos.Line","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>A</code>  No Starting position of the line <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>B</code>  No Ending position of the line <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>Color</code>  No Linear color of the line <code>none</code> <code>None</code><code>Float4</code><code>Var(Float4)</code> <code>Thickness</code>  No Width of the line in screen space <code>none</code> <code>None</code><code>Int</code><code>Float</code> <p>Draws a line in 3d space</p> <p> </p>"},{"location":"shards/shards/Gizmos/Point/","title":"Gizmos.Point","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  No Center of the point <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>Color</code>  No Pointar color of the point <code>none</code> <code>None</code><code>Float4</code><code>Var(Float4)</code> <code>Thickness</code>  No Size of the point in screen space <code>none</code> <code>None</code><code>Int</code><code>Float</code> <p>Draws a point in 3d space</p> <p> </p>"},{"location":"shards/shards/Gizmos/Rect/","title":"Gizmos.Rect","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  No Starting position of the rectangle <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>XBase</code>  No X direction of the plane the rectangle is on <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>YBase</code>  No Y direction of the plane the rectangle is on <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>Size</code>  No Size of the rectangle <code>none</code> <code>None</code><code>Float2</code><code>Var(Float2)</code> <code>Color</code>  No Linear color of the rectangle <code>none</code> <code>None</code><code>Float4</code><code>Var(Float4)</code> <code>Thickness</code>  No Width of the rectangle in screen space <code>none</code> <code>None</code><code>Int</code><code>Float</code> <p>Draws a rectangle in 3d space</p> <p> </p>"},{"location":"shards/shards/Gizmos/RefspaceGridOverlay/","title":"Gizmos.RefspaceGridOverlay","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  No Center of the disc <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>XBase</code>  No X direction of the plane the disc is on <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>YBase</code>  No Y direction of the plane the disc is on <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>Thickness</code>  No Width of the line in screen space <code>none</code> <code>None</code><code>Int</code><code>Float</code> <code>StepSize</code>  No Step size of the grid lines <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>Color</code>  No Linear color of the grid lines <code>none</code> <code>None</code><code>Float4</code><code>Var(Float4)</code> <p>Draws a grid</p> <p> </p>"},{"location":"shards/shards/Gizmos/Rotation/","title":"Gizmos.Rotation","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{translation: Float3 rotation: Float4 scale: Float3}</code><code>[{translation: Float3 rotation: Float4 scale: Float3}]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{translation: Float3 rotation: Float4 scale: Float3}</code><code>[{translation: Float3 rotation: Float4 scale: Float3}]</code> <code>ScreenSize</code>  No Size of the gizmo on screen (UI size) <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <p>Shows a rotation gizmo</p> <p> </p>"},{"location":"shards/shards/Gizmos/Scaling/","title":"Gizmos.Scaling","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{translation: Float3 rotation: Float4 scale: Float3}</code><code>[{translation: Float3 rotation: Float4 scale: Float3}]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{translation: Float3 rotation: Float4 scale: Float3}</code><code>[{translation: Float3 rotation: Float4 scale: Float3}]</code> <code>ScreenSize</code>  No Size of the gizmo on screen (UI size) <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <p>Shows a scaling gizmo</p> <p> </p>"},{"location":"shards/shards/Gizmos/ScreenScale/","title":"Gizmos.ScreenScale","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code> <code>Position</code>  No The point in space at which the object is rendered <code>none</code> <code>Float3</code><code>Var(Float3)</code> <p>Outputs a scaling factor to give an object a uniform size on the screen</p> <p> </p>"},{"location":"shards/shards/Gizmos/ScreenXY/","title":"Gizmos.ScreenXY","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float3]</code> <p>Outputs an X and Y direction that are aligned with the current view</p> <p> </p>"},{"location":"shards/shards/Gizmos/SolidRect/","title":"Gizmos.SolidRect","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>None</code> <code>Center</code>  No Starting position of the rectangle <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>XBase</code>  No X direction of the plane the rectangle is on <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>YBase</code>  No Y direction of the plane the rectangle is on <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>Size</code>  No Size of the rectange <code>none</code> <code>None</code><code>Float2</code><code>Var(Float2)</code> <code>Color</code>  No Rectanglear color of the rectangle <code>none</code> <code>None</code><code>Float4</code><code>Var(Float4)</code> <code>Culling</code>  No Back-face culling of the rectangle <code>none</code> <code>None</code><code>Bool</code><code>Var(Bool)</code> <p>Draws a filled rectangle in 3d space</p> <p> </p>"},{"location":"shards/shards/Gizmos/Translation/","title":"Gizmos.Translation","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{translation: Float3 rotation: Float4 scale: Float3}</code><code>[{translation: Float3 rotation: Float4 scale: Float3}]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{translation: Float3 rotation: Float4 scale: Float3}</code><code>[{translation: Float3 rotation: Float4 scale: Float3}]</code> <code>ScreenSize</code>  No Size of the gizmo on screen (UI size) <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <p>Shows a translation gizmo</p> <p> </p>"},{"location":"shards/shards/Hash/Blake2-128/","title":"Hash.Blake2-128","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string, bytes or a sequence of strings/bytes to hash. <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> Outputs the 128-bit hash as a byte array. <code>Bytes</code> <p>This shard outputs the compact 128-bit hash(of 16 bytes) of the input (string, bytes or a sequence of strings/bytes) using the BLAKE2b-128 hashing algorithm.</p>"},{"location":"shards/shards/Hash/Blake2-128/#details","title":"Details","text":"<p>The BLAKE2 algorithm is a cryptographic hash function that's designed to be fast and secure. The 128-bit variant (BLAKE2b-128) is a truncated version of the full BLAKE2b algorithm, providing a shorter output while maintaining many of the security properties of the larger variants.</p> <p> </p>"},{"location":"shards/shards/Hash/Blake2-256/","title":"Hash.Blake2-256","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string, bytes or a sequence of strings/bytes to hash. <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> Outputs the 256-bit hash as a byte array. <code>Bytes</code> <p>This shard outputs the 256-bit hash(of 32 bytes) of the input (string, bytes or a sequence of strings/bytes) using the BLAKE2b-256 hashing algorithm.</p>"},{"location":"shards/shards/Hash/Blake2-256/#details","title":"Details","text":"<p>The BLAKE2 algorithm is a cryptographic hash function that's designed to be fast and secure.</p> <p>The Hash.Blake2-256 shard provides a longer hash output compared to Hash.Blake2-128, which can be useful in scenarios requiring more collision resistance or when a longer hash is preferred for security reasons.</p> <p> </p>"},{"location":"shards/shards/Hash/Keccak-256/","title":"Hash.Keccak-256","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string, bytes or a sequence of strings/bytes to hash. <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> Outputs the 256-bit hash as a byte array. <code>Bytes</code> <p>This shard outputs the 256-bit hash (32-bytes) of the input (string, bytes or a sequence of strings/bytes) using the Keccak-256 hashing algorithm.</p>"},{"location":"shards/shards/Hash/Keccak-256/#details","title":"Details","text":"<p>Keccak-256 is a cryptographic hash algorithm, providing strong security properties.</p> <p> </p>"},{"location":"shards/shards/Hash/Keccak-512/","title":"Hash.Keccak-512","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string, bytes or a sequence of strings/bytes to hash. <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> Outputs the 512-bit hash as a byte array. <code>Bytes</code> <p>This shard outputs the 512-bit hash (64-bytes) of the input (string, bytes or a sequence of strings/bytes) using the Keccak-512 hashing algorithm.</p>"},{"location":"shards/shards/Hash/Keccak-512/#details","title":"Details","text":"<p>Keccak-512 is a cryptographic hash algorithm, providing strong security properties.</p> <p>The Hash.Keccak-512 shard provides a longer hash output compared to Hash.Keccak-256, which can be useful in scenarios requiring even stronger security or a larger hash space.</p> <p> </p>"},{"location":"shards/shards/Hash/Sha2-256/","title":"Hash.Sha2-256","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string, bytes or a sequence of strings/bytes to hash. <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> Outputs the 256-bit hash as a byte array. <code>Bytes</code> <p>This shard outputs the 256-bit hash (32-bytes) of the input (string, bytes or a sequence of strings/bytes) using the Keccak-256 hashing algorithm.</p>"},{"location":"shards/shards/Hash/Sha2-256/#details","title":"Details","text":"<p>SHA2 is a cryptographic hash algorithm, providing strong security properties.</p> <p> </p>"},{"location":"shards/shards/Hash/Sha2-512/","title":"Hash.Sha2-512","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string, bytes or a sequence of strings/bytes to hash. <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> Outputs the 512-bit hash as a byte array. <code>Bytes</code> <p>This shard outputs the 512-bit hash (64-bytes) of the input (string, bytes or a sequence of strings/bytes) using the SHA2-512 hashing algorithm.</p>"},{"location":"shards/shards/Hash/Sha2-512/#details","title":"Details","text":"<p>SHA2 is a cryptographic hash algorithm, providing strong security properties.</p> <p>The Hash.Sha2-512 shard provides a longer hash output compared to Hash.Sha2-256, which can be useful in scenarios requiring even stronger security or a larger hash space.</p> <p> </p>"},{"location":"shards/shards/Hash/Sha3-256/","title":"Hash.Sha3-256","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string, bytes or a sequence of strings/bytes to hash. <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> Outputs the 256-bit hash as a byte array. <code>Bytes</code> <p>This shard outputs the 256-bit hash (32-bytes) of the input (string, bytes or a sequence of strings/bytes) using the SHA3-256 hashing algorithm.</p>"},{"location":"shards/shards/Hash/Sha3-256/#details","title":"Details","text":"<p>SHA3 is the newer version of the Secure Hash Algorithm family with better security and effeciency.</p> <p>SHA3 is a cryptographic hash algorithm, providing strong security properties.</p> <p> </p>"},{"location":"shards/shards/Hash/Sha3-512/","title":"Hash.Sha3-512","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string, bytes or a sequence of strings/bytes to hash. <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> Outputs the 512-bit hash as a byte array. <code>Bytes</code> <p>This shard outputs the 512-bit hash (64-bytes) of the input (string, bytes or a sequence of strings/bytes) using the SHA3-512 hashing algorithm.</p>"},{"location":"shards/shards/Hash/Sha3-512/#details","title":"Details","text":"<p>SHA3 is the newer version of the Secure Hash Algorithm family with better security and effeciency.</p> <p>SHA3 is a cryptographic hash algorithm, providing strong security properties.</p> <p>The Hash.Sha3-512 shard provides a longer hash output compared to Hash.Sha3-256, which can be useful in scenarios requiring even stronger security or a larger hash space.</p> <p> </p>"},{"location":"shards/shards/Hash/XXH-128/","title":"Hash.XXH-128","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string, bytes or a sequence of strings/bytes to hash. <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> Outputs the 128-bit hash as a byte array. <code>Bytes</code> <p>This shard outputs the 128-bit hash(of 16 bytes) of the input (string, bytes or a sequence of strings/bytes) using the XXH128 hashing algorithm.</p>"},{"location":"shards/shards/Hash/XXH-128/#details","title":"Details","text":"<p>XXH128 is a non-cryptographic hash algorithm, designed for speed rather than cryptographic security.</p> <p>The Hash.XXH-128 shard provides a longer hash output compared to Hash.XXH-64, which can be useful in scenarios where a lower collision probability is desired.</p> <p> </p>"},{"location":"shards/shards/Hash/XXH-64/","title":"Hash.XXH-64","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string, bytes or a sequence of strings/bytes to hash. <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> Outputs the 64-bit hash as a byte array. <code>Bytes</code> <p>This shard outputs the 64-bit hash(of 8 bytes) of the input (string, bytes or a sequence of strings/bytes) using the XXH64 hashing algorithm.</p>"},{"location":"shards/shards/Hash/XXH-64/#details","title":"Details","text":"<p>XXH64 is a non-cryptographic hash algorithm, designed for speed rather than cryptographic security.</p> <p> </p>"},{"location":"shards/shards/Hash/XXH3-128/","title":"Hash.XXH3-128","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string, bytes or a sequence of strings/bytes to hash. <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> Outputs the 128-bit hash as a byte array. <code>Bytes</code> <p>This shard outputs the 128-bit hash(of 16 bytes) of the input (string, bytes or a sequence of strings/bytes) using the XXH3(128-bit) hashing algorithm.</p>"},{"location":"shards/shards/Hash/XXH3-128/#details","title":"Details","text":"<p>XXH3 is the newer version of the XXHash family, designed to be even faster than its predecessors while maintaining or improving quality.</p> <p>XXH3 is a non-cryptographic hash algorithm, designed for speed rather than cryptographic security.</p> <p>The Hash.XXH3-128 shard provides a longer hash output compared to Hash.XXH3-64, which can be useful in scenarios where a lower collision probability is desired.</p> <p> </p>"},{"location":"shards/shards/Hash/XXH3-64/","title":"Hash.XXH3-64","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string, bytes or a sequence of strings/bytes to hash. <code>Bytes</code><code>[Bytes]</code><code>String</code><code>[String]</code> <code>Output \u27a1\ufe0f</code> Outputs the 64-bit hash as a byte array. <code>Bytes</code> <p>This shard outputs the 64-bit hash(of 8 bytes) of the input (string, bytes or a sequence of strings/bytes) using the XXH3(64-bit) hashing algorithm.</p>"},{"location":"shards/shards/Hash/XXH3-64/#details","title":"Details","text":"<p>XXH3 is the newer version of the XXHash family, designed to be even faster than its predecessors while maintaining or improving quality.</p> <p>XXH3 is a non-cryptographic hash algorithm, designed for speed rather than cryptographic security.</p> <p> </p>"},{"location":"shards/shards/Http/Chunk/","title":"Http.Chunk","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input to the chunk shard is the data (String or Bytes) to be sent in the current chunk. This data is part of a larger response that will be sent in multiple chunks if necessary. <code>String</code><code>Bytes</code> <code>Output \u27a1\ufe0f</code> The output is the same as the input. The chunked transfer encoding is handled internally when writing to the socket. <code>String</code><code>Bytes</code> <code>Status</code>  No The HTTP status code to return. <code>200</code> <code>Int</code> <code>Headers</code>  No The headers to attach to this response. <code>none</code> <code>{String}</code><code>Var({String})</code><code>None</code> <p>This shard processes and packages outgoing Http response date into smaller manageable pieces and subsequently writes them to the socket while managing the chunked transfer encoding process.</p>"},{"location":"shards/shards/Http/Chunk/#details","title":"Details","text":"<p>For the first chunk:</p> <ul> <li>It sets up the HTTP response with status code, content type, and any custom headers.</li> <li>It sets the response to chunked encoding.</li> <li>It writes the response headers asynchronously.</li> </ul> <p>For each chunk (including the first and subsequent ones): - It takes the input data (which can be a string or bytes). - It formats the chunk according to the HTTP chunked encoding format (size in hexadecimal followed by CRLF, then the data, then another CRLF). - It writes this formatted chunk asynchronously to the socket.</p> <p>If an empty chunk is sent, it's treated as the end of the response, and the shard resets to be ready for a new chunked response.</p> <p>The shard uses asynchronous I/O operations and suspends execution while waiting for each write operation to complete, allowing other tasks to run in the meantime.</p> <p> </p>"},{"location":"shards/shards/Http/Delete/","title":"Http.Delete","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input for this shard should either be none, string, bytes, or string table to send in the body of the DELETE request. <code>None</code><code>{String}</code><code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The output is the response from the server through the DELETE request as a string, byte array, or table (if the FullResponse parameter is set to true). <code>{status: Int headers: {String} body: Bytes}</code><code>Bytes</code><code>{status: Int headers: {String} body: String}</code><code>String</code><code>Object</code> <code>URL</code>  No The url to request to. `` <code>String</code><code>Var(String)</code> <code>Headers</code>  No If a table of headers is provided, it will be used as is; if no headers are provided, a Content-Type header will be derived based on the input type. <code>none</code> <code>None</code><code>{String}</code><code>Var({String})</code> <code>Timeout</code>  No How many seconds to wait for the request to complete. <code>10</code> <code>Int</code> <code>Bytes</code>  No If instead of a string the shard should output bytes. <code>false</code> <code>Bool</code> <code>FullResponse</code>  No If the output should be a table with the full response, including headers and status. <code>false</code> <code>Bool</code> <code>AcceptInvalidCerts</code>  No If we should ignore invalid certificates. This is useful for testing but should not be used in production. <code>false</code> <code>Bool</code> <code>Retry</code>  No How many times to retry the request if it fails. <code>0</code> <code>Int</code> <code>KeepAlive</code>  No If the client instance should be kept alive, allowing connection reuse for multiple requests. The client won't be closed until this shard cleans up. <code>false</code> <code>Bool</code> <code>Streaming</code>  No If the response should be streamed, in which case the output will be an object to use with the Http.Stream shard. <code>false</code> <code>Bool</code> <code>Backoff</code>  No How many seconds to wait between retries. Defaults to 1 second. <code>1</code> <code>Int</code> <p>This shard sends a HTTP DELETE request to the specified URL and outputs the response.</p>"},{"location":"shards/shards/Http/Delete/#details","title":"Details","text":"<p>A HTTP DELETE request is a method of sending a request to a server to delete a resource.</p> <p>This request is idempotent. Multiple identical requests will have the same effect as a single request.</p> <p>This shard can accept a string table, string or bytes as input and will modify the body of the DELETE request accordingly. - none : no body is attached to the request - string : The string is attached to the body as is and treated as a JSON string. - string table : Both key and values need to be strings. The shard constructs a URL encoded string using the key and value pairs from the table and attaches it to the body of the request. - bytes : The bytes are attached to the body as is.</p> <p>If the output of the shard is a table, it will have the following format: <pre><code>{\n  status: Int,\n  headers: Table(String, String),\n  body: String or Bytes\n}\n</code></pre> - status: An integer representing the HTTP status code. - headers: A table where both keys and values are strings, representing the response headers. - body: Either a string or bytes (depending on the asBytes parameter), containing the response body.</p> <p> </p>"},{"location":"shards/shards/Http/Get/","title":"Http.Get","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input for this shard should either be none or an optional string table of query parameters to append to the URL. <code>None</code><code>{String}</code> <code>Output \u27a1\ufe0f</code> The output is the response from the server through the GET request. <code>{status: Int headers: {String} body: Bytes}</code><code>Bytes</code><code>{status: Int headers: {String} body: String}</code><code>String</code><code>Object</code> <code>URL</code>  No The url to request to. `` <code>String</code><code>Var(String)</code> <code>Headers</code>  No If a table of headers is provided, it will be used as is; if no headers are provided, a Content-Type header will be derived based on the input type. <code>none</code> <code>None</code><code>{String}</code><code>Var({String})</code> <code>Timeout</code>  No How many seconds to wait for the request to complete. <code>10</code> <code>Int</code> <code>Bytes</code>  No If instead of a string the shard should output bytes. <code>false</code> <code>Bool</code> <code>FullResponse</code>  No If the output should be a table with the full response, including headers and status. <code>false</code> <code>Bool</code> <code>AcceptInvalidCerts</code>  No If we should ignore invalid certificates. This is useful for testing but should not be used in production. <code>false</code> <code>Bool</code> <code>Retry</code>  No How many times to retry the request if it fails. <code>0</code> <code>Int</code> <code>KeepAlive</code>  No If the client instance should be kept alive, allowing connection reuse for multiple requests. The client won't be closed until this shard cleans up. <code>false</code> <code>Bool</code> <code>Streaming</code>  No If the response should be streamed, in which case the output will be an object to use with the Http.Stream shard. <code>false</code> <code>Bool</code> <code>Backoff</code>  No How many seconds to wait between retries. Defaults to 1 second. <code>1</code> <code>Int</code> <p>This shard sends a GET request to the specified URL and outputs the response.</p>"},{"location":"shards/shards/Http/Get/#details","title":"Details","text":"<p>This shard can accept a string table as input to append query parameters to the specified URL. For example, <pre><code>{\n  \"param1\": \"value1\"\n  \"param2\": \"value2\"\n  \"param3\": \"value3\"\n} = query-params\n\nquery-params\nHttp.Get(\"https://api.example.com/endpoint\")\n</code></pre> The Http.Get shard will append the query parameters to the URL and the resulting constructed URL will be: <code>https://api.example.com/endpoint?param1=value1&amp;param2=value2&amp;param3=value3</code></p> <p>The Http.Get shard can handle the different responses that could be returned by the server. - HTML content: A web page's structure and content. - Plain text: Simple text data. - JSON (JavaScript Object Notation): Structured data commonly used in APIs. - XML (eXtensible Markup Language): Another format for structured data. - Binary data: Such as images, audio files, or documents. - Status codes: Indicating success (200 OK), redirection (3xx), client errors (4xx), or server errors (5xx). - Headers: Metadata about the response, like content type, caching instructions, or cookies. - Empty response: In some cases, with just a status code.</p> <p> </p>"},{"location":"shards/shards/Http/Head/","title":"Http.Head","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input for this shard should either be none or an optional string table of query parameters to append to the URL. <code>None</code><code>{String}</code> <code>Output \u27a1\ufe0f</code> The output is the headers of the response from the server through the HEAD request. <code>{status: Int headers: {String} body: Bytes}</code><code>Bytes</code><code>{status: Int headers: {String} body: String}</code><code>String</code><code>Object</code> <code>URL</code>  No The url to request to. `` <code>String</code><code>Var(String)</code> <code>Headers</code>  No If a table of headers is provided, it will be used as is; if no headers are provided, a Content-Type header will be derived based on the input type. <code>none</code> <code>None</code><code>{String}</code><code>Var({String})</code> <code>Timeout</code>  No How many seconds to wait for the request to complete. <code>10</code> <code>Int</code> <code>Bytes</code>  No If instead of a string the shard should output bytes. <code>false</code> <code>Bool</code> <code>FullResponse</code>  No If the output should be a table with the full response, including headers and status. <code>false</code> <code>Bool</code> <code>AcceptInvalidCerts</code>  No If we should ignore invalid certificates. This is useful for testing but should not be used in production. <code>false</code> <code>Bool</code> <code>Retry</code>  No How many times to retry the request if it fails. <code>0</code> <code>Int</code> <code>KeepAlive</code>  No If the client instance should be kept alive, allowing connection reuse for multiple requests. The client won't be closed until this shard cleans up. <code>false</code> <code>Bool</code> <code>Streaming</code>  No If the response should be streamed, in which case the output will be an object to use with the Http.Stream shard. <code>false</code> <code>Bool</code> <code>Backoff</code>  No How many seconds to wait between retries. Defaults to 1 second. <code>1</code> <code>Int</code> <p>This shard sends a HEAD request to the specified URL and outputs the response.</p>"},{"location":"shards/shards/Http/Head/#details","title":"Details","text":"<p>This shard can accept a string table as input to append query parameters to the specified URL. For example, <pre><code>{\n  \"param1\": \"value1\"\n  \"param2\": \"value2\"\n  \"param3\": \"value3\"\n} = queryParams\n\nqueryParams\nHttp.Get(\"https://api.example.com/endpoint\")\n</code></pre> The Http.Get shard will append the query parameters to the URL and the resulting constructed URL will be: <code>https://api.example.com/endpoint?param1=value1&amp;param2=value2&amp;param3=value3</code></p> <p>This shard is similar to the Http.Get shard, but it only returns the headers of the response and not the body.</p> <p> </p>"},{"location":"shards/shards/Http/Patch/","title":"Http.Patch","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input for this shard should either be none, string, bytes, or string table to send in the body of the PATCH request. <code>None</code><code>{String}</code><code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The output is the response from the server through the PATCH request as a string, byte array, or table (if the FullResponse parameter is set to true). <code>{status: Int headers: {String} body: Bytes}</code><code>Bytes</code><code>{status: Int headers: {String} body: String}</code><code>String</code><code>Object</code> <code>URL</code>  No The url to request to. `` <code>String</code><code>Var(String)</code> <code>Headers</code>  No If a table of headers is provided, it will be used as is; if no headers are provided, a Content-Type header will be derived based on the input type. <code>none</code> <code>None</code><code>{String}</code><code>Var({String})</code> <code>Timeout</code>  No How many seconds to wait for the request to complete. <code>10</code> <code>Int</code> <code>Bytes</code>  No If instead of a string the shard should output bytes. <code>false</code> <code>Bool</code> <code>FullResponse</code>  No If the output should be a table with the full response, including headers and status. <code>false</code> <code>Bool</code> <code>AcceptInvalidCerts</code>  No If we should ignore invalid certificates. This is useful for testing but should not be used in production. <code>false</code> <code>Bool</code> <code>Retry</code>  No How many times to retry the request if it fails. <code>0</code> <code>Int</code> <code>KeepAlive</code>  No If the client instance should be kept alive, allowing connection reuse for multiple requests. The client won't be closed until this shard cleans up. <code>false</code> <code>Bool</code> <code>Streaming</code>  No If the response should be streamed, in which case the output will be an object to use with the Http.Stream shard. <code>false</code> <code>Bool</code> <code>Backoff</code>  No How many seconds to wait between retries. Defaults to 1 second. <code>1</code> <code>Int</code> <p>This shard sends a HTTP PATCH request to the specified URL and outputs the response.</p>"},{"location":"shards/shards/Http/Patch/#details","title":"Details","text":"<p>A HTTP PATCH request is a method of sending data to a server for partial modification of a resource.</p> <p>Unlike PUT, which replaces the entire resource, PATCH only applies partial modifications to the resource.</p> <p>This request is generally considered non idempotent. But its idempotency depends on the PATCH instructions.</p> <p>This shard can accept a string table, string or bytes as input and will modify the body of the PATCH request accordingly. - none : no body is attached to the request - string : The string is attached to the body as is and treated as a JSON string. - string table : Both key and values need to be strings. The shard constructs a URL encoded string using the key and value pairs from the table and attaches it to the body of the request. - bytes : The bytes are attached to the body as is.</p> <p>If the output of the shard is a table, it will have the following format: <pre><code>{\n  status: Int,\n  headers: Table(String, String),\n  body: String or Bytes\n}\n</code></pre> - status: An integer representing the HTTP status code. - headers: A table where both keys and values are strings, representing the response headers. - body: Either a string or bytes (depending on the asBytes parameter), containing the response body.</p> <p> </p>"},{"location":"shards/shards/Http/Post/","title":"Http.Post","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input for this shard should either be none, string, bytes, or string table to send in the body of the POST request. <code>None</code><code>{String}</code><code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The output is the response from the server through the POST request as a string, byte array, or table (if the FullResponse parameter is set to true). <code>{status: Int headers: {String} body: Bytes}</code><code>Bytes</code><code>{status: Int headers: {String} body: String}</code><code>String</code><code>Object</code> <code>URL</code>  No The url to request to. `` <code>String</code><code>Var(String)</code> <code>Headers</code>  No If a table of headers is provided, it will be used as is; if no headers are provided, a Content-Type header will be derived based on the input type. <code>none</code> <code>None</code><code>{String}</code><code>Var({String})</code> <code>Timeout</code>  No How many seconds to wait for the request to complete. <code>10</code> <code>Int</code> <code>Bytes</code>  No If instead of a string the shard should output bytes. <code>false</code> <code>Bool</code> <code>FullResponse</code>  No If the output should be a table with the full response, including headers and status. <code>false</code> <code>Bool</code> <code>AcceptInvalidCerts</code>  No If we should ignore invalid certificates. This is useful for testing but should not be used in production. <code>false</code> <code>Bool</code> <code>Retry</code>  No How many times to retry the request if it fails. <code>0</code> <code>Int</code> <code>KeepAlive</code>  No If the client instance should be kept alive, allowing connection reuse for multiple requests. The client won't be closed until this shard cleans up. <code>false</code> <code>Bool</code> <code>Streaming</code>  No If the response should be streamed, in which case the output will be an object to use with the Http.Stream shard. <code>false</code> <code>Bool</code> <code>Backoff</code>  No How many seconds to wait between retries. Defaults to 1 second. <code>1</code> <code>Int</code> <p>This shard sends a HTTP POST request to the specified URL and outputs the response.</p>"},{"location":"shards/shards/Http/Post/#details","title":"Details","text":"<p>A HTTP POST request is a method of sending data to a server to create a resource.</p> <p>This request is not idempotent. Multiple identical requests might create multiple resources.</p> <p>This shard can accept a string table, string or bytes as input and will modify the body of the POST request accordingly. - none : no body is attached to the request - string : The string is attached to the body as is and treated as a JSON string. - string table : Both key and values need to be strings. The shard constructs a URL encoded string using the key and value pairs from the table and attaches it to the body of the request. - bytes : The bytes are attached to the body as is.</p> <p>If the output of the shard is a table, it will have the following format: <pre><code>{\n  status: @type(Type::Int)\n  headers: {header: @type(Type::String)}\n  body: @type(Type::String) ;; or @type(Type::Bytes)\n}\n</code></pre> - status: An integer representing the HTTP status code. - headers: A table where both keys and values are strings, representing the response headers. - body: Either a string or bytes (depending on the asBytes parameter), containing the response body.</p> <p> </p>"},{"location":"shards/shards/Http/Put/","title":"Http.Put","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input for this shard should either be none, string, bytes, or string table to send in the body of the PUT request. <code>None</code><code>{String}</code><code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The output is the response from the server through the PUT request as a string, byte array, or table (if the FullResponse parameter is set to true). <code>{status: Int headers: {String} body: Bytes}</code><code>Bytes</code><code>{status: Int headers: {String} body: String}</code><code>String</code><code>Object</code> <code>URL</code>  No The url to request to. `` <code>String</code><code>Var(String)</code> <code>Headers</code>  No If a table of headers is provided, it will be used as is; if no headers are provided, a Content-Type header will be derived based on the input type. <code>none</code> <code>None</code><code>{String}</code><code>Var({String})</code> <code>Timeout</code>  No How many seconds to wait for the request to complete. <code>10</code> <code>Int</code> <code>Bytes</code>  No If instead of a string the shard should output bytes. <code>false</code> <code>Bool</code> <code>FullResponse</code>  No If the output should be a table with the full response, including headers and status. <code>false</code> <code>Bool</code> <code>AcceptInvalidCerts</code>  No If we should ignore invalid certificates. This is useful for testing but should not be used in production. <code>false</code> <code>Bool</code> <code>Retry</code>  No How many times to retry the request if it fails. <code>0</code> <code>Int</code> <code>KeepAlive</code>  No If the client instance should be kept alive, allowing connection reuse for multiple requests. The client won't be closed until this shard cleans up. <code>false</code> <code>Bool</code> <code>Streaming</code>  No If the response should be streamed, in which case the output will be an object to use with the Http.Stream shard. <code>false</code> <code>Bool</code> <code>Backoff</code>  No How many seconds to wait between retries. Defaults to 1 second. <code>1</code> <code>Int</code> <p>This shard sends a HTTP PUT request to the specified URL and outputs the response.</p>"},{"location":"shards/shards/Http/Put/#details","title":"Details","text":"<p>A HTTP PUT request is a method of sending data to a server to update a resource by replacing it.</p> <p>This request is idempotent. Multiple identical requests will have the same effect as a single request.</p> <p>Unlike POST which is used to create a resource and is not idempotent, PUT is used to update a resource and is idempotent.</p> <p>This shard can accept a string table, string or bytes as input and will modify the body of the PUT request accordingly. - none : no body is attached to the request - string : The string is attached to the body as is and treated as a JSON string. - string table : Both key and values need to be strings. The shard constructs a URL encoded string using the key and value pairs from the table and attaches it to the body of the request. - bytes : The bytes are attached to the body as is.</p> <p>If the output of the shard is a table, it will have the following format: <pre><code>{\n  status: Int,\n  headers: Table(String, String),\n  body: String or Bytes\n}\n</code></pre> - status: An integer representing the HTTP status code. - headers: A table where both keys and values are strings, representing the response headers. - body: Either a string or bytes (depending on the asBytes parameter), containing the response body.</p> <p> </p>"},{"location":"shards/shards/Http/Read/","title":"Http.Read","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The output is a table containing the HTTP request method, headers, target, and body. <code>{method: String headers: {String} target: String body: String}</code> <p>This shard reads incoming HTTP requests from a client connection, parses its components, and outputs them as a table. This shard should be used in conjunction with the Http.Server shard to handle incoming requests. It properly handles both regular and chunked transfer encoding.</p>"},{"location":"shards/shards/Http/Read/#details","title":"Details","text":"<p>The output of this shard is a table with the following format: <pre><code>{\n\"method\": \"POST\",\n\"headers\": {\n  \"Content-Type\": \"application/json\",\n  \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n  \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"Accept\": \"application/json\",\n  \"Content-Length\": \"62\"\n},\n\"target\": \"/api/users\",\n  \"body\": \"{\\\"username\\\":\\\"johndoe\\\",\\\"email\\\":\\\"john@example.com\\\",\\\"age\\\":30}\"\n}\n</code></pre></p> <p>Each key in the table represent a different aspect of the request. \"method\" (string): - This represents the HTTP method used in the request. - Examples: \"GET\", \"POST\", \"PUT\", \"DELETE\", \"HEAD\" - It indicates the desired action to be performed on the resource. \"headers\" (string table): - This is a collection of HTTP headers sent with the request. - Each key-value pair in this table represents a header name and its value. - Examples might include:   - \"Content-Type\": \"application/json\"   - \"User-Agent\": \"Mozilla/5.0 ...\"   - \"Authorization\": \"Bearer token123\" \"target\" (string): - This is the request target, which is typically the path part of the URL. - For example, in \"http://example.com/api/users\", the target would be \"/api/users\". - It identifies the resource on the server that the request is directed to. \"body\" (string): - This contains the payload of the request, if any. - For DELETE requests, this is typically empty. - For POST or PUT requests, this might contain data being sent to the server, like form data or JSON.</p> <p> </p>"},{"location":"shards/shards/Http/Response/","title":"Http.Response","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input string or byte array will be used directly as the body of the response. <code>String</code><code>Bytes</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>String</code><code>Bytes</code> <code>Status</code>  No The HTTP status code to return. <code>200</code> <code>Int</code><code>Var(Int)</code> <code>Headers</code>  No The headers to attach to this response. <code>none</code> <code>{String}</code><code>Var({String})</code><code>None</code> <code>ContentType</code>  No The content type of the response. <code>application/json</code> <code>String</code><code>Var(String)</code> <p>This shard sends an HTTP response to the client after receiving an HTTP request.</p> <p> </p>"},{"location":"shards/shards/Http/SendFile/","title":"Http.SendFile","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input for this shard should be a string representing the path to the file to be sent. <code>String</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>String</code> <code>Headers</code>  No The headers to attach to this response. <code>none</code> <code>{String}</code><code>Var({String})</code><code>None</code> <p>This shard sends a static file to the client over HTTP.</p> <p> </p>"},{"location":"shards/shards/Http/Server/","title":"Http.Server","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input value will pass through unchanged. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Handler</code>  No The wire that will be spawned and handle a remote request. <code>none</code> <code>Wire</code><code>None</code> <code>Endpoint</code>  No The URL from where your service can be accessed by a client. <code>0.0.0.0</code> <code>String</code> <code>Port</code>  No The port this service will use. <code>7070</code> <code>Int</code><code>Var(Int)</code> <p>This shard sets up an HTTP server that listens for incoming connections, creates new peers for each connection, and delegates request handling to the specified handler wire. It manages the lifecycle of connections and ensures proper cleanup when the server is stopped.</p> <p> </p>"},{"location":"shards/shards/Http/Stream/","title":"Http.Stream","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> Bytes read from the stream. When the stream is exhausted, this will return an empty byte array. <code>Bytes</code> <code>Stream</code>  No The stream to read from. <code>none</code> <code>Var(Object)</code> <p>Reads data from a previously opened stream.</p> <p> </p>"},{"location":"shards/shards/Inputs/DebugUI/","title":"Inputs.DebugUI","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <p>Shows the input system debug UI</p> <p> </p>"},{"location":"shards/shards/Inputs/HandleURL/","title":"Inputs.HandleURL","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input value will pass through unchanged. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Action</code>  No Code to execute when a file drop event or URL event is received. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>This shard listens to file drop events and URL events. When files are dropped onto the application or URLs events are received, this shard executes the specified Action for each file dropped or URL event received. The file path or URL is then passed as a string to the Action.</p> <p> </p>"},{"location":"shards/shards/Inputs/IsKeyDown/","title":"Inputs.IsKeyDown","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a boolean value indicating whether the specified key is currently pressed down. <code>Bool</code> <code>Key</code>  No The key to check. `` <code>String</code> <p>This shard outputs true if the key specified is currently pressed down, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/Inputs/KeyDown/","title":"Inputs.KeyDown","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. The input is passed as input to the code specified in the Action parameter. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Key</code>  No The key to check. <code>none</code> <code>String</code> <code>Action</code>  No The code to run if the key event happened. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Repeat</code>  No If set to true, the event specified in the Action parameter will be repeated if the key is held down. Otherwise, the event will be executed only on the frame the key is pressed down. <code>false</code> <code>Bool</code> <code>Modifiers</code>  No Modifier keys to check for such as \"leftctrl\", \"leftshift\", \"leftalt\", \"rightctrl\", \"rightshift\", \"rightalt\", etc. <code>none</code> <code>None</code><code>[ModifierKey]</code> <code>Consume</code>  No If set to true, this event will be consumed. Meaning, if there was a previous shard with \"Consume\" set to true, all subsequent calls of the same shard with the same key specified will not activate. <code>true</code> <code>Bool</code> <code>SkipConsumed</code>  No If true, skips events already consumed by previous shards. If false, processes all events regardless of their consumed state. <code>true</code> <code>Bool</code> <p>This shard checks if the key specified is pressed down. If the key is pressed down, the shard executes the code specified in the Action parameter on the frame the key is pressed down. If the Repeat parameter is set to true, the code specified in the Action parameter will be repeated every frame the key is held down instead.</p> <p> </p>"},{"location":"shards/shards/Inputs/KeyUp/","title":"Inputs.KeyUp","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. The input is passed as input to the code specified in the Action parameter. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Key</code>  No The key to check. <code>none</code> <code>String</code> <code>Action</code>  No The code to run if the key event happened. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Repeat</code>  No This parameter is ignored for Inputs.KeyUp. <code>false</code> <code>Bool</code> <code>Modifiers</code>  No Modifier keys to check for such as \"leftctrl\", \"leftshift\", \"leftalt\", \"rightctrl\", \"rightshift\", \"rightalt\", etc. <code>none</code> <code>None</code><code>[ModifierKey]</code> <code>Consume</code>  No If set to true, this event will be consumed. Meaning, if there was a previous shard with \"Consume\" set to true, all subsequent calls of the same shard with the same key specified will not activate. <code>true</code> <code>Bool</code> <code>SkipConsumed</code>  No If true, skips events already consumed by previous shards. If false, processes all events regardless of their consumed state. <code>true</code> <code>Bool</code> <p>This shard checks if the key specified is released. If the key is released, the shard executes the code specified in the Action parameter on the frame the key is released.</p> <p> </p>"},{"location":"shards/shards/Inputs/MatchModifier/","title":"Inputs.MatchModifier","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a boolean value: true if any of the specified modifier keys are currently pressed down and false otherwise. <code>Bool</code> <code>Modifiers</code>  No Sequence of Modifier keys to check for such as Modifier::Shift, Modifier::Alt, Modifier::Primary and Modifier::Secondary. <code>none</code> <code>None</code><code>[ModifierKey]</code> <p>This shard outputs true if any of the modifier keys in the sequence provided in the Modifier parameter are currently pressed down, and false otherwise.</p> <p> </p>"},{"location":"shards/shards/Inputs/MouseDelta/","title":"Inputs.MouseDelta","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs how much the mouse has moved since the last frame, represented as a vector with 2 float elements. <code>Float2</code> <p>This shard outputs how much the mouse has moved since the last frame as a float2 vector. The first element represents the horizontal movement (a positive value indicates movement to the right), and the second element represents the vertical movement (a positive value indicates movement downwards).</p> <p> </p>"},{"location":"shards/shards/Inputs/MouseDown/","title":"Inputs.MouseDown","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. The input is passed as input to the code specified in the Action parameter. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Left</code>  No The action to perform when the left mouse button is pressed down. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Right</code>  No The action to perform when the right mouse button is pressed down. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Middle</code>  No The action to perform when the middle mouse button is pressed down. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Consume</code>  No If set to true, this event will be consumed. Meaning, if there was a previous shard with \"Consume\" set to true, all subsequent calls of the same shard with the same key specified will not activate. <code>true</code> <code>Bool</code> <code>SkipConsumed</code>  No If true, skips events already consumed by previous shards. If false, processes all events regardless of their consumed state. <code>true</code> <code>Bool</code> <p>Checks if the appropriate mouse button is pressed down. If it is pressed down, the shard executes the code specified in the respective parameter on the frame the button is pressed down. (If the Right Mouse button was pressed down, the code specified in the Right parameter will be executed.)</p> <p> </p>"},{"location":"shards/shards/Inputs/MousePixelPos/","title":"Inputs.MousePixelPos","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the pixel position of the cursor represented as a vector with 2 int elements. <code>Int2</code> <p>This shard outputs the current pixel position of the cursor within the input region, represented as an int2 vector. The first element represents the x position of the cursor, and the second element represents the y position of the cursor. The coordinates are in pixel space, with (0,0) being the top-left corner of the input region and (input-region-pixel-width, input-region-pixel-height) being the bottom-right corner.</p> <p> </p>"},{"location":"shards/shards/Inputs/MousePos/","title":"Inputs.MousePos","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the position of the cursor represented as a vector with 2 float elements. <code>Float2</code> <p>This shard outputs the current logical position of the cursor within the input region, represented as a float2 vector. The first element represents the x position of the cursor, and the second element represents the y position of the cursor. The coordinates are in the same space as the input region's size, with (0,0) being the top-left corner and (input-region-width,input-region-height) being the bottom-right corner.</p> <p> </p>"},{"location":"shards/shards/Inputs/MouseUp/","title":"Inputs.MouseUp","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Input of any type is accepted. The input is passed as input to the code specified in the Action parameter. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Left</code>  No The action to perform when the left mouse button is pressed down. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Right</code>  No The action to perform when the right mouse button is pressed down. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Middle</code>  No The action to perform when the middle mouse button is pressed down. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Consume</code>  No If set to true, this event will be consumed. Meaning, if there was a previous shard with \"Consume\" set to true, all subsequent calls of the same shard with the same key specified will not activate. <code>true</code> <code>Bool</code> <code>SkipConsumed</code>  No If true, skips events already consumed by previous shards. If false, processes all events regardless of their consumed state. <code>true</code> <code>Bool</code> <p>Checks if the appropriate mouse button is released. If it is released, the shard executes the code specified in the respective parameter on the frame the button is released.(If the Right Mouse button was released, the code specified in the Right parameter will be executed.)</p> <p> </p>"},{"location":"shards/shards/Inputs/PixelSize/","title":"Inputs.PixelSize","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the pixel size of the input region represented as a vector with two int elements. <code>Int2</code> <p>This shard outputs the pixel size of the input region represented as an int2 vector. The first element represents the width of the region, and the second element represents the height of the region.</p> <p> </p>"},{"location":"shards/shards/Inputs/Size/","title":"Inputs.Size","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the size of the input region represented as a vector with two float elements. <code>Float2</code> <p>This shard outputs the size of the input region represented as a float2 vector. The first element represents the width of the region, and the second element represents the height of the region.</p> <p> </p>"},{"location":"shards/shards/Jwt/Decode/","title":"Jwt.Decode","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <code>Jwk</code>  No The Key in JWK format to use for decoding the token. <code>none</code> <code>String</code><code>Var(String)</code> <code>Audience</code>  No The audience to use for decoding the token. <code>none</code> <code>String</code><code>Var(String)</code> <p>Decodes a JWT token</p> <p> </p>"},{"location":"shards/shards/LLM/Context/","title":"LLM.Context","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>LLM.Model</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>LLM.Context</code> <code>Embeddings</code>  No Enable embeddings mode <code>false</code> <code>Bool</code><code>Var(Bool)</code>"},{"location":"shards/shards/LLM/Detokenize/","title":"LLM.Detokenize","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Int]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <code>Model</code>  No The model to use <code>none</code> <code>Var(LLM.Model)</code><code>Var(LLM.Model)</code>"},{"location":"shards/shards/LLM/Embed/","title":"LLM.Embed","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Int]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float]</code> <code>Context</code>  No The LLM context to use <code>none</code> <code>Var(LLM.Context)</code> <code>Normalization</code>  No Normalization type: -1=none, 0=max_abs, 2=euclidean, &gt;2=p-norm <code>-1</code> <code>Int</code>"},{"location":"shards/shards/LLM/Model/","title":"LLM.Model","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>LLM.Model</code> <code>UseMmap</code>  No Use mmap to load the model <code>true</code> <code>Bool</code><code>Var(Bool)</code>"},{"location":"shards/shards/LLM/Tokenize/","title":"LLM.Tokenize","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Int]</code> <code>Model</code>  No The model to use <code>none</code> <code>Var(LLM.Model)</code>"},{"location":"shards/shards/ML/Detokenize/","title":"ML.Detokenize","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Int]</code><code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <code>Tokenizer</code>  No The tokenizer to use for detokenization. <code>none</code> <code>Var(Tokenizer)</code> <code>SkipSpecialTokens</code>  No If true, skip special tokens during detokenization. <code>true</code> <code>Bool</code> <p>Converts token IDs or tensors back into text using a tokenizer.</p> <p> </p>"},{"location":"shards/shards/ML/Forward/","title":"ML.Forward","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Tensor]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Tensor]</code> <code>Model</code>  No The model to use. <code>none</code> <code>Var(Model)</code> <p>Forward a tensor through a model.</p> <p> </p>"},{"location":"shards/shards/ML/Model/","title":"ML.Model","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Model</code> <code>Model</code>  No The model to use. <code>none</code> <code>MLModels</code> <code>Format</code>  No The format of the model. <code>none</code> <code>MLFormats</code> <code>Configuration</code>  No The configuration of the model. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <code>GPU</code>  No Whether to use the GPU (if available). <code>false</code> <code>Bool</code> <p>This shard allows you to load a machine learning model and specify its format and configuration.</p> <p> </p>"},{"location":"shards/shards/ML/Tokenizer/","title":"ML.Tokenizer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Tokenizer</code> <p>Loads a tokenizer from an input json string, ready to be used for tokenizing text.</p> <p> </p>"},{"location":"shards/shards/ML/Tokens/","title":"ML.Tokens","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Int]</code> <code>Tokenizer</code>  No The tokenizer to use. <code>none</code> <code>Var(Tokenizer)</code> <code>AddSpecialTokens</code>  No If true, add special tokens. <code>true</code> <code>Bool</code> <code>AsTensor</code>  No Outputs a tensor object instead of an int sequence. <code>false</code> <code>Bool</code> <code>Format</code>  No The format of the output tensor. If As Tensor is true. <code>TensorType::U32</code> <code>TensorType</code> <code>GPU</code>  No If true, the output tensor will be on the GPU (if ). <code>false</code> <code>Bool</code> <p>Tokenizes text using a tokenizer.</p> <p> </p>"},{"location":"shards/shards/Markdown/FromHTML/","title":"Markdown.FromHTML","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <p>Converts HTML to Markdown</p> <p> </p>"},{"location":"shards/shards/Markdown/Parse/","title":"Markdown.Parse","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[String]</code> <code>Reset</code>  No Reset the parser <code>false</code> <code>Bool</code><code>Var(Bool)</code> <p>A markdown commonmark pull parser.</p> <p> </p>"},{"location":"shards/shards/Math/Abs/","title":"Math.Abs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The numeric value or a sequence of numeric values to get the absolute value of. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the absolute value of the input. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard outputs the absolute value of the input.</p>"},{"location":"shards/shards/Math/Abs/#details","title":"Details","text":"<p>If a sequence of integers was provided as input, the shard will calculate the absolute value for each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the absolute value for each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the absolute value of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Abs/#examples","title":"Examples","text":"Code <pre><code>Const([-0.1 -0.2 0.4])\nMath.Abs | Log\n\nAssert.Is([0.1 0.2 0.4] true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Acos/","title":"Math.Acos","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the inverse cosine of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the angle in radians whose cosine is the input value. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the inverse cosine of the given input, where the input is the cosine value. The output is the angle in radians whose cosine is the input value.</p>"},{"location":"shards/shards/Math/Acos/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate the inverse cosine of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the inverse cosine of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the inverse cosine of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Acos/#examples","title":"Examples","text":"Code <pre><code>@f4(-1.0 0.0 0.5 1.0)\nMath.Acos | Log\n\nMath.Subtract(@f4(3.1415927 1.5707963 1.0471976 0.0)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Acosh/","title":"Math.Acosh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the inverse hyperbolic cosine of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the real number whose hyperbolic cosine is the input value. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the inverse hyperbolic cosine of the given input, where the input is the hyperbolic cosine value. The output is the real number whose hyperbolic cosine is the input value.</p>"},{"location":"shards/shards/Math/Acosh/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate the inverse hyperbolic cosine of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the inverse hyperbolic cosine of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the inverse hyperbolic cosine of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Acosh/#examples","title":"Examples","text":"Code <pre><code>@f3(1.0 2.0 2.5)\nMath.Acosh | Log\n\nMath.Subtract(@f3(0 1.3169578 1.5667992)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Add/","title":"Math.Add","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value or the sequence of values to add the value specified in the Operand parameter to. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> This shard outputs the result of the addition. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The value or sequence of values to add to the input. <code>0</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard adds the input value to the value provided in the Operand parameter.</p>"},{"location":"shards/shards/Math/Add/#details","title":"Details","text":"<p>This shard can take an integer or a sequence of integers as input. However, depending on the type of input, the appropriate <code>Operand</code> needs to be provided:</p> <p>For non-sequence inputs: The <code>Operand</code> must match the input type exactly (e.g., Int2 with Int2, Color with Color).</p> <p>For sequence inputs: The <code>Operand</code> can be either:   - A matching non-sequence type (e.g., sequence of Int2 with a single Int2 <code>Operand</code>). Each element of the input sequence is operated on by the <code>Operand</code>.   - Another sequence of elements with the same types. Each element of the <code>Operand</code> sequence is applied to the corresponding element of the input sequence. If the input sequence is longer, the <code>Operand</code> sequence will loop over till all elements of the input sequence are operated on. If the <code>Operand</code> sequence is longer, the extra elements of the <code>Operand</code> sequence are ignored.</p>"},{"location":"shards/shards/Math/Add/#examples","title":"Examples","text":"Code <pre><code>; Add unequal-sized sequences (input size &lt; operand size)\n[4.0] ; Input\nLog ; prints input =&gt; [4.0]\nMath.Add([3.0 4.0 2.2]) ; Operand\n; input seq elements compute with corresponding operand seq elements\n; since input size &lt; operand size, remaining operand seq elements ignored\nLog ; prints input + operand =&gt; [7.0]\nAssert.Is([7.0] true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Add unequal-sized sequences (input size &gt; operand size)\n[4 2 1 5 8] ; Input\nLog ; prints input =&gt; [4 2 1 5 8]\nMath.Add([6 4]) ; Operand\n; input seq elements compute with corresponding operand seq elements\n; for (input size &gt; operand size): remaining input seq elements continually loop over operand seq elements\nLog ; prints input + operand =&gt; [10 6 7 9 14]\nAssert.Is([10 6 7 9 14] true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Add floats\n5.3 ; Input\nLog ; prints input =&gt; 5.3\nMath.Add(2.1) ; Operand\nLog ; prints input + operand =&gt; 7.4\nAssert.Is(7.4 true) ; expect: (5.3 + 2.1) =&gt; 7.4\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Add equal-sized sequences\n[4 5.1 6.4] ; Input\nLog ; prints input =&gt; [4 5.1 6.4]\nMath.Add([3 4.0 2.2]) ; Operand\n; input seq elements compute with corresponding operand seq elements\nLog ; prints input + operand =&gt; [7 9.1 8.6]\nAssert.IsAlmost([7 9.1 8.6] true)\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Add integers\n5\nLog ; prints input =&gt; 5\nMath.Add(2) ; Operand\nLog ; prints input + operand =&gt; 7\nAssert.Is(7 true) ; expect: (5 + 2) =&gt; 7\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/And/","title":"Math.And","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value or the sequence of values to compare the value specified in the Operand parameter with. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code> <code>Output \u27a1\ufe0f</code> This shard outputs the value resulting from the AND operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code> <code>Operand</code>  No The value or sequence of values to compare the input with. <code>0</code> <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code><code>Var(Bool)</code> <p>This shard performs a bitwise AND operation on the input value with the value specified in the Operand parameter and outputs the result. A bitwise AND operation is a binary operation that compares each bit of the binary representations of two numbers and outputs 1 if the bits are 1 and 0 otherwise. The shard then outputs a value, whose binary representation is the concatenation of the resulting 1s and 0s from the AND comparison.</p>"},{"location":"shards/shards/Math/And/#examples","title":"Examples","text":"Code <pre><code>@i4(0 2 4 8)\nMath.And(\nOperand: @i4(3 3 3 3)) | Log(\n\nAssert.Is(@i4(0 2 0 0)) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Asin/","title":"Math.Asin","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the inverse sine of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the angle in radians whose sine is the input value. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the inverse sine of the given input, where the input is the sine value. The output is the angle in radians whose sine is the input value.</p>"},{"location":"shards/shards/Math/Asin/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate the inverse sine of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the inverse sine of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the inverse sine of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Asin/#examples","title":"Examples","text":"Code <pre><code>@f4(1.0 0.0 0.5 1.0)\nMath.Asin | Log\n\nMath.Subtract(@f4(-1.5707963 0.0 0.52359878 1.5707963)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Asinh/","title":"Math.Asinh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the inverse hyperbolic sine of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the real number whose hyperbolic sine is the input value. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the inverse hyperbolic sine of the given input, where the input is the hyperbolic sine value. The output is the real number whose hyperbolic sine is the input value.</p>"},{"location":"shards/shards/Math/Asinh/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate the inverse hyperbolic sine of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the inverse hyperbolic sine of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the inverse hyperbolic sine of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Asinh/#examples","title":"Examples","text":"Code <pre><code>@f3(-1.0 0.0 1.0)\nMath.Asinh | Log\n\nMath.Subtract(@f3(-0.88137359 0.0 0.88137359)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Atan/","title":"Math.Atan","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the inverse tangent of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the angle in radians whose tangent is the input value. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the inverse tangent of the given input, where the input is the tangent value. The output is the angle in radians whose tangent is the input value.</p>"},{"location":"shards/shards/Math/Atan/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate the inverse tangent of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the inverse tangent of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the inverse tangent of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Atan/#examples","title":"Examples","text":"Code <pre><code>@f3(-1.0 0.0 1.0)\nMath.Atan | Log\n\nMath.Subtract(@f3(-0.78539816 0.0 0.78539816)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Atanh/","title":"Math.Atanh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the inverse hyperbolic tangent of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the real number whose hyperbolic tangent is the input value. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the inverse hyperbolic tangent of the given input (atanh(x)), where x, outputs y such that tanh(y) = x.</p>"},{"location":"shards/shards/Math/Atanh/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate the inverse hyperbolic tangent of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the inverse hyperbolic tangent of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the inverse hyperbolic tangent of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Atanh/#examples","title":"Examples","text":"Code <pre><code>@f3(-0.5 0.0 0.5)\nMath.Atanh | Log\n\nMath.Subtract(@f3(-0.54930614 0.0 0.54930614)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/AxisAngleX/","title":"Math.AxisAngleX","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float value representing the X rotation in radians. <code>Float</code> <code>Output \u27a1\ufe0f</code> Outputs a float4 vector (a vector with 4 float elements) representing a rotation quaternion around the X-axis. <code>Float4</code> <p>This shard creates a rotation quaternion for rotation around the X-axis. It takes a float input representing the angle in radians and outputs the rotation quaternion as a float4 vector. A float4 vector is a vector with 4 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/AxisAngleY/","title":"Math.AxisAngleY","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float value representing the Y rotation in radians. <code>Float</code> <code>Output \u27a1\ufe0f</code> Outputs a float4 vector (a vector with 4 float elements) representing a rotation quaternion around the Y-axis. <code>Float4</code> <p>This shard creates a rotation quaternion for rotation around the Y-axis. It takes a float input representing the angle in radians and outputs the rotation quaternion as a float4 vector. A float4 vector is a vector with 4 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/AxisAngleZ/","title":"Math.AxisAngleZ","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float value representing the Z rotation in radians. <code>Float</code> <code>Output \u27a1\ufe0f</code> Outputs a float4 vector (a vector with 4 float elements) representing a rotation quaternion around the Z-axis. <code>Float4</code> <p>This shard creates a rotation quaternion for rotation around the Z-axis. It takes a float input representing the angle in radians and outputs the rotation quaternion as a float4 vector. A float4 vector is a vector with 4 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/Cbrt/","title":"Math.Cbrt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the cube root of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the cube root of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the cube root of the given input.</p>"},{"location":"shards/shards/Math/Cbrt/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate the cube root of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the cube root of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the cube root of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Cbrt/#examples","title":"Examples","text":"Code <pre><code>@f3(-27.0 1.0 8.0)\nMath.Cbrt | Log\n\nMath.Subtract(@f3(-3.0 1.0 2.0)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Ceil/","title":"Math.Ceil","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to round up. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the input rounded up to the nearest integer (as a float). <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard rounds up the input to the nearest integer.</p>"},{"location":"shards/shards/Math/Ceil/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will round up each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will round up each component in each vector in the sequence and output a sequence of vectors with each component in each vector rounded up.</p>"},{"location":"shards/shards/Math/Ceil/#examples","title":"Examples","text":"Code <pre><code>@f3(-0.95 4.0 7.54)\nMath.Ceil | Log\n\nAssert.Is(@f3(0.0 4.0 8.0) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Compose/","title":"Math.Compose","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a table as input. The table should have a Translation key with a float3 vector value, a Rotation key with a float4 vector value and a Scale key with a float3 vector value. Eg. <code>{translation: Float3 rotation: Float4 scale: Float3}</code> <code>Output \u27a1\ufe0f</code> Outputs a 4x4 transformation matrix (sequence of four float4 vectors) that combines the input translation, rotation, and scale. <code>[Float4](4)</code> <p>Creates a 4x4 transformation matrix (sequence of four float4 vectors) from a table containing the appropriate Translation, Rotation and Scale values. values. The translation value should be a float3 vector representing positions on the x y z axis. The rotation value should be a float4 vector representing the quaternion rotation. Lastly, the scale should be a float3 vector representing the size on the x y and z axis. Eg. {translation: @f3(1 2 3), rotation: @f4(0 0 0 1), scale: @f3(1 1 1)} A float3 vector is a vector with 3 float elements while a float4 vector is a vector with 4 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/Cos/","title":"Math.Cos","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the cosine of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the cosine of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the cosine of the given input, where the input is the angle in radians.</p>"},{"location":"shards/shards/Math/Cos/#details","title":"Details","text":"<p>If the input value is negative, the shard will interpret them as angles measured clockwise from the positive x-axis.</p> <p>Cos is a periodic function where the value repeats every 2\u03c0.</p> <p>Cos is bounded and will always return a value between -1 and 1.</p> <p>If a sequence of floats was provided as input, the shard will calculate the cosine of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the cosine of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the cosine of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Cos/#examples","title":"Examples","text":"Code <pre><code>@f3(0 3.1415927 6.2831853)\nMath.Cos | Log\n\nMath.Subtract(@f3(1.0 -1.0 1.0)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Cosh/","title":"Math.Cosh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the hyperbolic cosine of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the hyperbolic cosine of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the hyperbolic cosine of the given input, where the input is the real number. The hyperbolic cosine is a hyperbolic function that is analogous to the circular cosine function, but it uses exponential functions instead of angles.</p>"},{"location":"shards/shards/Math/Cosh/#details","title":"Details","text":"<p>Cosh is not a periodic function. It does not repeat its values.</p> <p>Cosh is unbounded and can grow to infinity as the input value grows.</p> <p>If a sequence of floats was provided as input, the shard will calculate the hyperbolic cosine of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the hyperbolic cosine of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the hyperbolic cosine of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Cosh/#examples","title":"Examples","text":"Code <pre><code>@f3(-1.0 0.0 1.0)\nMath.Cosh | Log\n\nMath.Subtract(@f3(1.5430806 1.0 1.5430806)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Cross/","title":"Math.Cross","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts float3 vector (a vector with 3 float elements) as input. <code>Float3</code><code>[Float3]</code> <code>Output \u27a1\ufe0f</code> Outputs the result of the cross product as a float3 vector or a sequence of float3 vectors if the input was a sequence of float3 vectors. <code>Float3</code><code>[Float3]</code> <code>Operand</code>  No The float3 vector to compute the cross product with. <code>0</code> <code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code><code>Var(Float2)</code><code>Var([Float2])</code><code>Var(Float3)</code><code>Var([Float3])</code><code>Var(Float4)</code><code>Var([Float4])</code> <p>This shard computes the cross product of the float3 vector (or sequence of float3 vectors) provided as input and the float3 vector provided in the Operand parameter and outputs the result as a float3 vector (or sequence of float3 vectors). A float3 vector is a vector with 3 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/Dec/","title":"Math.Dec","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The float or integer (or sequence of floats or integers) to decrease by 1. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input decreased by 1. <code>Any</code> <code>Value</code>  No The value to apply the operation to. <code>none</code> <code>Var(Int)</code><code>Var(Int2)</code><code>Var(Int3)</code><code>Var(Int4)</code><code>Var(Int8)</code><code>Var(Int16)</code><code>Var(Float)</code><code>Var(Float2)</code><code>Var(Float3)</code><code>Var(Float4)</code><code>Var(Color)</code><code>Var([Any])</code> <p>Decreases the input by 1.</p>"},{"location":"shards/shards/Math/Dec/#details","title":"Details","text":"<p>If a sequence of integers or floats was provided as input, the shard will decrease each element in the sequence by 1 and output a sequence.</p>"},{"location":"shards/shards/Math/Dec/#examples","title":"Examples","text":"Code <pre><code>10.0 &gt;= mutable\nMath.Dec(Value: mutable)\nmutable | Log\n\nAssert.Is(9.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Decompose/","title":"Math.Decompose","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a 4x4 transformation matrix as input. This matrix should be a sequence of four float4 vectors representing the combined translation, rotation, and scale transformations. <code>[Float4](4)</code> <code>Output \u27a1\ufe0f</code> Outputs a table containing the Translation, Rotation, and Scale components. Eg. <code>{translation: Float3 rotation: Float4 scale: Float3}</code> <p>This shard converts a 4x4 transformation matrix (a sequence of four float 4 vectors) into a table containing its constituent Translation, Rotation, and Scale components. The table has a Translation key with a float3 vector value representing positions on the x, y, z axes, a Rotation key with a float4 vector value representing the quaternion rotation, and a Scale key with a float3 vector value, representing the size on the x, y, z axes. Eg. {translation: @f3(1 2 3), rotation: @f4(0 0 0 1), scale: @f3(1 1 1)} A float3 vector is a vector with 3 float elements while a float4 vector is a vector with 4 float elements. </p> <p> </p>"},{"location":"shards/shards/Math/DegreesToRadians/","title":"Math.DegreesToRadians","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float value representing an angle in degrees. <code>Float</code> <code>Output \u27a1\ufe0f</code> Outputs a float value representing the input angle in radians. <code>Float</code> <p>This shard converts the input angle from degrees to radians. The conversion is done using the formula: radians = degrees * (\u03c0 / 180).</p> <p> </p>"},{"location":"shards/shards/Math/Divide/","title":"Math.Divide","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value or the sequence of values to divide the value specified in the Operand parameter with. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> This shard outputs the result of the division. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The value or sequence of values to divide the input by. <code>0</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard divides the input value by the value provided in the Operand parameter.</p>"},{"location":"shards/shards/Math/Divide/#details","title":"Details","text":"<p>This shard can take an integer or a sequence of integers as input. However, depending on the type of input, the appropriate <code>Operand</code> needs to be provided:</p> <p>For non-sequence inputs: The <code>Operand</code> must match the input type exactly (e.g., Int2 with Int2, Color with Color).</p> <p>For sequence inputs: The <code>Operand</code> can be either:   - A matching non-sequence type (e.g., sequence of Int2 with a single Int2 <code>Operand</code>). Each element of the input sequence is operated on by the <code>Operand</code>.   - Another sequence of elements with the same types. Each element of the <code>Operand</code> sequence is applied to the corresponding element of the input sequence. If the input sequence is longer, the <code>Operand</code> sequence will loop over till all elements of the input sequence are operated on. If the <code>Operand</code> sequence is longer, the extra elements of the <code>Operand</code> sequence are ignored.</p>"},{"location":"shards/shards/Math/Divide/#examples","title":"Examples","text":"Code <pre><code>9.0\nMath.Divide(Operand: 2.0) | Log\n\nAssert.Is(4.5 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Dot/","title":"Math.Dot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes in a float vector of any dimension (e.g., float2, float3, float4). <code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code> <code>Output \u27a1\ufe0f</code> Outputs the resulting dot product as a float value. <code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code> <code>Operand</code>  No The operand. <code>0</code> <code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code><code>Var(Float2)</code><code>Var([Float2])</code><code>Var(Float3)</code><code>Var([Float3])</code><code>Var(Float4)</code><code>Var([Float4])</code> <p>Computes the dot product of two float vectors with an equal number of elements, and outputs the resulting float value. The first float vector is passed as input and the second float vector is specified in the Operand parameter.</p> <p> </p>"},{"location":"shards/shards/Math/Erf/","title":"Math.Erf","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the error function of. This can be any real number. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs probability result of the error function of the input. The output is always between -1 and 1. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the error function of the given input. The error function is related to the probability that a random variable with normal distribution of mean 0 and variance 1/2 falls in the range specified by the input value.</p>"},{"location":"shards/shards/Math/Erf/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate error function for each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate error function for each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the result of the error function calculation of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Erf/#examples","title":"Examples","text":"Code <pre><code>@f3(0.0 1.0 2.0)\nMath.Erf | Log\n\nMath.Subtract(@f3(0.0 0.84270079 0.99532226)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Erfc/","title":"Math.Erfc","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the complementary error function of. This can be any real number. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the probability result of the complementary error function of the input. The output is always between 0 and 2. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the complementary error function of the given input. The complementary error function is related to the probability that the absolute value of a random variable with normal distribution of mean 0 and variance 1/2 is greater than the input value.</p>"},{"location":"shards/shards/Math/Erfc/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate the complimentary error function for each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the complimentary error function for each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the result of the complimentary error function calculation of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Erfc/#examples","title":"Examples","text":"Code <pre><code>@f3(0.0 1.0 2.0)\nMath.Erfc | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Exp/","title":"Math.Exp","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to use as the exponent for the base e exponential function. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the result of the exponential operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the exponential function with base e (Euler's number) for the given input. The exponential function is equivalent to raising Euler's number to the power of the input.</p>"},{"location":"shards/shards/Math/Exp/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate <code>e^x</code> for each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate <code>e^x</code> for each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the result of the exponential calculation of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Exp/#examples","title":"Examples","text":"Code <pre><code>0.0\nMath.Exp | Log\n\nAssert.Is(1.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Exp2/","title":"Math.Exp2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats used as the exponent for the base 2 exponential function. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the result of the exponential operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the exponential function with base 2 for the given input. The exponential function with base 2 is equivalent to raising 2 to the power of the input.</p>"},{"location":"shards/shards/Math/Exp2/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate <code>2^x</code> for each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate <code>2^x</code> for each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the result of the exponential calculation of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Exp2/#examples","title":"Examples","text":"Code <pre><code>5.0\nMath.Exp2 | Log\n\nAssert.Is(32.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Expm1/","title":"Math.Expm1","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats used as the exponent for the base e exponential function. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the result of the exponential operation. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the exponential function with base e (Euler's number) for the given input and subtracts 1 from the result.</p>"},{"location":"shards/shards/Math/Expm1/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate <code>e^x - 1</code> for each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate <code>e^x - 1</code> for each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the result of the exponential calculation of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Expm1/#examples","title":"Examples","text":"Code <pre><code>0.0\nMath.Expm1 | Log\n\nAssert.Is(0.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/FastInvSqrt/","title":"Math.FastInvSqrt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the inverse square root of. This value must be a positive number or sequence of positive numbers. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the inverse square root of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the inverse square root of the given input.</p>"},{"location":"shards/shards/Math/FastInvSqrt/#details","title":"Details","text":"<p>This shard calculates the inverse square root of a number fast like <code>Math.FastSqrt</code>, at the cost of accuracy. For most everyday numbers, the difference is negligible. The difference is more pronounced for very large numbers, very small numbers, or numbers very close to perfect squares.</p> <p>If a sequence of floats was provided as input, the shard will calculate the inverse square root of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the inverse square root of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the inverse square root of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/FastInvSqrt/#examples","title":"Examples","text":"Code <pre><code>4.0\nMath.FastInvSqrt | Log\n\nMath.Subtract(0.4999978) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/FastSqrt/","title":"Math.FastSqrt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the square root of. This value must be a positive number or sequence of positive numbers. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the square root of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the square root of the given input.</p>"},{"location":"shards/shards/Math/FastSqrt/#details","title":"Details","text":"<p>This shard calculates the square root of a number faster than <code>Math.Sqrt</code>, but is less accurate. For most everyday numbers, the difference is negligible. The difference is more pronounced for very large numbers, very small numbers, or numbers very close to perfect squares.</p> <p>If a sequence of floats was provided as input, the shard will calculate the square root of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the square root of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the square root of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/FastSqrt/#examples","title":"Examples","text":"Code <pre><code>4.0\nMath.FastSqrt | Log\n\nMath.Subtract(2.0) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Floor/","title":"Math.Floor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to round down. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the input rounded down to the nearest integer (as a float). <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard rounds down the input to the nearest integer.</p>"},{"location":"shards/shards/Math/Floor/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will round down each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will round down each component in each vector in the sequence and output a sequence of vectors with each component in each vector rounded down.</p>"},{"location":"shards/shards/Math/Floor/#examples","title":"Examples","text":"Code <pre><code>@f3(-0.95 4.0 7.54)\nMath.Floor | Log\n\nAssert.Is(@f3(-1.0 4.0 7.0) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Inc/","title":"Math.Inc","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The float or integer (or sequence of floats or integers) to increase by 1. <code>Any</code> <code>Output \u27a1\ufe0f</code> The input increased by 1. <code>Any</code> <code>Value</code>  No The value to apply the operation to. <code>none</code> <code>Var(Int)</code><code>Var(Int2)</code><code>Var(Int3)</code><code>Var(Int4)</code><code>Var(Int8)</code><code>Var(Int16)</code><code>Var(Float)</code><code>Var(Float2)</code><code>Var(Float3)</code><code>Var(Float4)</code><code>Var(Color)</code><code>Var([Any])</code> <p>Increases the input by 1.</p>"},{"location":"shards/shards/Math/Inc/#details","title":"Details","text":"<p>If a sequence of integers or floats was provided as input, the shard will increase each element in the sequence by 1 and output a sequence.</p>"},{"location":"shards/shards/Math/Inc/#examples","title":"Examples","text":"Code <pre><code>10.0 &gt;= mutable\nMath.Inc(Value: mutable)\nmutable | Log\nAssert.Is(11.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Inverse/","title":"Math.Inverse","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a 4x4 matrix (a sequence of four float4 vectors) as input. <code>[Float4](4)</code> <code>Output \u27a1\ufe0f</code> Outputs the inverse of the input 4x4 matrix. <code>[Float4](4)</code> <p>This shard takes a 4x4 matrices as input and computes its inverse. A 4x4 matrix is a sequence with exactly 4 float4 vectors while a float4 vector is a vector with 4 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/LGamma/","title":"Math.LGamma","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the log gamma function of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the log gamma function of the input. The output is always positive for positive inputs. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the log gamma function of the given input. The log gamma function is the natural logarithm of the absolute value of the gamma function.</p>"},{"location":"shards/shards/Math/LGamma/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate the log gamma function for each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the log gamma function for each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the result of the log gamma function calculation of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/LGamma/#examples","title":"Examples","text":"Code <pre><code>@f3(1.0 0.5 10.0)\nMath.LGamma | Log\n\nMath.Subtract(@f3(0.0 0.572365 12.801827)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/LShift/","title":"Math.LShift","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The integer or the sequence of integers to shift the bits of. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the value resulting from the left shift operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The number of positions to shift the bits of the input value to the left by. <code>0</code> <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code> <p>This shard shifts the bits of the input value to the left by the number of positions specified in the Operand parameter. The shard then outputs a value, whose binary representation is the resulting shifted binary.</p>"},{"location":"shards/shards/Math/LShift/#details","title":"Details","text":"<p>This shard can take an integer or a sequence of integers as input. However, depending on the type of input, the appropriate <code>Operand</code> needs to be provided:</p> <p>For non-sequence inputs: The <code>Operand</code> must match the input type exactly (e.g., Int2 with Int2, Color with Color).</p> <p>For sequence inputs: The <code>Operand</code> can be either:   - A matching non-sequence type (e.g., sequence of Int2 with a single Int2 <code>Operand</code>). Each element of the input sequence is operated on by the <code>Operand</code>.   - Another sequence of elements with the same types. Each element of the <code>Operand</code> sequence is applied to the corresponding element of the input sequence. If the input sequence is longer, the <code>Operand</code> sequence will loop over till all elements of the input sequence are operated on. If the <code>Operand</code> sequence is longer, the extra elements of the <code>Operand</code> sequence are ignored.</p>"},{"location":"shards/shards/Math/LShift/#examples","title":"Examples","text":"Code <pre><code>4\nMath.LShift(2) | Log\nAssert.Is(16 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Length/","title":"Math.Length","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts a float vector of any dimension (e.g., float2, float3, float4). <code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code> <code>Output \u27a1\ufe0f</code> Outputs the magnitude of the input vector as a float. <code>Float</code> <p>Computes the magnitude of a float vector of any dimension and outputs the result as a float.</p> <p> </p>"},{"location":"shards/shards/Math/LengthSquared/","title":"Math.LengthSquared","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts a float vector of any dimension (e.g., float2, float3, float4). <code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code> <code>Output \u27a1\ufe0f</code> Outputs the squared magnitude of the input vector as a float. <code>Float</code> <p>Computes the squared magnitude of a float vector of any dimension and outputs the result as a float.</p> <p> </p>"},{"location":"shards/shards/Math/Lerp/","title":"Math.Lerp","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The factor to interpolate between the start and end values. <code>Float</code> <code>Output \u27a1\ufe0f</code> The interpolated value between the start and end values based on the factor provided as input. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>First</code>  No The start value <code>none</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code> <code>Second</code>  No The end value <code>none</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code> <p>Linearly interpolate between the start value specified in the <code>First</code> parameter and the end value specified in the <code>Second</code> parameter based on the factor provided as input.</p>"},{"location":"shards/shards/Math/Lerp/#details","title":"Details","text":"<p>The value in the <code>First</code> parameter and the <code>Second</code> parameter must be of the same type.</p> <p>If the integers are provided in the <code>First</code> and <code>Second</code> parameters, the output of the shard will be an integer rounded down to the nearest integer.</p> <p>If vectors are provided in the <code>First</code> and <code>Second</code> parameters, The first element in the <code>First</code> vector will be linearly interpolated to the first element in the <code>Second</code> vector, the second element in the <code>First</code> vector will be linearly interpolated to the second element in the <code>Second</code> vector, and so on.</p> <p>Do note that the output of the shard is not automatically written to the value in the <code>First</code> parameter. Consider the following example: <pre><code>@wire(lerp {\n  Once({\n    0 &gt;= x\n  })\n\n  0.1\n  Math.Lerp(First: x Second: 100)\n  Log(\"Result\")\n} Looped: true)\n</code></pre> The output will always be <code>10</code> regardless of how many times the Math.Lerp shard is called. For the output value to progress, you must write the output back to <code>x</code>. Like so: <pre><code>@wire(lerp {\n  Once({\n    0 &gt;= x\n  })\n\n  0.1\n  Math.Lerp(First: x Second: 100)\n  &gt; x\n  Log(\"Result\")\n} Looped: true)\n</code></pre> Now the first time <code>Math.Ler</code> is called the output will be 10, then 20 and so on.</p> <p> </p>"},{"location":"shards/shards/Math/Log/","title":"Math.Log","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the natural logarithm of. This value must be a positive number or sequence of positive numbers. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the natural logarithm of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the natural logarithm for the given input. The output is the exponent to which e must be raised to obtain the input value.</p>"},{"location":"shards/shards/Math/Log/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate <code>ln(x)</code> for each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate <code>ln(x)</code> for each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the result of the logarithmic calculation of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Log/#examples","title":"Examples","text":"Code <pre><code>@f3(1.0 0.5 10.0)\nMath.Log | Log\n\nMath.Subtract(@f3(0.0 -0.69314718 2.3025851)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Log10/","title":"Math.Log10","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the base 10 logarithm of. This value must be a positive number or sequence of positive numbers. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the base 10 logarithm of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the base 10 logarithm for the given input. The output is the exponent to which 10 must be raised to obtain the input value.</p>"},{"location":"shards/shards/Math/Log10/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate <code>Log10(x)</code> for each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate <code>Log10(x)</code> for each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the result of the logarithmic calculation of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Log10/#examples","title":"Examples","text":"Code <pre><code>@f3(1.0 0.5 10.0)\nMath.Log10 | Log\n\nMath.Subtract(@f3(0.0 -0.30102999 1.0)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Log1p/","title":"Math.Log1p","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to add 1 to and then calculate the natural logarithm of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the natural logarithm of the input plus 1. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard adds 1 to the input and then calculates the natural logarithm of the result.</p> <p> </p>"},{"location":"shards/shards/Math/Log2/","title":"Math.Log2","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the base 2 logarithm of. This value must be a positive number or sequence of positive numbers. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the base 2 logarithm. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the base 2 logarithm for the given input. The output is the exponent to which 2 must be raised to obtain the input value.</p>"},{"location":"shards/shards/Math/Log2/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate <code>Log2(x)</code> for each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate <code>Log2(x)</code> for each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the result of the logarithmic calculation of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Log2/#examples","title":"Examples","text":"Code <pre><code>@f3(1.0 0.5 10.0)\nMath.Log2 | Log\n\nMath.Subtract(@f3(0.0 -1.0 3.3219281)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/LookAt/","title":"Math.LookAt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a table with two float3 values: 'Position' (the camera's position) and 'Target' (the point the camera is looking at). Eg. <code>{Position: Float3 Target: Float3}</code> <code>Output \u27a1\ufe0f</code> Outputs a 4x4 view matrix (a sequence of four float4 vectors). <code>[Float4](4)</code> <p>This shard creates a 4x4 view matrix (a sequence of four float4 vectors) for a camera based on the camera's position and a target point which is represented as a table with two float3 vectors: 'Position' and 'Target', that is passed as input. A float4 vector is a vector with 4 float elements while a float3 vector is a vector with 3 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/MatIdentity/","title":"Math.MatIdentity","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a 4x4 identity matrix (a sequence of four float4 vectors). The matrix will have 1s on the main diagonal and 0s for the other elements. <code>[Float4](4)</code> <code>Type</code>  No The matrix row type of the corresponding matrix <code>Type::Float4</code> <code>Type</code> <p>This shard creates a standard 4x4 identity matrix. The standard identity matrix is a square matrix with 1s on the main diagonal and 0s for the other elements. A 4x4 matrix is a sequence with exactly 4 float4 vector and a float4 vector is a vector with 4 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/MatMul/","title":"Math.MatMul","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a matrix as input. (2x2, 3x3 or 4x4) <code>[Float4](4)</code><code>[Float3](3)</code><code>[Float2](2)</code> <code>Output \u27a1\ufe0f</code> Outputs the result of the matrix multiplication. If a matrix is multiplied by a vector, the result is a vector (depending on the dimensions of the matrix provided). If two matrices are multiplied, the result is a matrix with the same dimensions as the input matrix. <code>[Float4](4)</code><code>Float4</code><code>[Float3](3)</code><code>Float3</code><code>[Float2](2)</code><code>Float2</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>Performs matrix multiplication on either two matrices or a matrix and a vector and outputs either a matrix or a vector accordingly. The two matrixes must be of similar dimensions (2x2, 3x3, or 4x4). And if multiplied with a vector, the vector too must have similar dimensions (2x2 with float2, 3x3 with float3, 4x4 with float4).</p> <p> </p>"},{"location":"shards/shards/Math/Mean/","title":"Math.Mean","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The sequence of floating point numbers to calculate the average of. <code>[Float]</code> <code>Output \u27a1\ufe0f</code> The calculated average as a float. <code>Float</code> <code>Kind</code>  No The type of average to calculate. <code>Mean::Arithmetic</code> <code>Mean</code> <p>Calculates the average value of a sequence of floating point numbers.</p>"},{"location":"shards/shards/Math/Mean/#details","title":"Details","text":"<p>This shard calculates the average of the sequence of floats differently depending on what was specified in the <code>Kind</code> parameter. - Arithmetic: sum divided by count - Geometric: nth root of product - Harmonic: reciprocal of average of reciprocals</p>"},{"location":"shards/shards/Math/Mean/#examples","title":"Examples","text":"Code <pre><code>Const([-1.0 0.0 1.0 2.0 5.0])\nMath.Mean(Kind: Mean::Arithmetic) | Log\n\nAssert.Is(1.4 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Mod/","title":"Math.Mod","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value or the sequence of values to divide the value specified in the Operand parameter with. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> This shard outputs the result of the modulus operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The value or sequence of values to divide the input by and get the remainder of. <code>0</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard calculates the remainder of the division of the input value by the value provided in the Operand parameter.</p>"},{"location":"shards/shards/Math/Mod/#details","title":"Details","text":"<p>This shard can take an integer or a sequence of integers as input. However, depending on the type of input, the appropriate <code>Operand</code> needs to be provided:</p> <p>For non-sequence inputs: The <code>Operand</code> must match the input type exactly (e.g., Int2 with Int2, Color with Color).</p> <p>For sequence inputs: The <code>Operand</code> can be either:   - A matching non-sequence type (e.g., sequence of Int2 with a single Int2 <code>Operand</code>). Each element of the input sequence is operated on by the <code>Operand</code>.   - Another sequence of elements with the same types. Each element of the <code>Operand</code> sequence is applied to the corresponding element of the input sequence. If the input sequence is longer, the <code>Operand</code> sequence will loop over till all elements of the input sequence are operated on. If the <code>Operand</code> sequence is longer, the extra elements of the <code>Operand</code> sequence are ignored.</p>"},{"location":"shards/shards/Math/Mod/#examples","title":"Examples","text":"Code <pre><code>@i4(1 2 3 4)\nMath.Mod(\nOperand:\n@i4(2 2 2 2)) | Log\n\nAssert.Is(@i4(1 0 1 0) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Multiply/","title":"Math.Multiply","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value or the sequence of values to multiply the value specified in the Operand parameter with. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> This shard outputs the result of the multiplication. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The value or sequence of values to multiply the input by. <code>0</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard multiplies the input value by the value provided in the Operand parameter.</p>"},{"location":"shards/shards/Math/Multiply/#details","title":"Details","text":"<p>This shard can take an integer or a sequence of integers as input. However, depending on the type of input, the appropriate <code>Operand</code> needs to be provided:</p> <p>For non-sequence inputs: The <code>Operand</code> must match the input type exactly (e.g., Int2 with Int2, Color with Color).</p> <p>For sequence inputs: The <code>Operand</code> can be either:   - A matching non-sequence type (e.g., sequence of Int2 with a single Int2 <code>Operand</code>). Each element of the input sequence is operated on by the <code>Operand</code>.   - Another sequence of elements with the same types. Each element of the <code>Operand</code> sequence is applied to the corresponding element of the input sequence. If the input sequence is longer, the <code>Operand</code> sequence will loop over till all elements of the input sequence are operated on. If the <code>Operand</code> sequence is longer, the extra elements of the <code>Operand</code> sequence are ignored.</p>"},{"location":"shards/shards/Math/Multiply/#examples","title":"Examples","text":"Code <pre><code>; Multiply unequal-sized sequences (input size &lt; operand size)\n[4.0] ; Input\nLog ; prints input =&gt; [4.0]\nMath.Multiply([3.0 4.0 2.2]) ; Operand\n; input seq elements compute with corresponding operand seq elements\n; since input size &lt; operand size, remaining operand seq elements ignored\nLog ; prints input * operand =&gt; [12.0]\nAssert.Is([12.0] true) ; expect: [(4.0 * 3.0) ... ...] =&gt; [12.0]\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Multiply unequal-sized sequences (input size &gt; operand size)\n[4 2 1 5 8] ; Input\nLog ; prints input =&gt; [4 2 1 5 8]\nMath.Multiply([6 4]) ; Operand\n; input seq elements compute with corresponding operand seq elements\n; for (input size &gt; operand size): remaining input seq elements continually loop over operand seq elements\nLog ; prints input + operand =&gt; [24 8 6 20 48]\nAssert.Is([24 8 6 20 48] true) ; expect: [(4 * 6) (2 * 4) (1 * 6) (5 * 4) (8 * 6)] =&gt; [24 8 6 20 48]\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Multiply floats\n5.3 ; Input\nLog ; prints input =&gt; 5.3\nMath.Multiply(2.1) ; Operand\nLog ; prints input * operand =&gt; 11.13\nAssert.Is(11.13 true) ; expect: (5.3 * 2.1) =&gt; 11.13\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Multiply equal-sized sequences\n[4 5.1 6.4] ; Input\nLog ; prints input =&gt; [4 5.1 6.4]\nMath.Multiply([3 4.0 2.2]) ; Operand\n; input seq elements compute with corresponding operand seq elements\nLog ; prints input * operand =&gt; [12 20.4 14.08]\nAssert.IsAlmost([12 20.4 14.08]) ; expect: [(4 * 3) (5.1 * 4.0) (6.4 * 2.2)] =&gt; [12 20.4 14.08]\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>; Multiply integers\n5 ; Input\nLog ; prints input =&gt; 5\nMath.Multiply(2) ; Operand\nLog ; prints input * operand =&gt; 10\nAssert.Is(10 true) ; expect: (5 * 2) =&gt; 10\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Negate/","title":"Math.Negate","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The float or integer (or sequence of floats or integers) to reverse the sign of. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The input with its sign reversed. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard reverses the sign of the input. (A positive number becomes negative, and vice versa).</p>"},{"location":"shards/shards/Math/Negate/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will reverse the sign of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will reverse the sign of each component in each vector in the sequence and output a sequence of vectors with each component in each vector with its sign reversed.</p> <p>This shard cannot accept a sequence with multiple types as input.</p> <p> </p>"},{"location":"shards/shards/Math/Normalize/","title":"Math.Normalize","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Accepts a float vector of any dimension (e.g., float2, float3, float4) or a float sequence of any length. <code>[Float]</code><code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code> <code>Output \u27a1\ufe0f</code> Outputs a float vector of the same dimension or a float sequence of the same length as what was passed as input but with its values normalized to a magnitude of 1. <code>[Float]</code><code>Float2</code><code>[Float2]</code><code>Float3</code><code>[Float3]</code><code>Float4</code><code>[Float4]</code> <code>Positive</code>  No If set to true, the output will be in the range 0.0~1.0 instead of -1.0~1.0. <code>false</code> <code>Bool</code> <p>This shard normalizes a float vector of any dimension or a sequence of floats, scaling it to have a magnitude of 1 while preserving its direction. By default, output values can range from -1.0 to 1.0. If the 'Positive' parameter is set to true, the output will be scaled to the range 0.0 to 1.0. For example, normalizing [4.0 -5.0 6.0 -7.0] will result in [0.3563, -0.4454, 0.5345, -0.6236], which has a length of 1. </p> <p> </p>"},{"location":"shards/shards/Math/Or/","title":"Math.Or","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value or the sequence of values to compare the value specified in the Operand parameter with. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code> <code>Output \u27a1\ufe0f</code> This shard outputs the value resulting from the OR operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code> <code>Operand</code>  No The value or sequence of values to compare the input with. <code>0</code> <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code><code>Var(Bool)</code> <p>This shard performs a bitwise OR operation on the input value with the value specified in the Operand parameter and outputs the result. A bitwise OR operation is a binary operation that compares each bit of the binary representations of two numbers and outputs 1 if either bit is 1 and 0 if both bits are 0. The shard then outputs a value, whose binary representation is the concatenation of the resulting 1s and 0s from the Or comparison.</p>"},{"location":"shards/shards/Math/Or/#examples","title":"Examples","text":"Code <pre><code>@i4(0 2 4 8)\nMath.Or(Operand: @i4(3 3 3 3))\n(Log)\n\nAssert.Is(@i4(3 3 7 11) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Orthographic/","title":"Math.Orthographic","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs a 4x4 orthographic projection matrix (a sequence of four float4 vectors). <code>[Float4](4)</code> <code>Width</code>  No Width size. <code>1280</code> <code>Int</code><code>Float</code> <code>Height</code>  No Height size. <code>720</code> <code>Int</code><code>Float</code> <code>Near</code>  No Near plane. <code>0</code> <code>Int</code><code>Float</code> <code>Far</code>  No Far plane. <code>1000</code> <code>Int</code><code>Float</code> <p>This shard creates a 4x4 orthographic projection matrix based on the width size, height size, near, and far planes specified in the appropriate parameters. A 4x4 matrix is a sequence with exactly 4 float4 vectors while a float4 vector is a vector with 4 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/Percentile/","title":"Math.Percentile","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The sequence of floats to calculate the percentile of. <code>[Float]</code> <code>Output \u27a1\ufe0f</code> The percentile of the input value within the specified sequence. <code>Float</code> <code>Percentile</code>  No The percentile to calculate. <code>50</code> <code>Float</code><code>Var(Float)</code> <p>This shard calculates the percentile of the input value within the specified sequence.</p> <p> </p>"},{"location":"shards/shards/Math/Pow/","title":"Math.Pow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The base value to raise the power of. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> The result of raising the input to the power of the operand. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The operand for this operation. <code>0</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard raises the input to the power of the exponent specified in the Operand parameter.</p>"},{"location":"shards/shards/Math/Pow/#examples","title":"Examples","text":"Code <pre><code>2.0\nMath.Pow(Operand: 3.0) | Log\n\nAssert.Is(8.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Project/","title":"Math.Project","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float3 vector representing the 3D point in world space where x, y, and z are the coordinates in world space. <code>Float3</code> <code>Output \u27a1\ufe0f</code> Outputs a float3 vector representing the projected 2D point (x, y) in screen space, with the z component representing the depth. <code>Float3</code> <code>Matrix</code>  No The combined 4x4 view-projection matrix (sequence of four float4 vectors) to use. <code>none</code> <code>[Float4](4)</code><code>Var([Float4](4))</code> <code>ScreenSize</code>  No The size of the screen or viewport in pixels. <code>none</code> <code>Float2</code><code>Var(Float2)</code> <code>FlipY</code>  No Flip Y coordinate (on by default). <code>true</code> <code>Bool</code><code>Var(Var(Bool))</code> <p>This shard converts the input 3D world coordinates to 2D screen coordinates using a view-projection matrix. Both 3D and 2D coordinates are represented as float3 vectors (vectors with 3 float elements).It performs the full projection pipeline including matrix multiplication, perspective division, and viewport transformation using the 4x4 view-projection matrix specified in the Matrix parameter and the screen size in the ScreenSize parameter.</p> <p> </p>"},{"location":"shards/shards/Math/QuatMultiply/","title":"Math.QuatMultiply","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float4 vector representing the quaternion to be multiplied. <code>Float4</code> <code>Output \u27a1\ufe0f</code> Outputs a float4 vector representing the resulting quaternion after multiplication. <code>Float4</code> <code>Operand</code>  No The float4 vector representing the second quaternion to multiply the input quaternion with. <code>none</code> <code>Float4</code><code>Var(Float4)</code> <p>This shard multiplies two quaternions (represented as float4 vectors) together. It combines the two rotations by multiplying the input quaternion with the operand quaternion. A float4 vector is a vector with 4 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/QuatRotate/","title":"Math.QuatRotate","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float3 vector representing the 3D vector to be rotated. <code>Float3</code> <code>Output \u27a1\ufe0f</code> Outputs a float3 vector representing the rotated 3D vector. <code>Float3</code> <code>Operand</code>  No The float4 vector representing the quaternion to rotate the input 3D vector by. <code>none</code> <code>Float4</code><code>Var(Float4)</code> <p>This shard rotates the input 3D vector (represented as a float3) by the quaternion (represented as a float4) specified in the Operand parameter and outputs the resulting rotated 3D vector. A float4 vector is a vector with 4 float elements while a float3 vector is a vector with 3 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/RShift/","title":"Math.RShift","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The integer or the sequence of integers to shift the bits of. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the value resulting from the right shift operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The number of positions to shift the bits of the input value to the right by. <code>0</code> <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code> <p>This shard shifts the bits of the input value to the right by the number of positions specified in the Operand parameter. The shard then outputs a value, whose binary representation is the resulting shifted binary.</p>"},{"location":"shards/shards/Math/RShift/#details","title":"Details","text":"<p>This shard can take an integer or a sequence of integers as input. However, depending on the type of input, the appropriate <code>Operand</code> needs to be provided:</p> <p>For non-sequence inputs: The <code>Operand</code> must match the input type exactly (e.g., Int2 with Int2, Color with Color).</p> <p>For sequence inputs: The <code>Operand</code> can be either:   - A matching non-sequence type (e.g., sequence of Int2 with a single Int2 <code>Operand</code>). Each element of the input sequence is operated on by the <code>Operand</code>.   - Another sequence of elements with the same types. Each element of the <code>Operand</code> sequence is applied to the corresponding element of the input sequence. If the input sequence is longer, the <code>Operand</code> sequence will loop over till all elements of the input sequence are operated on. If the <code>Operand</code> sequence is longer, the extra elements of the <code>Operand</code> sequence are ignored.</p>"},{"location":"shards/shards/Math/RShift/#examples","title":"Examples","text":"Code <pre><code>4\nMath.RShift(2) | Log\n\nAssert.Is(1 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/RadiansToDegrees/","title":"Math.RadiansToDegrees","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float value representing an angle in radians. <code>Float</code> <code>Output \u27a1\ufe0f</code> Outputs a float value representing the input angle in degrees. <code>Float</code> <p>This shard converts the input angle from radians to degrees. The conversion is done using the formula: degrees = radians * (180 / \u03c0).</p> <p> </p>"},{"location":"shards/shards/Math/Rotation/","title":"Math.Rotation","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float4 vector (a vector with 4 float elements) representing a rotation quaternion. <code>Float4</code> <code>Output \u27a1\ufe0f</code> Outputs a 4x4 rotation matrix (a sequence of four float4 vectors). <code>[Float4](4)</code> <p>This shard creates a 4x4 rotation matrix (a sequence of four float4 vectors) from a float4 vector input representing a rotation quaternion. A float4 vector is a vector with 4 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/Round/","title":"Math.Round","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to round. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the input rounded to the nearest integer (as a float). <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard rounds the input floating-point number to the nearest integer.</p>"},{"location":"shards/shards/Math/Round/#details","title":"Details","text":"<p>If the inputs with fractional parts that are greater than 0.5, the output will be rounded up. If the inputs with fractional parts that are less than 0.5, the output will be rounded down. If the inputs with fractional parts that are equal to 0.5, the output will be rounded to the nearest even number.</p> <p>If a sequence of floats was provided as input, the shard will round each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will round each component in each vector in the sequence and output a sequence of vectors with each component in each vector rounded.</p>"},{"location":"shards/shards/Math/Round/#examples","title":"Examples","text":"Code <pre><code>@f3(-0.95 4.0 7.54)\nMath.Round | Log\n\nAssert.Is(@f3(-1.0 4.0 8.0) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Scaling/","title":"Math.Scaling","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float3 vector (a vector with 3 float elements) that represents the scaling factors in x, y, and z directions. The first element in the vector being x, the second y and the third z. <code>Float3</code> <code>Output \u27a1\ufe0f</code> Outputs a 4x4 scaling matrix (a sequence of four float4 vectors). <code>[Float4](4)</code> <p>This shard creates a 4x4 scaling matrix (a sequence of four float4 vectors) from a float3 vector input that represents the scaling factors in x, y, and z directions. A float4 vector is a vector with 4 float elements while a float3 vector is a vector with 3 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/Sin/","title":"Math.Sin","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the sine of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the sine of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the sine of the given input, where the input is the angle in radians.</p>"},{"location":"shards/shards/Math/Sin/#details","title":"Details","text":"<p>If the input value is negative, the shard will interpret them as angles measured clockwise from the positive x-axis.</p> <p>Sin is a periodic function where the value repeats every 2\u03c0.</p> <p>Sin is bounded and will always return a value between -1 and 1.</p> <p>If a sequence of floats was provided as input, the shard will calculate the sine of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the sine of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the sine of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Sin/#examples","title":"Examples","text":"Code <pre><code>@f3(0.0 1.0 1.5707963)\nMath.Sin | Log\n\nMath.Subtract(@f3(0.0 0.84147098 1.0)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Sinh/","title":"Math.Sinh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the hyperbolic sine of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the hyperbolic sine of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the hyperbolic sine of the given input, where the input is the real number. The hyperbolic sine is a hyperbolic function that is analogous to the circular sine function, but it uses exponential functions instead of angles.</p>"},{"location":"shards/shards/Math/Sinh/#details","title":"Details","text":"<p>Sinh is not a periodic function. It does not repeat its values.</p> <p>Sinh is unbounded and can grow to infinity as the input value grows.</p> <p>If a sequence of floats was provided as input, the shard will calculate the hyperbolic sine of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the hyperbolic sine of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the hyperbolic sine of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Sinh/#examples","title":"Examples","text":"Code <pre><code>@f3(-1.0 0.0 1.0)\nMath.Sinh | Log\n\nMath.Subtract(@f3(-1.1752012 0.0 1.1752012)) | Math.Abs\nLog\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Slerp/","title":"Math.Slerp","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float value between 0 and 1 representing the interpolation factor. <code>Float</code> <code>Output \u27a1\ufe0f</code> Outputs a float4 vector representing the interpolated quaternion. <code>Float4</code> <code>First</code>  No The float4 vector representing the first quaternion to interpolate from. <code>none</code> <code>Float4</code><code>Var(Float4)</code> <code>Second</code>  No The float4 vector representing the second quaternion to interpolate to. <code>none</code> <code>Float4</code><code>Var(Float4)</code> <p>This shard performs Spherical Linear Interpolation (SLERP) between two quaternions (represented as float4 vectors). It smoothly interpolates between the quaternions specified in the 'First' parameter and 'Second' parameter based on the input interpolation factor. A float4 vector is a vector with 4 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/Sqrt/","title":"Math.Sqrt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the square root of. This value must be a positive number or sequence of positive numbers. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the square root of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the square root of the given input.</p>"},{"location":"shards/shards/Math/Sqrt/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate the square root of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the square root of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the square root of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Sqrt/#examples","title":"Examples","text":"Code <pre><code>@f3(1.0 2.0 4.0)\nMath.Sqrt | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Subtract/","title":"Math.Subtract","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value or the sequence of values to subtract the value specified in the Operand parameter from. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> This shard outputs the result of the subtraction. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Operand</code>  No The value or sequence of values to subtract from the input. <code>0</code> <code>Int</code><code>Var(Int)</code><code>Int2</code><code>Var(Int2)</code><code>Int3</code><code>Var(Int3)</code><code>Int4</code><code>Var(Int4)</code><code>Int8</code><code>Var(Int8)</code><code>Int16</code><code>Var(Int16)</code><code>Float</code><code>Var(Float)</code><code>Float2</code><code>Var(Float2)</code><code>Float3</code><code>Var(Float3)</code><code>Float4</code><code>Var(Float4)</code><code>Color</code><code>Var(Color)</code><code>[Any]</code><code>Var([Any])</code> <p>This shard subtracts the value provided in the Operand parameter from the input value.</p>"},{"location":"shards/shards/Math/Subtract/#details","title":"Details","text":"<p>This shard can take an integer or a sequence of integers as input. However, depending on the type of input, the appropriate <code>Operand</code> needs to be provided:</p> <p>For non-sequence inputs: The <code>Operand</code> must match the input type exactly (e.g., Int2 with Int2, Color with Color).</p> <p>For sequence inputs: The <code>Operand</code> can be either:   - A matching non-sequence type (e.g., sequence of Int2 with a single Int2 <code>Operand</code>). Each element of the input sequence is operated on by the <code>Operand</code>.   - Another sequence of elements with the same types. Each element of the <code>Operand</code> sequence is applied to the corresponding element of the input sequence. If the input sequence is longer, the <code>Operand</code> sequence will loop over till all elements of the input sequence are operated on. If the <code>Operand</code> sequence is longer, the extra elements of the <code>Operand</code> sequence are ignored.</p>"},{"location":"shards/shards/Math/Subtract/#examples","title":"Examples","text":"Code <pre><code>7\nMath.Subtract(Operand: 2) | Log\n\nAssert.Is(5 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/TGamma/","title":"Math.TGamma","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard calculates the gamma function of the given input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the gamma function of the input. The output is always positive for positive inputs. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the gamma function of the given input. The gamma function is a mathematical function that extends the concept of factorial to non-integer and complex numbers.</p>"},{"location":"shards/shards/Math/TGamma/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will calculate the gamma function for each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the gamma function for each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the result of the gamma function calculation of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/TGamma/#examples","title":"Examples","text":"Code <pre><code>10.0\nMath.TGamma | Log\n\nAssert.IsAlmost(362880.0 true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Tan/","title":"Math.Tan","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the tangent of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the tangent of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the tangent of the given input, where the input is the angle in radians.</p>"},{"location":"shards/shards/Math/Tan/#details","title":"Details","text":"<p>If the input value is negative, the shard will interpret them as angles measured clockwise from the positive x-axis.</p> <p>Tan is a periodic function where the value repeats every 2\u03c0.</p> <p>Tan is unbounded but has periodic discontinuities.</p> <p>If a sequence of floats was provided as input, the shard will calculate the tanget of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the tangent of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the tangent of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Tan/#examples","title":"Examples","text":"Code <pre><code>@f3(-1.0 0.0 1.0)\nMath.Tan | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Tanh/","title":"Math.Tanh","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to calculate the hyperbolic tangent of. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the hyperbolic tangent of the input. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard calculates the hyperbolic tangent of the given input, where the input is the real number. The hyperbolic tangent is a hyperbolic function that is analogous to the circular tangent function, but it uses exponential functions instead of angles.</p>"},{"location":"shards/shards/Math/Tanh/#details","title":"Details","text":"<p>Tanh is not a periodic function. It does not repeat its values.</p> <p>Tanh is bounded and will always return a value between -1 and 1 but approaches 1 as the input value grows positively and -1 as the input value grows negatively.</p> <p>If a sequence of floats was provided as input, the shard will calculate the hyperbolic tangent of each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will calculate the hyperbolic tangent of each component in each vector in the sequence and output a sequence of vectors where each component in each vector is the hyperbolic tangent of the corresponding component in the input sequence.</p>"},{"location":"shards/shards/Math/Tanh/#examples","title":"Examples","text":"Code <pre><code>@f3(-1.0 0.0 1.0)\nMath.Tanh | Log\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Translation/","title":"Math.Translation","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float3 vector (a vector with 3 float elements) that represents the translation in x, y, and z directions. The first element in the vector being x, the second y and the third z. <code>Float3</code> <code>Output \u27a1\ufe0f</code> Outputs a 4x4 translation matrix (a sequence of four float4 vectors). <code>[Float4](4)</code> <p>This shard creates a 4x4 translation matrix (a sequence of four float4 vectors) from a float3 vector input representing the translation in x, y, and z directions. A float4 vector is a vector with 4 float elements while a float3 vector is a vector with 3 float elements.</p> <p> </p>"},{"location":"shards/shards/Math/Transpose/","title":"Math.Transpose","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a matrix (sequence of float2, float3, or float4 vectors) as input. <code>[Float4](4)</code><code>[Float3](3)</code><code>[Float2](2)</code> <code>Output \u27a1\ufe0f</code> Outputs the transposed the matrix. <code>[Float4](4)</code><code>[Float3](3)</code><code>[Float2](2)</code> <p>Performs matrix transposition on the input matrix. Transposition flips the matrix over its main diagonal, switching its rows and columns. This shard supports 2x2, 3x3, and 4x4 as input matrices. A 4x4 matrix is a sequence with exactly 4 float4 vectors, a 3x3 matrix is a sequence with exactly 3 float3 vectors, and a 2x2 matrix is a sequence with exactly 2 float2 vectors.</p> <p> </p>"},{"location":"shards/shards/Math/Trunc/","title":"Math.Trunc","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input float or sequence of floats to truncate. <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <code>Output \u27a1\ufe0f</code> Outputs the input truncated to the nearest integer (as a float). <code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Color</code><code>[Any]</code> <p>This shard truncates the input floating-point number towards zero, removing any fractional part without rounding.</p>"},{"location":"shards/shards/Math/Trunc/#details","title":"Details","text":"<p>If a sequence of floats was provided as input, the shard will truncate each element in the sequence and output a sequence.</p> <p>If a sequence of vectors was provided as input, the shard will truncate each component in each vector in the sequence and output a sequence of vectors with each component in each vector truncated.</p>"},{"location":"shards/shards/Math/Trunc/#examples","title":"Examples","text":"Code <pre><code>@f3(-0.95 4.0 7.54)\nMath.Trunc | Log\n\nAssert.Is(@f3(0 4 7) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Math/Unproject/","title":"Math.Unproject","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Takes a float3 vector representing the 3D vector where x and y are screen coordinates, and z is the depth value in screen space. <code>Float3</code> <code>Output \u27a1\ufe0f</code> Outputs a float3 vector representing the unprojected 3D point in world space. <code>Float3</code> <code>Matrix</code>  No The combined 4x4 view-projection matrix (sequence of four float4 vectors) to use. <code>none</code> <code>[Float4](4)</code><code>Var([Float4](4))</code> <code>ScreenSize</code>  No The float2 vector representing the size of the screen or viewport in pixels. <code>none</code> <code>Float2</code><code>Var(Float2)</code> <code>DepthRange</code>  No The float2 vector representing the range of depth values (near and far planes). Default is [0, 1]. <code>none</code> <code>None</code><code>Float2</code><code>Var(Float2)</code> <code>FlipY</code>  No Flip Y coordinate (on by default) <code>true</code> <code>None</code><code>Bool</code><code>Var(Var(Bool))</code> <p>This shard converts 2D screen coordinates back to 3D world coordinates using the inverse of a view-projection matrix. Both 3D and 2D coordinates are represented as float3 vectors (vectors with 3 float elements).It performs the reverse operation of the projection pipeline, including inverse matrix multiplication, and coordinate space transformations using the 4x4 view-projection matrix specified in the Matrix parameter and the screen size in the ScreenSize parameter.</p> <p> </p>"},{"location":"shards/shards/Math/Xor/","title":"Math.Xor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value or the sequence of values to compare the value specified in the Operand parameter with. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code> <code>Output \u27a1\ufe0f</code> This shard outputs the value resulting from the XOR operation. <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code> <code>Operand</code>  No The value or sequence of values to compare the input with. <code>0</code> <code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>Color</code><code>[Any]</code><code>Bool</code><code>Var(Bool)</code> <p>This shard performs a bitwise XOR operation on the input with the value specified in the Operand parameter and outputs the result. A bitwise XOR operation is a binary operation that compares each bit of the binary representations of two numbers and outputs 1 if the bits are different and 0 if they are the same. The shard then outputs a value, whose binary representation is the concatenation of the resulting 1s and 0s from the XOR comparison.</p>"},{"location":"shards/shards/Math/Xor/#examples","title":"Examples","text":"Code <pre><code>@i4(0 2 4 8)\nMath.Xor(\nOperand:\n@i4(3 3 3 3)) | Log\n\nAssert.Is(@i4(3 1 7 11) true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/Mnemonic/Generate/","title":"Mnemonic.Generate","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <p>Generates a BIP39 mnemonic</p> <p> </p>"},{"location":"shards/shards/Mnemonic/ToSeed/","title":"Mnemonic.ToSeed","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <p>Converts a BIP39 mnemonic to a seed</p> <p> </p>"},{"location":"shards/shards/Network/Broadcast/","title":"Network.Broadcast","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input to broadcast to all connected peers. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Server</code>  No The server to send the input to. <code>Var: Network.Server</code> <code>Var(Object)</code> <code>Exclude</code>  No The list of Peer IDs to exclude from the broadcast. <code>none</code> <code>Var([Int])</code><code>[Int]</code><code>None</code> <code>Include</code>  No The list of Peer IDs to include in the broadcast. If set, only these peers will receive the broadcast. <code>none</code> <code>Var([Int])</code><code>[Int]</code><code>None</code> <p>This shard sends the input to all peers connected to the server (created by Network.Server) specified in the Server parameter.</p> <p> </p>"},{"location":"shards/shards/Network/Client/","title":"Network.Client","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The peer object created. <code>Object</code> <code>Address</code>  No The local bind address or the remote address. <code>localhost</code> <code>String</code><code>Var(String)</code> <code>Port</code>  No The port to bind if server or to connect to if client. <code>9191</code> <code>Int</code><code>Var(Int)</code> <code>Handler</code>  No The shards to execute when a packet is received. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>This shard creates a UDP client connection using the KCP protocol, on the address and port specified in the Address and Port parameters.</p> <p> </p>"},{"location":"shards/shards/Network/Peer/","title":"Network.Peer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the Peer object specified. <code>Object</code> <code>Peer</code>  No The Peer ID of the Peer object to get. <code>Var: Network.Peer</code> <code>Var(Object)</code> <p>This shard outputs the peer object of the peer with the Peer ID specified in the Peer parameter.</p> <p> </p>"},{"location":"shards/shards/Network/PeerID/","title":"Network.PeerID","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The Peer ID of the peer specified in the Peer parameter. <code>Int</code> <code>Peer</code>  No The Peer object to get the ID of. <code>Var: Network.Peer</code> <code>Var(Object)</code> <p>This shard outputs the Peer ID of the peer specified in the Peer parameter as an integer.</p>"},{"location":"shards/shards/Network/PeerID/#details","title":"Details","text":"<p>If no specific peer is provided in the <code>Peer</code> parameter, this shard will return the Peer ID of the current wire.</p> <p> </p>"},{"location":"shards/shards/Network/Send/","title":"Network.Send","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input to send to the peer. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Peer</code>  No The optional explicit peer to send packets to. <code>Var: Network.Peer</code> <code>Var(Object)</code> <p>This shard sends the input to the peer specified in the Peer parameter.</p>"},{"location":"shards/shards/Network/Send/#details","title":"Details","text":"<p>This shard converts the input into a bytes sequence before sending it over the network.</p> <p> </p>"},{"location":"shards/shards/Network/SendRaw/","title":"Network.SendRaw","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input to send to the peer. <code>String</code><code>Bytes</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Peer</code>  No The optional explicit peer to send packets to. <code>Var: Network.Peer</code> <code>Var(Object)</code> <p>This shard sends the input byte array or string to the peer specified in the Peer parameter.</p>"},{"location":"shards/shards/Network/SendRaw/#details","title":"Details","text":"<p>Unlike the <code>Network.Send</code> shard, <code>Network.SendRaw</code> does not convert the input into a bytes sequence before sending it over the network and thus is faster. However, it can only accept a bytes sequence or string as input.</p> <p> </p>"},{"location":"shards/shards/Network/Server/","title":"Network.Server","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The server object created. <code>Object</code> <code>Address</code>  No The local bind address or the remote address. <code>localhost</code> <code>String</code><code>Var(String)</code> <code>Port</code>  No The port to bind if server or to connect to if client. <code>9191</code> <code>Int</code><code>Var(Int)</code> <code>Handler</code>  No The wire to spawn for each new peer that connects, stopping that wire will break the connection. <code>none</code> <code>Wire</code><code>None</code> <code>Timeout</code>  No The timeout in seconds after which a peer will be disconnected if there is no network activity. <code>30</code> <code>Float</code> <code>OnDisconnect</code>  No The shards to execute when a peer disconnects, The Peer ID will be the input. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>This shard sets up a UDP network server using the KCP protocol, on the address and port specified in the Address and Port parameters. This server then handles client connections and disconnections, messages received from clients and broadcasting messages to these clients.</p>"},{"location":"shards/shards/Network/Server/#details","title":"Details","text":"<p>When a new client connects to the server, this shard schedules a new copy of the wire specified in the <code>Handler</code> parameter.</p> <p> </p>"},{"location":"shards/shards/Network/WS.Client/","title":"Network.WS.Client","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The peer object created. <code>Object</code> <code>Address</code>  No The local bind address or the remote address. <code>none</code> <code>String</code><code>Var(String)</code> <code>Handler</code>  No The shards to execute when a packet is received. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Raw</code>  No If set to true, the client will receive raw byte packets instead of serialized objects. <code>none</code> <code>None</code><code>Bool</code> <p>This shard creates a WebSocket client connection using the TCP, on the address specified in the Address.</p> <p> </p>"},{"location":"shards/shards/Network/WS.Server/","title":"Network.WS.Server","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The server object created. <code>Object</code> <code>Address</code>  No The local bind address or the remote address. <code>none</code> <code>String</code><code>Var(String)</code> <code>Port</code>  No The port to bind if server or to connect to if client. <code>none</code> <code>Int</code><code>Var(Int)</code> <code>Handler</code>  No The wire to spawn for each new peer that connects, stopping that wire will break the connection. <code>none</code> <code>None</code><code>Wire</code><code>[Shard]</code> <code>Timeout</code>  No The timeout in seconds after which a peer will be disconnected if there is no network activity. <code>none</code> <code>Float</code> <code>OnDisconnect</code>  No The shards to execute when a peer disconnects, The Peer ID will be the input. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>This shard sets up a Websocket network server using TCP, on the address and port specified in the Address and Port parameters. This server then handles client connections and disconnections, messages received from clients and broadcasting messages to these clients.</p>"},{"location":"shards/shards/Network/WS.Server/#details","title":"Details","text":"<p>When a new client connects to the server, this shard schedules a new copy of the wire specified in the <code>Handler</code> parameter.</p> <p> </p>"},{"location":"shards/shards/Physics/AngularVelocity/","title":"Physics.AngularVelocity","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The physics body to retrieve the angular velocity from. <code>Physics.Body</code> <code>Output \u27a1\ufe0f</code> Outputs the angular velocity of the input physics body as a float3. <code>Float3</code> <p>Retrieves the angular velocity of the input physics body</p> <p> </p>"},{"location":"shards/shards/Physics/ApplyForce/","title":"Physics.ApplyForce","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The physics body to apply the linear and/or angular force to. <code>Physics.Body</code> <code>Output \u27a1\ufe0f</code> Outputs the input physics body with the applied linear and/or angular force. <code>Physics.Body</code> <code>Linear</code>  No The linear force to apply <code>@f3(0 0 0)</code> <code>Float3</code><code>Var(Float3)</code> <code>Angular</code>  No The angular force to apply <code>@f3(0 0 0)</code> <code>Float3</code><code>Var(Float3)</code> <p>This shard applies a short instantaneous linear and/or angular force to the input physics body.</p> <p> </p>"},{"location":"shards/shards/Physics/ApplyForceAt/","title":"Physics.ApplyForceAt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The physics body to apply the force to. <code>Physics.Body</code> <code>Output \u27a1\ufe0f</code> Outputs the input physics body with the force applied. <code>Physics.Body</code> <code>Force</code>  No The force to apply represented as a float3 containing the magnitude and direction of the force. <code>@f3(0 0 0)</code> <code>Float3</code><code>Var(Float3)</code> <code>Position</code>  No The position to apply the force at represented as a float3 <code>@f3(0 0 0)</code> <code>Float3</code><code>Var(Float3)</code> <p>Applies a force to the physics body at a specific location</p> <p> </p>"},{"location":"shards/shards/Physics/ApplyImpulse/","title":"Physics.ApplyImpulse","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The physics body to apply the linear and/or angular force to. <code>Physics.Body</code> <code>Output \u27a1\ufe0f</code> Outputs the input physics body with the applied linear and/or angular force. <code>Physics.Body</code> <code>Linear</code>  No The linear force to apply <code>@f3(0 0 0)</code> <code>Float3</code><code>Var(Float3)</code> <code>Angular</code>  No The angular force to apply <code>@f3(0 0 0)</code> <code>Float3</code><code>Var(Float3)</code> <p>This shard applies a continuous linear and/or angular force to the input physics body.</p> <p> </p>"},{"location":"shards/shards/Physics/Body/","title":"Physics.Body","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the physics body created by this shard as a physics object that acts as an interface for other physics shard to interact with the body. <code>Physics.Body</code> <code>Location</code>  No The initial location of the physics object. The variable provided in this parameter is also updated through the physics simulations conducted on this body. Vice versa, the body's location is also updated if the variable's value is changed. <code>none</code> <code>Var(Float3)</code> <code>Rotation</code>  No The initial rotation of the physics object. The variable provided in this parameter is also updated through the physics simulations conducted on this body. Vice versa, the body's rotation is also updated if the variable's value is changed. <code>none</code> <code>Var(Float4)</code> <code>Static</code>  No If false, the physics body will be destroyed when the shard is not activated. If true, the body will persist and be included in the physics simulation even if the shard is not activated. <code>false</code> <code>Bool</code> <code>Enabled</code>  No Can be used to toggle the body on or off if it is a persistent body. If false, the body is temporarily removed from the simulation without destroying it. <code>true</code> <code>Bool</code><code>Var(Bool)</code> <code>Shape</code>  No The shape of the body. <code>none</code> <code>Var(Physics.Shape)</code> <code>Friction</code>  No The friction applied when this physics body is in contact with another physics body. <code>0.2</code> <code>Float</code><code>Var(Float)</code> <code>Restitution</code>  No The bounciness of the body when it collides with another physics body. <code>0</code> <code>Float</code><code>Var(Float)</code> <code>LinearDamping</code>  No How much linear velocity decays over time. <code>0.05</code> <code>Float</code><code>Var(Float)</code> <code>AngularDamping</code>  No How much angular velocity decays over time. <code>0.05</code> <code>Float</code><code>Var(Float)</code> <code>MaxLinearVelocity</code>  No Max linear velocity <code>500</code> <code>Float</code><code>Var(Float)</code> <code>MaxAngularVelocity</code>  No Max angular velocity <code>47.1239</code> <code>Float</code><code>Var(Float)</code> <code>GravityFactor</code>  No The gravity factor applied to this body <code>1</code> <code>Float</code><code>Var(Float)</code> <code>AllowedDOFs</code>  No The translation and rotation axes that the body is allowed to move and rotate around. <code>PhysicsDOF::&lt;invalid&gt;</code> <code>PhysicsDOF</code><code>[PhysicsDOF]</code><code>Var([PhysicsDOF])</code> <code>MotionType</code>  No Motion type of the body, Dynamic, Kinematic, or Static. <code>PhysicsMotion::Dynamic</code> <code>PhysicsMotion</code><code>Var(PhysicsMotion)</code> <code>CollisionGroup</code>  No The collision group this body belongs to and which collision groups it is allowed to collide with. The first component in the int2 dictates collision group membership mask, the second part contains a filter mask. <code>@i2(-1 -1)</code> <code>Int2</code><code>Var(Int2)</code> <code>Sensor</code>  No If true, this physics body will be considered a Sensor. Sensors only detect collisions but do not interact with collided objects (AKA triggers) <code>false</code> <code>Bool</code> <code>Mass</code>  No Mass of the body. For mass less or equal to 0, default mass calculation is used instead. <code>0</code> <code>Float</code><code>Var(Float)</code> <code>Tag</code>  No Tag attached to this body for use in collision events. <code>none</code> <code>Any</code> <code>Context</code>  No The physics context object that is managing the physics simulation. <code>Var: Physics.Context</code> <code>Var(Physics.Context)</code> <p>This shard creates a physics body, conducts physics simulations on this body while updating the relavent variables tied to this body, and creates an interface to allow other physics shards to interact with this body.</p> <p> </p>"},{"location":"shards/shards/Physics/BoxShape/","title":"Physics.BoxShape","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The x,y and z half extents of the box collision shape to create. <code>Float3</code> <code>Output \u27a1\ufe0f</code> Outputs the created box collision shape. <code>Physics.Shape</code> <p>This shard creates a box collision shape from the input half extents provided.</p> <p> </p>"},{"location":"shards/shards/Physics/CapsuleShape/","title":"Physics.CapsuleShape","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the created capsule collision shape. <code>Physics.Shape</code> <code>HalfHeight</code>  No Half the height of the capsule. <code>none</code> <code>Float</code><code>Var(Float)</code> <code>Radius</code>  No Radius of the capsule. <code>none</code> <code>Float</code><code>Var(Float)</code> <p>This shard creates a capsule physics collision shape, using the height and radius provided in the HalfHeight and Radius parameters respectively. The capsule will be centered around the origin with one sphere cap at (0, -HalfHeight, 0) and the other at (0, HalfHeight, 0).</p> <p> </p>"},{"location":"shards/shards/Physics/CenterOfMass/","title":"Physics.CenterOfMass","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The physics body to retrieve the position of the center of mass from. <code>Physics.Body</code> <code>Output \u27a1\ufe0f</code> Outputs the position of the center of mass of the input physics body as a float3. <code>Float3</code> <p>Retrieves the position of the center of mass of the input physics body</p> <p> </p>"},{"location":"shards/shards/Physics/Collisions/","title":"Physics.Collisions","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Physics.Body</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[{other: Physics.Body otherTag: Any penetrationDepth: Float normal: Float3}]</code> <code>Enter</code>  No The code to execute when a new contact is detected. <code>none</code> <code>[Shard]</code><code>None</code> <code>Leave</code>  No The code to execute when a contact is removed. <code>none</code> <code>[Shard]</code><code>None</code> <p>Gets the list of current contacts for the input physics body and runs the shards specified when a new contact is detected or when a contact is removed.</p> <p> </p>"},{"location":"shards/shards/Physics/Context/","title":"Physics.Context","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the physics context object. <code>Physics.Context</code> <p>Creates and initializes the core physics context object that will manage the physics simulation environment.</p> <p> </p>"},{"location":"shards/shards/Physics/DebugDraw/","title":"Physics.DebugDraw","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Context</code>  No The context <code>none</code> <code>Var(Physics.Context)</code> <code>DrawConstraints</code>  No Draw constraints <code>true</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawConstraintLimits</code>  No Draw constraint limits <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawConstraintReferenceFrames</code>  No Draw constraint reference frames <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawBodies</code>  No Draw bodies <code>true</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawBodyGetSupportFunction</code>  No Draw the GetSupport() function, used for convex collision detection <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawBodySupportDirection</code>  No When drawing the support function, also draw which direction mapped to a specific support point <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawBodyGetSupportingFace</code>  No Draw the faces that were found colliding during collision detection <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawBodyShape</code>  No Draw the shapes of all bodies <code>true</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawBodyShapeWireframe</code>  No When mDrawShape is true and this is true, the shapes will be drawn in wireframe instead of solid. <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawBodyShapeColor</code>  No Coloring scheme to use for shapes <code>PhysicsDebugShapeColor::MotionTypeColor</code> <code>PhysicsDebugShapeColor</code><code>Var(PhysicsDebugShapeColor)</code> <code>DrawBodyBoundingBox</code>  No Draw a bounding box per body <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawBodyCenterOfMassTransform</code>  No Draw the center of mass for each body <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawBodyWorldTransform</code>  No Draw the world transform (which can be different than the center of mass) for each body <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawBodyVelocity</code>  No Draw the velocity vector for each body <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawBodyMassAndInertia</code>  No Draw the mass and inertia (as the box equivalent) for each body <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawBodySleepStats</code>  No Draw stats regarding the sleeping algorithm of each body <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawSoftBodyVertices</code>  No Draw the vertices of soft bodies <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawSoftBodyVertexVelocities</code>  No Draw the velocities of the vertices of soft bodies <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawSoftBodyEdgeConstraints</code>  No Draw the edge constraints of soft bodies <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawSoftBodyBendConstraints</code>  No Draw the bend constraints of soft bodies <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawSoftBodyVolumeConstraints</code>  No Draw the volume constraints of soft bodies <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawSoftBodySkinConstraints</code>  No Draw the skin constraints of soft bodies <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawSoftBodyLRAConstraints</code>  No Draw the LRA constraints of soft bodies <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawSoftBodyPredictedBounds</code>  No Draw the predicted bounds of soft bodies <code>false</code> <code>Bool</code><code>Var(Bool)</code> <code>DrawSoftBodyConstraintColor</code>  No Coloring scheme to use for soft body constraints <code>PhysicsDebugSoftBodyConstraintColor::ConstraintType</code> <code>PhysicsDebugSoftBodyConstraintColor</code><code>Var(PhysicsDebugSoftBodyConstraintColor)</code>"},{"location":"shards/shards/Physics/DistanceConstraint/","title":"Physics.DistanceConstraint","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>FirstBody</code>  No The first body, keep unset to attach to the fixed world <code>none</code> <code>Var(Physics.Body)</code><code>None</code> <code>SecondBody</code>  No The second body, keep unset to attach to the fixed world <code>none</code> <code>Var(Physics.Body)</code><code>None</code> <code>Static</code>  No Static node, persist when not activated <code>false</code> <code>Bool</code> <code>Enabled</code>  No Can be used to toggle this node when it has static persistence <code>true</code> <code>Bool</code><code>Var(Bool)</code> <code>Space</code>  No This determines in which space the constraint is setup, all other properties should be in the specified space <code>ConstraintSpace::LocalToBodyCOM</code> <code>ConstraintSpace</code> <code>FirstPoint</code>  No The position of the connection point for the first body. <code>@f3(0 0 0)</code> <code>Float3</code><code>Var(Float3)</code> <code>SecondPoint</code>  No The position of the connection point for the second body. <code>@f3(0 0 0)</code> <code>Float3</code><code>Var(Float3)</code> <code>MinDistance</code>  No Minimum distance between the two points. If the value is negative, it will be replaced by the distance between FirstPoint and SecondPoint (works only if Space is world space) <code>-1</code> <code>Float</code><code>Var(Float)</code> <code>MaxDistance</code>  No Maximum distance between the two points. If the value is negative, it will be replaced by the distance between FirstPoint and SecondPoint (works only if Space is world space) <code>-1</code> <code>Float</code><code>Var(Float)</code> <code>LimitSpring</code>  No When set, makes the limits soft <code>{damping: 1 frequency: 0}</code> <code>None</code><code>{frequency: Float damping: Float}</code><code>{stiffness: Float damping: Float}</code><code>Var({frequency: Float damping: Float})</code><code>Var({stiffness: Float damping: Float})</code> <p>This shard creates a tether between two bodies, keeping the distance between them within the range specified in the MinDistance and MaxDistance parameters.</p> <p> </p>"},{"location":"shards/shards/Physics/Dump/","title":"Physics.Dump","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Any input type is accepted. The input value will pass through unchanged. <code>Any</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>Any</code> <code>Context</code>  No The context <code>none</code> <code>Var(Physics.Context)</code> <p>Logs information about the current state of the physics simulation in the console.</p> <p> </p>"},{"location":"shards/shards/Physics/End/","title":"Physics.End","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Context</code>  No The physics context object that will manage the simulation <code>none</code> <code>Var(Physics.Context)</code> <code>TimeStep</code>  No The amount of simulated time that will elapse during each call to this shard. <code>0.0166667</code> <code>Float</code><code>Var(Float)</code> <code>MaxIterations</code>  No Maximum number of iterations to run the simulation. A higher number will result in a more accurate simulation, but will take more time to compute. <code>1</code> <code>Int</code><code>Var([Int])</code> <p>This shard runs the physics simulation. It should be called after defining physics bodies to be included in the simulation.</p> <p> </p>"},{"location":"shards/shards/Physics/FixedConstraint/","title":"Physics.FixedConstraint","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>FirstBody</code>  No The first body, keep unset to attach to the fixed world <code>none</code> <code>Var(Physics.Body)</code><code>None</code> <code>SecondBody</code>  No The second body, keep unset to attach to the fixed world <code>none</code> <code>Var(Physics.Body)</code><code>None</code> <code>Static</code>  No Static node, persist when not activated <code>false</code> <code>Bool</code> <code>Enabled</code>  No Can be used to toggle this node when it has static persistence <code>true</code> <code>Bool</code><code>Var(Bool)</code> <code>Space</code>  No This determines in which space the constraint is setup, all other properties should be in the specified space <code>ConstraintSpace::WorldSpace</code> <code>ConstraintSpace</code> <code>FirstReferenceFrame</code>  No The rotation and position of the connection point for the first body. <code>[@f4(1 0 0 0) @f4(0 1 0 0) @f4(0 0 1 0) @f4(0 0 0 1)]</code> <code>[Float4](4)</code><code>Var([Float4](4))</code> <code>SecondReferenceFrame</code>  No The rotation and position of the connection point for the second body. <code>[@f4(1 0 0 0) @f4(0 1 0 0) @f4(0 0 1 0) @f4(0 0 0 1)]</code> <code>[Float4](4)</code><code>Var([Float4](4))</code> <code>AutoDetectPoint</code>  No When the Space parameter is set to World space, the connection points will be automatically set to the current rotation and position of the two bodies. <code>true</code> <code>Bool</code><code>Var(Bool)</code> <p>This shard rigidly connects two physics bodies together. When forces are applied to either body, they react as if they were a single rigid object.</p> <p> </p>"},{"location":"shards/shards/Physics/HullShape/","title":"Physics.HullShape","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A GFX mesh or drawable object. <code>GFX.Mesh</code><code>GFX.Drawable</code> <code>Output \u27a1\ufe0f</code> Outputs the created physics collisionshape. <code>Physics.Shape</code> <code>MaxConvexRadius</code>  No The convex radius given to the collision shape. A larger convex radius results in better performance but a less accurate simulation. A convex radius of 0 is allowed <code>0.05</code> <code>Float</code><code>Var(Float)</code> <p>Creates a physics shape from a GFX mesh or drawable input</p> <p> </p>"},{"location":"shards/shards/Physics/InverseMass/","title":"Physics.InverseMass","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The physics body to retrieve the inverse mass from. <code>Physics.Body</code> <code>Output \u27a1\ufe0f</code> Outputs the inverse mass of the input physics body as a float. <code>Float</code> <p>Retrieves the inverse mass of the input physics body. The inverse mass is 1.0 divided by the mass of the input physics body.</p> <p> </p>"},{"location":"shards/shards/Physics/LinearVelocity/","title":"Physics.LinearVelocity","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The physics body to retrieve the linear velocity from. <code>Physics.Body</code> <code>Output \u27a1\ufe0f</code> Outputs the linear velocity of the input physics body as a float3. <code>Float3</code> <p>Retrieves the linear velocity of the input physics body</p> <p> </p>"},{"location":"shards/shards/Physics/Location/","title":"Physics.Location","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Physics.Body</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float3</code> <p>Retrieves the position of the physics body</p> <p> </p>"},{"location":"shards/shards/Physics/MotionType/","title":"Physics.MotionType","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The physics body to retrieve the motion type from. <code>Physics.Body</code> <code>Output \u27a1\ufe0f</code> Outputs the motion type of the input physics body. <code>PhysicsMotion</code> <p>Retrieves the motion type of the input physics body</p> <p> </p>"},{"location":"shards/shards/Physics/Rotation/","title":"Physics.Rotation","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Physics.Body</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float4</code> <p>Retrieves the rotation of the physics body</p> <p> </p>"},{"location":"shards/shards/Physics/SetPose/","title":"Physics.SetPose","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The physics body to overwrite the position and/or rotation of. <code>Physics.Body</code> <code>Output \u27a1\ufe0f</code> Outputs the input physics body with the overwritten position and/or rotation. <code>Physics.Body</code> <code>Linear</code>  No The position to set <code>none</code> <code>None</code><code>Float3</code><code>Var(Float3)</code> <code>Angular</code>  No The rotation to set <code>none</code> <code>None</code><code>Float4</code><code>Var(Float4)</code> <p>Overwrites the position and/or rotation of the input physics body.</p> <p> </p>"},{"location":"shards/shards/Physics/SetVelocity/","title":"Physics.SetVelocity","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The physics body to overwrite the linear and/or angular velocity of. <code>Physics.Body</code> <code>Output \u27a1\ufe0f</code> Outputs the input physics body with the overwritten linear and/or angular velocity. <code>Physics.Body</code> <code>Linear</code>  No The linear velocity to set <code>none</code> <code>None</code><code>Float3</code><code>Var(Float3)</code> <code>Angular</code>  No The angular velocity to set <code>none</code> <code>None</code><code>Float3</code><code>Var(Float3)</code> <p>Overwrites the linear and/or angular velocity of the input physics body</p> <p> </p>"},{"location":"shards/shards/Physics/SliderConstraint/","title":"Physics.SliderConstraint","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>FirstBody</code>  No The first body, keep unset to attach to the fixed world <code>none</code> <code>Var(Physics.Body)</code><code>None</code> <code>SecondBody</code>  No The second body, keep unset to attach to the fixed world <code>none</code> <code>Var(Physics.Body)</code><code>None</code> <code>Static</code>  No Static node, persist when not activated <code>false</code> <code>Bool</code> <code>Enabled</code>  No Can be used to toggle this node when it has static persistence <code>true</code> <code>Bool</code><code>Var(Bool)</code> <code>Space</code>  No This determines in which space the constraint is setup, all other properties should be in the specified space <code>ConstraintSpace::LocalToBodyCOM</code> <code>ConstraintSpace</code> <code>FirstPoint</code>  No The position of the connection point for the first body. <code>@f3(0 0 0)</code> <code>Float3</code><code>Var(Float3)</code> <code>SecondPoint</code>  No The position of the connection point for the second body. <code>@f3(0 0 0)</code> <code>Float3</code><code>Var(Float3)</code> <code>SliderAxis</code>  No Axis along which movement is possible. <code>@f3(1 0 0)</code> <code>Float3</code><code>Var(Float3)</code> <code>NormalAxis</code>  No Vector perpendicular to the slider axis, to define the frame <code>@f3(0 1 0)</code> <code>Float3</code><code>Var(Float3)</code> <code>LimitsMin</code>  No The maximum distance the slider can move in the negative direction. <code>1.17549e-38</code> <code>Float</code><code>Var(Float)</code> <code>LimitsMax</code>  No The maximum distance the slider can move in the positive direction. <code>3.40282e+38</code> <code>Float</code><code>Var(Float)</code> <code>LimitSpring</code>  No When set, makes the limits soft. <code>{damping: 1 frequency: 0}</code> <code>None</code><code>{frequency: Float damping: Float}</code><code>{stiffness: Float damping: Float}</code><code>Var({frequency: Float damping: Float})</code><code>Var({stiffness: Float damping: Float})</code> <code>MaxFrictionForce</code>  No Maximum amount of friction force to apply (in Newtons) on the slider. <code>0</code> <code>Float</code><code>Var(Float)</code> <code>MotorSettings</code>  No Defines the maximum and minimum amount of force of the motor applied to the slider. <code>{maxForceLimit: 3.40282e+38 maxTorqueLimit: 3.40282e+38 minForceLimit: 1.17549e-38 minTorqueLimit: 1.17549e-38}</code> <code>None</code><code>{minForceLimit: Float maxForceLimit: Float minTorqueLimit: Float maxTorqueLimit: Float}</code><code>Var({minForceLimit: Float maxForceLimit: Float minTorqueLimit: Float maxTorqueLimit: Float})</code> <code>MotorSpringSettings</code>  No Defines the Motor spring settings applied on the slider <code>{damping: 1 frequency: 0}</code> <code>None</code><code>{frequency: Float damping: Float}</code><code>{stiffness: Float damping: Float}</code><code>Var({frequency: Float damping: Float})</code><code>Var({stiffness: Float damping: Float})</code> <p>This shard creates a slider constraint between two bodies, turning the two bodies into sliders that can slide along the axis specified in the SliderAxis parameter.</p> <p> </p>"},{"location":"shards/shards/Physics/SoftBody/","title":"Physics.SoftBody","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Physics.Body</code> <code>Location</code>  No The initial location, updated by physics simulation <code>none</code> <code>Var(Float3)</code> <code>Rotation</code>  No The initial location, updated by physics simulation <code>none</code> <code>Var(Float4)</code> <code>Static</code>  No Static node, persist when not activated <code>false</code> <code>Bool</code> <code>Enabled</code>  No Can be used to toggle this node when it has static persistence <code>true</code> <code>Bool</code><code>Var(Bool)</code> <code>Shape</code>  No The shape of the body <code>none</code> <code>Var(Physics.SoftBodyShape)</code> <code>Friction</code>  No <code>0.2</code> <code>Float</code><code>Var(Float)</code> <code>Restitution</code>  No Restitution coefficient <code>0</code> <code>Float</code><code>Var(Float)</code> <code>LinearDamping</code>  No Linear damping coefficient <code>0.05</code> <code>Float</code><code>Var(Float)</code> <code>MaxLinearVelocity</code>  No Max linear velocity <code>500</code> <code>Float</code><code>Var(Float)</code> <code>GravityFactor</code>  No Gravity factor <code>1</code> <code>Float</code><code>Var(Float)</code> <code>Pressure</code>  No Pressure <code>0</code> <code>Float</code><code>Var(Float)</code> <code>CollisionGroup</code>  No Collision filtering type (the first component contains group membership mask, the second part contains a filter mask)If any bits match the filter of the other, the two objects will collide <code>@i2(-1 -1)</code> <code>Int2</code><code>Var(Int2)</code> <code>Tag</code>  No Tag for the body used in collision events <code>none</code> <code>Any</code> <code>Context</code>  No The physics context <code>Var: Physics.Context</code> <code>Var(Physics.Context)</code> <p>Defines a new node</p> <p> </p>"},{"location":"shards/shards/Physics/SoftBodyShape/","title":"Physics.SoftBodyShape","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>GFX.Mesh</code><code>GFX.Drawable</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Physics.SoftBodyShape</code> <code>Compliance</code>  No Compliance <code>0.0001</code> <code>Float</code><code>Var(Float)</code> <code>ShearCompliance</code>  No Shear compliance <code>0.0001</code> <code>Float</code><code>Var(Float)</code> <code>BendCompliance</code>  No Bend compliance <code>0.001</code> <code>Float</code><code>Var(Float)</code>"},{"location":"shards/shards/Physics/SphereShape/","title":"Physics.SphereShape","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The radius of the sphere collision shape to create. <code>Float</code> <code>Output \u27a1\ufe0f</code> Outputs the created sphere collision shape. <code>Physics.Shape</code> <p>Create a sphere collision shape, from the input radius provided.</p> <p> </p>"},{"location":"shards/shards/Physics/WithContext/","title":"Physics.WithContext","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Contents</code>  No The contents to run with the context in scope <code>none</code> <code>[Shard]</code><code>None</code> <code>Context</code>  No The context <code>none</code> <code>Var(Physics.Context)</code>"},{"location":"shards/shards/Random/Name/","title":"Random.Name","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <code>Words</code>  No How many words to generate and concatenate <code>2</code> <code>Int</code> <code>Separator</code>  No A separator character to use between generated words <code>-</code> <code>String</code> <p>Generate a random name (Petname)</p> <p> </p>"},{"location":"shards/shards/Regex/Match/","title":"Regex.Match","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string to match. <code>String</code> <code>Output \u27a1\ufe0f</code> Outputs either a sequence of strings, containing the fully matched string and any capture groups or an empty sequence if there are no matches. <code>[String]</code> <code>Regex</code>  No The regular expression as a string. `` <code>String</code> <p>This shard matches the entire input string against the regex pattern specified in the Regex parameter and outputs a sequence of strings, containing the fully matched string and any capture groups. It will return an empty sequence if there are no matches.</p>"},{"location":"shards/shards/Regex/Match/#details","title":"Details","text":"<p>This shard attempts to match the entire input string against the given pattern. When using Regex.Match, ensure your pattern accounts for the entire string, using constructs like <code>.*</code> at the beginning or end if necessary. If you need to capture specific parts of the string, use capture groups within a pattern that matches the full string. For partial matches or finding substrings, use <code>Regex.Search</code> instead.</p> <p> </p>"},{"location":"shards/shards/Regex/Replace/","title":"Regex.Replace","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string to modify. <code>String</code> <code>Output \u27a1\ufe0f</code> The input string with all occurrences of the regex pattern replaced with the replacement string. <code>String</code> <code>Regex</code>  No The regular expression as a string. `` <code>String</code> <code>Replacement</code>  No The regex replacement expression. <code>none</code> <code>String</code><code>Var(String)</code> <p>This shard modifies the input string by replacing all occurrences of the regex pattern, specified in the Regex parameter, with the replacement string specified in the Replacement parameter.</p>"},{"location":"shards/shards/Regex/Replace/#details","title":"Details","text":"<p>If the input string contains no occurrences of the regex, the input is returned unchanged.</p> <p> </p>"},{"location":"shards/shards/Regex/Search/","title":"Regex.Search","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string to search. <code>String</code> <code>Output \u27a1\ufe0f</code> A sequence of strings, each containing one occurrence of the regex pattern. <code>[String]</code> <code>Regex</code>  No The regular expression as a string. `` <code>String</code> <p>This shard searches the input string for the regex pattern specified in the Regex parameter and outputs a sequence of strings, containing every occurrence of the pattern. An empty sequence is returned if there are no matches</p>"},{"location":"shards/shards/Regex/Search/#details","title":"Details","text":"<p>If there are no occurrences of the regex expression in the input string, an empty sequence is returned. The shard is by default case-sensitive. Searching for \"Hello\" in \"hello\" will return an empty sequence.</p> <p> </p>"},{"location":"shards/shards/SVG/ToImage/","title":"SVG.ToImage","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code><code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Image</code> <code>Size</code>  No The desired output size, if (0, 0) will default to the size defined in the svg data. <code>none</code> <code>Int2</code><code>Var(Int2)</code><code>None</code> <code>Offset</code>  No A positive x and y value offsets towards the right and the bottom of the screen respectively. (0.0, 0.0) by default. <code>none</code> <code>None</code><code>Float2</code><code>Var(Float2)</code> <code>Padding</code>  No Pixels of padding to add <code>none</code> <code>Int2</code> <p>Converts an SVG string or bytes to an image.</p> <p> </p>"},{"location":"shards/shards/Shader/LinearizeDepth/","title":"Shader.LinearizeDepth","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The non-linear depth value to convert. <code>Float</code> <code>Output \u27a1\ufe0f</code> The linear depth value. <code>Float</code> <p>This shard converts non-linear depth buffer values to linear depth value.</p> <p> </p>"},{"location":"shards/shards/Shader/Literal/","title":"Shader.Literal","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> This shard outputs the type set in the OutputType parameter. <code>Any</code><code>None</code> <code>Source</code>  No The WGSL source code to insert <code>none</code> <code>String</code><code>Var(String)</code><code>[String Var(Any)]</code> <code>Type</code>  No Where to insert the code. <code>none</code> <code>ShaderLiteralType</code> <code>OutputType</code>  No The type that this code is expected to output. (default: none) <code>none</code> <code>ShaderFieldBaseType</code> <code>OutputDimension</code>  No The dimension that this code is expected to output. (default: 4) <code>none</code> <code>Int</code> <code>OutputMatrixDimension</code>  No The matrix dimension that this code is expected to output. (default: 1) <code>none</code> <code>Int</code> <p>This shard allows the user to write WGSL code directly and insert it into the shader code. The WGSL code is written as a sequence of strings in the Source parameter.</p>"},{"location":"shards/shards/Shader/Literal/#details","title":"Details","text":"<p>This shards inserts WGSL source code directly into the generated shader. This can be useful to reuse large existing shader code bases.</p>"},{"location":"shards/shards/Shader/Literal/#usages","title":"Usages","text":"<p>There are multiple ways to use this shard.</p>"},{"location":"shards/shards/Shader/Literal/#static-code","title":"Static code","text":"<pre><code>  Shader.Literal(Source: \"\n    let color = vec4&lt;f32&gt;(1.0, 0.5, 0.25, 1.0);\n    return color; \")\n</code></pre> <p>This inserts the given WGSL source code directly into the current entry point.</p>"},{"location":"shards/shards/Shader/Literal/#static-header-code","title":"Static header code","text":"<p>When defining WGSL functions, specify the <code>Type: ShaderLiteralType::Header</code> parameter:</p> <pre><code>  Shader.Literal(Type: ShaderLiteralType::Header Source: \"\n    fn scale(val: f32) -&gt; f32 {\n      return val * 0.5;\n    }\")\n</code></pre> <p>The generated code will then be placed outside the current entry point where it can be referenced by all other entry points as well.</p>"},{"location":"shards/shards/Shader/Literal/#output-value","title":"Output value","text":"<p>When a Literal shard is expected to output a value, you need to specify the output type and dimensions.</p> <p>For example, returning the value from calling the function defined in the previous section:</p> <pre><code>  Shader.Literal(Source: \"scale(1.0)\" OutputType: ShaderFieldBaseType::Float32 OutputDimension: 1)\n  &gt;= result ; This will now contain the Float scalar result\n</code></pre> <p><code>OutputMatrixDimension</code> can also be specified when returning matrix types, a value of 1 (default) indicates that the type is not a matrix. <code>mat4x3</code> would be represented by an <code>OutputDimension</code> of 4 and <code>MatrixDimension</code> of 3.</p> <p>The default value for <code>OutputDimension</code> is 4, so it can be left unspecified when returning 4 component vectors.</p>"},{"location":"shards/shards/Shader/Literal/#capturing-variables","title":"Capturing variables","text":"<p>To pass existing variables into WGSL code, use the following structure:</p> <pre><code>  1.0 &gt;= my-value\n  Shader.Literal(Source: [\"scale(\" my-value \")\"])\n</code></pre> <p>When the source is a sequence, any variable references inside this sequence will be inserted into the generated WGSL code.</p>"},{"location":"shards/shards/Shader/Literal/#more-info","title":"More Info","text":"<p>For more information about the WebGPU Shading Language (WGSL), check the working draft here.</p> <p>For converting existing GLSL or SPIR-V shaders to WGSL, naga can be used.</p> <p> </p>"},{"location":"shards/shards/Shader/ReadBuffer/","title":"Shader.ReadBuffer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value of the parameter in the buffer specified. <code>Name</code>  No The name of the parameter to read `` <code>String</code> <code>BufferName</code>  No The name of the buffer to read from. (either view buffer or object buffer.) `` <code>String</code> <p>This shard reads the shader parameter (specified in the Name parameter) from the buffer (specified in the Buffer Name parameter).</p> <p> </p>"},{"location":"shards/shards/Shader/ReadGlobal/","title":"Shader.ReadGlobal","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value of the global variable specified. <code>Name</code>  No The name of global shader variable to read. `` <code>String</code> <p>This shard reads the value of the global shader variable specified in the Name parameter.</p>"},{"location":"shards/shards/Shader/ReadGlobal/#details","title":"Details","text":"<p>A global shader variable is a variable that is available for use across all entry points at the same stage. This means that when <code>Shader.WriteGlobal</code> creates a global variable in the Vertex stage, it is now available to all entry points after the entry point that created it. It is however not available in the Fragment stage. Similarly, global shader variables created in the Fragment stage are not available in the Vertex stage.</p> <p> </p>"},{"location":"shards/shards/Shader/ReadInput/","title":"Shader.ReadInput","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value of the  specified shader input. <code>Name</code>  No The name of the shader input to read. `` <code>String</code> <p>This shard reads the value of the shader input specified in the Name parameter.</p>"},{"location":"shards/shards/Shader/ReadInput/#details","title":"Details","text":"<p>This can be used in the <code>Shader</code> parameter of <code>GFX.Feature</code> or the <code>EntryPoint</code> parameter of <code>GFX.EffectPass</code>.</p> <p>The functions differently when used in the Vertex stage and the Fragment stage of the entry point.   - When used in the vertex stage, this shard will read the value of the vertex attribute specified in the <code>Name</code> parameter.   - When used in the fragment stage, it will read the specified interpolated vertex stage output that is supplied to the pixel. </p> <p>This shard is able to read a vertex attribute even if it was not explicitly written and output in the vertex stage using <code>Shader.WriteOutput</code>.</p> <p> </p>"},{"location":"shards/shards/Shader/RefBuffer/","title":"Shader.RefBuffer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Buffer</code> <code>Name</code>  No The name of the buffer <code>none</code> <code>String</code> <code>Pointer</code>  No Reference as pointer <code>none</code> <code>None</code><code>Bool</code> <p>Outputs a reference to the default sampler object for a named texture.</p> <p> </p>"},{"location":"shards/shards/Shader/RefSampler/","title":"Shader.RefSampler","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Sampler</code> <code>Name</code>  No Name of the texture <code>none</code> <code>String</code><code>Var(String)</code> <p>Outputs a reference to the default sampler object for a named texture.</p> <p> </p>"},{"location":"shards/shards/Shader/RefTexture/","title":"Shader.RefTexture","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>GFX.Texture2D</code><code>GFX.TextureCube</code> <code>Name</code>  No Name of the texture <code>none</code> <code>String</code><code>Var(String)</code> <p>Outputs a reference to the texture object for a named texture.</p> <p> </p>"},{"location":"shards/shards/Shader/SampleTexture/","title":"Shader.SampleTexture","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float4</code> <code>Name</code>  No Name of the texture <code>none</code> <code>String</code><code>Var(String)</code> <p>Samples a named texture with default texture coordinates</p> <p> </p>"},{"location":"shards/shards/Shader/SampleTextureCoord/","title":"Shader.SampleTextureCoord","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Float4</code><code>Float3</code><code>Float2</code><code>Float</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float4</code> <code>Name</code>  No Name of the texture <code>none</code> <code>String</code><code>Var(String)</code> <p>Samples a named texture with the passed in texture coordinates</p> <p> </p>"},{"location":"shards/shards/Shader/WithInput/","title":"Shader.WithInput","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard does not read the attribute value directly. Use Shader.ReadInput within the Then branch if you need to access the shader input value. <code>None</code> <code>Output \u27a1\ufe0f</code> This shard outputs none <code>None</code> <code>Name</code>  No The name of the attribute to check for `` <code>String</code> <code>Then</code>  No The shards to execute if the attribute is being received. <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Else</code>  No The shards to execute if the attribute is not being received <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>This shard creates a conditional statement within a shader code. If the shader input specified in the Name parameter is available to the shader stage that calls this shard, the code in the Then parameter will be executed. Otherwise, the code in the Else parameter will execute.</p> <p> </p>"},{"location":"shards/shards/Shader/WithTexture/","title":"Shader.WithTexture","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> This shard does not read the texture directly. Use Shader.SampleTexture within the Then branch if you need to access the texture. <code>None</code> <code>Output \u27a1\ufe0f</code> This shard outputs none <code>None</code> <code>Name</code>  No The name of the texture to check for. `` <code>String</code> <code>Then</code>  No The shards to execute if the texture is available <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <code>Else</code>  No The shards to execute if the texture is not available <code>none</code> <code>Shard</code><code>[Shard]</code><code>None</code> <p>This shard creates a conditional statement within a shader code. If the texture specified in the Name parameter is available for the vertex or pixel, the code in the Then parameter will be executed. Otherwise, the code in the Else parameter will execute.</p> <p> </p>"},{"location":"shards/shards/Shader/WriteGlobal/","title":"Shader.WriteGlobal","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to set to the global shader variable specified. <code>Any</code> <code>Output \u27a1\ufe0f</code> The shard outputs none, but the value is set to the global shader variable specified. <code>None</code> <code>Name</code>  No The name of global variable to set the input value to. `` <code>String</code> <p>This shard sets the value passed as input to the global shader variable specified in the Name parameter.</p>"},{"location":"shards/shards/Shader/WriteGlobal/#details","title":"Details","text":"<p>A global shader variable is a variable that is available for use across all entry points at the same stage. This means that when <code>Shader.WriteGlobal</code> creates a global variable in the Vertex stage, it is now available to all entry points after the entry point that created it. It is however not available in the Fragment stage. Similarly, global shader variables created in the Fragment stage are not available in the Vertex stage.</p> <p> </p>"},{"location":"shards/shards/Shader/WriteOutput/","title":"Shader.WriteOutput","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value to write to the shader output specified. <code>Any</code> <code>Output \u27a1\ufe0f</code> The shard outputs none, but the value is passed to the next stage or render target. <code>None</code> <code>Name</code>  No The name of the output to write to. `` <code>String</code> <p>This shard writes the input value to the shader output or one of the outputs of the render pass (specified in the Name parameter).</p>"},{"location":"shards/shards/Shader/WriteOutput/#details","title":"Details","text":"<p>This can be used in the <code>Shader</code> parameter of <code>GFX.Feature</code> or the <code>EntryPoint</code> parameter of <code>GFX.EffectPass</code>.</p> <p>The functions differently when used in the Vertex stage and the Fragment stage of the entry point.   - When used in the Vertex stage, will write or create a new shader output and supply it to the fragment stage.   - When used in the Fragment stage, it will write the value supplied as input to the shard, to one of the outputs attached to the render pass.</p> <p> </p>"},{"location":"shards/shards/Snappy/Compress/","title":"Snappy.Compress","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The byte array to compress. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The compressed byte array. <code>Bytes</code> <p>This shard compresses the input byte array using the Snappy algorithm and outputs the compressed byte array.</p> <p> </p>"},{"location":"shards/shards/Snappy/Decompress/","title":"Snappy.Decompress","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The compressed byte array to decompress. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The decompressed byte array. <code>Bytes</code> <p>This shard decompressed the input byte array that has been previously compressed using the Snappy.Compress shard.</p> <p> </p>"},{"location":"shards/shards/Sr25519/PublicKey/","title":"Sr25519.PublicKey","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <p>Extracts the public key from a Sr25519 keypair</p> <p> </p>"},{"location":"shards/shards/Sr25519/Sign/","title":"Sr25519.Sign","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <code>Key</code>  No The private key to be used to sign the hashed message input. <code>none</code> <code>Bytes</code><code>Var(Bytes)</code> <p>Signs a message using the Schnorr signature on Ristretto compressed Ed25519 points.</p> <p> </p>"},{"location":"shards/shards/Sr25519/Verify/","title":"Sr25519.Verify","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Key</code>  No The public key of the keypair that signed the message. This will be used to verify the signature. <code>none</code> <code>Bytes</code><code>Var(Bytes)</code> <code>Message</code>  No The message that was signed to produce the signature. This is the original plain bytes message that the signature was created for. <code>none</code> <code>Bytes</code><code>Var(Bytes)</code> <p>Verifies a Sr25519 signature</p> <p> </p>"},{"location":"shards/shards/String/Contains/","title":"String.Contains","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string to check. <code>String</code> <code>Output \u27a1\ufe0f</code> True if the input string contains the string specified, false otherwise. <code>Bool</code> <code>String</code>  No The string that the input needs to contain to output true. `` <code>String</code><code>Var(String)</code> <p>This shard checks if the input string contains the string specified in the String parameter. If the input string does contain the string specified, the shard will output true. Otherwise, it will output false.</p> <p> </p>"},{"location":"shards/shards/String/DecodeURI/","title":"String.DecodeURI","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The URI-encoded string to be decoded. <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting decoded string. <code>String</code> <p>This shard decodes a URI-encoded string back into its original format.</p> <p> </p>"},{"location":"shards/shards/String/EncodeURI/","title":"String.EncodeURI","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string to be encoded. <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting URI-encoded string. <code>String</code> <p>This shard encodes a string into a URI-encoded format making it safe to use in URLs.</p> <p> </p>"},{"location":"shards/shards/String/Ends/","title":"String.Ends","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string to check. <code>String</code> <code>Output \u27a1\ufe0f</code> True if the input string ends with the string specified, false otherwise. <code>Bool</code> <code>With</code>  No The string that the input needs to end with to output true. `` <code>String</code><code>Var(String)</code> <p>This shard checks if the input string ends with the string specified in the With parameter. If the input string does contain the string specified, the shard will output true. Otherwise, it will output false.</p>"},{"location":"shards/shards/String/Ends/#details","title":"Details","text":"<p>The shard parses the input string from the right to left. Eg. \"HelloWorld\" and \"Hello World\" will both return true if \"World\" is checked for. \"Hello World2\" however will return false.</p> <p> </p>"},{"location":"shards/shards/String/Format/","title":"String.Format","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of values that will be converted to string and concatenated together. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> A string consisting of all the elements of the sequence. <code>String</code> <p>This shard concatenates all the elements of a sequence into a string</p> <p> </p>"},{"location":"shards/shards/String/Join/","title":"String.Join","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of string values that will be joined together. <code>[String Bytes]</code> <code>Output \u27a1\ufe0f</code> A string consisting of all the elements of the sequence separated by the specified separator. <code>String</code> <code>Separator</code>  No The string to use as a separator. `` <code>String</code> <p>This shard concatenates all the elements of a string sequence, using the specified separator between each element.</p>"},{"location":"shards/shards/String/Join/#examples","title":"Examples","text":"Code <pre><code>@wire(main-wire {\n  [\"The quick brown fox \"\n   \"jumps over the lazy dog\"\n   \".\"]\n  String.Join | Log\n  Assert.Is(\"The quick brown fox jumps over the lazy dog.\" Break: true)\n\n  [\"2001\" \"01\" \"01\"]\n  String.Join(\"/\") | Log\n  Assert.Is(\"2001/01/01\" Break: true)\n\n} Looped: true)\n\n{logic-behavior: main-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/String/Split/","title":"String.Split","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string to split. <code>String</code> <code>Output \u27a1\ufe0f</code> A sequence of strings, containing the separated parts of the input string. <code>[String]</code> <code>Separator</code>  No The separator string to segment the input with. The input is split at each point where this string occurs. `` <code>String</code><code>Var(String)</code> <code>KeepSeparator</code>  No Whether to keep the separator in the output. <code>false</code> <code>Bool</code> <p>This shard splits the input string into a sequence of its constituent strings, using the string specified in the Separator parameter to segment the input. If the KeepSeparator parameter is true, the separator will be included in the output.</p> <p> </p>"},{"location":"shards/shards/String/Starts/","title":"String.Starts","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string to check. <code>String</code> <code>Output \u27a1\ufe0f</code> True if the input string starts with the string specified, false otherwise. <code>Bool</code> <code>With</code>  No The string that the input needs to start with to output true. `` <code>String</code><code>Var(String)</code> <p>This shard checks if the input string starts with the string specified in the With parameter. If the input string does contain the string specified, the shard will output true. Otherwise, it will output false.</p>"},{"location":"shards/shards/String/Starts/#details","title":"Details","text":"<p>The shard parses the input string from the left to right. Eg. \"Hello World\" and \"Hello2 World\" will both return true if \"Hello\" is checked for. \"2Hello World\" however will return false.</p> <p> </p>"},{"location":"shards/shards/String/ToLower/","title":"String.ToLower","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string to convert to lowercase. <code>String</code> <code>Output \u27a1\ufe0f</code> The input string converted to lowercase. <code>String</code> <p>This shard converts all characters in the input string to lowercase.</p>"},{"location":"shards/shards/String/ToLower/#examples","title":"Examples","text":"Code <pre><code>@wire(main-wire {\n  \"Hello\" | String.ToLower | Log\n  Assert.Is(\"hello\" Break: true)\n\n} Looped: true)\n\n{logic-behavior: main-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/String/ToUpper/","title":"String.ToUpper","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string to convert to uppercase. <code>String</code> <code>Output \u27a1\ufe0f</code> The input string converted to uppercase. <code>String</code> <p>This shard converts all characters in the input string to uppercase.</p>"},{"location":"shards/shards/String/ToUpper/#examples","title":"Examples","text":"Code <pre><code>@wire(main-wire {\n  \"Hello\" | String.ToUpper | Log\n  Assert.Is(\"HELLO\")\n\n} Looped: true)\n\n{logic-behavior: main-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/String/Trim/","title":"String.Trim","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string to trim. <code>String</code> <code>Output \u27a1\ufe0f</code> The input string with all leading and trailing whitespace characters removed. <code>String</code> <p>This shard removes all leading and trailing whitespace characters from the input string and outputs the trimmed string.</p> <p> </p>"},{"location":"shards/shards/TargetCamera/FromLookAt/","title":"TargetCamera.FromLookAt","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>{pivot: Float3 distance: Float rotation: Float2}</code> <code>Target</code>  No <code>@f3(0 0 0)</code> <code>None</code><code>Float3</code><code>Var(Float3)</code> <code>Position</code>  No <code>@f3(2.5 2.5 5)</code> <code>None</code><code>Float3</code><code>Var(Float3)</code> <p>Provides editor free camera controls</p> <p> </p>"},{"location":"shards/shards/TargetCamera/Matrix/","title":"TargetCamera.Matrix","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>{pivot: Float3 distance: Float rotation: Float2}</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float4](4)</code> <p>Turns the target camera state into a view matrix</p> <p> </p>"},{"location":"shards/shards/Tensor/Add/","title":"Tensor.Add","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Tensor</code> <code>Other</code>  No The tensor to add. <code>none</code> <code>Var(Tensor)</code> <p>Adds two tensors element-wise.</p> <p> </p>"},{"location":"shards/shards/Tensor/Div/","title":"Tensor.Div","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Tensor</code> <code>Other</code>  No The tensor to divide by. <code>none</code> <code>Var(Tensor)</code><code>Float</code> <p>Divides two tensors element-wise.</p> <p> </p>"},{"location":"shards/shards/Tensor/MatMul/","title":"Tensor.MatMul","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Tensor</code> <code>Other</code>  No The tensor to multiply with. <code>none</code> <code>Var(Tensor)</code> <p>Performs matrix multiplication of two tensors.</p> <p> </p>"},{"location":"shards/shards/Tensor/Mul/","title":"Tensor.Mul","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Tensor</code> <code>Other</code>  No The tensor to multiply with. <code>none</code> <code>Var(Tensor)</code> <p>Multiplies two tensors element-wise.</p> <p> </p>"},{"location":"shards/shards/Tensor/Pow/","title":"Tensor.Pow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Tensor</code> <code>Other</code>  No The tensor of exponents. <code>none</code> <code>Var(Tensor)</code> <p>Raises each element of the tensor to the power of the corresponding element in another tensor.</p> <p> </p>"},{"location":"shards/shards/Tensor/Reshape/","title":"Tensor.Reshape","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Tensor</code> <code>Shape</code>  No The new shape for the tensor. <code>none</code> <code>[Int]</code><code>Var([Int])</code> <p>Reshapes the tensor to the specified shape.</p> <p> </p>"},{"location":"shards/shards/Tensor/Shape/","title":"Tensor.Shape","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Int]</code> <p>Outputs the shape of the tensor.</p> <p> </p>"},{"location":"shards/shards/Tensor/Slice/","title":"Tensor.Slice","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Tensor</code> <code>Dim</code>  No The dimension along which to slice the tensor. <code>none</code> <code>Int</code><code>Var(Int)</code> <code>Start</code>  No The starting index of the slice. <code>none</code> <code>Int</code><code>Var(Int)</code> <code>End</code>  No The ending index of the slice (exclusive). <code>none</code> <code>Int</code><code>Var(Int)</code> <p>Slices a tensor along a specified dimension.</p> <p> </p>"},{"location":"shards/shards/Tensor/Split/","title":"Tensor.Split","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Tensor]</code> <code>Dim</code>  No The dimension along which to split the tensor. Default is 0. <code>0</code> <code>Int</code><code>Var(Int)</code><code>None</code> <code>Size</code>  No The size of the sections to split the tensor into. <code>none</code> <code>Int</code><code>Var(Int)</code> <p>Splits a tensor into multiple tensors along a specified dimension.</p> <p> </p>"},{"location":"shards/shards/Tensor/Stack/","title":"Tensor.Stack","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Tensor]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Tensor</code> <code>Dim</code>  No The dimension along which to stack the tensors. Default is 0. <code>0</code> <code>Int</code><code>Var(Int)</code><code>None</code> <p>Stacks a sequence of tensors along a new axis.</p> <p> </p>"},{"location":"shards/shards/Tensor/Sub/","title":"Tensor.Sub","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Tensor</code> <code>Other</code>  No The tensor to subtract. <code>none</code> <code>Var(Tensor)</code> <p>Subtracts two tensors element-wise.</p> <p> </p>"},{"location":"shards/shards/Tensor/Sum/","title":"Tensor.Sum","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Tensor</code> <code>Dims</code>  No The dimensions to sum over. If not provided, sum over all dimensions. <code>none</code> <code>[Int]</code><code>Var([Int])</code><code>None</code> <p>Computes the sum of tensor elements along the specified dimensions.</p> <p> </p>"},{"location":"shards/shards/Tensor/ToFloat/","title":"Tensor.ToFloat","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float</code> <p>Converts a single-element tensor to a float (f64) scalar.</p> <p> </p>"},{"location":"shards/shards/Tensor/ToFloats/","title":"Tensor.ToFloats","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Float]</code> <p>Flattens a tensor into a Shards sequence of floats.</p> <p> </p>"},{"location":"shards/shards/Tensor/ToInts/","title":"Tensor.ToInts","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Int]</code> <p>Flattens a tensor into a Shards sequence of integers.</p> <p> </p>"},{"location":"shards/shards/Tensor/ToString/","title":"Tensor.ToString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <p>Outputs a string representation of a tensor.</p> <p> </p>"},{"location":"shards/shards/Tensor/Transpose/","title":"Tensor.Transpose","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Tensor</code> <p>Transposes the dimensions of the tensor.</p> <p> </p>"},{"location":"shards/shards/Tensor/ZerosLike/","title":"Tensor.ZerosLike","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Tensor</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Tensor</code> <p>Creates a tensor of zeros with the same shape as the input tensor.</p> <p> </p>"},{"location":"shards/shards/Time/Delta/","title":"Time.Delta","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the amount of time that has elapsed in seconds. <code>Float</code> <p>Outputs the time between the last call of this shard and the current call in seconds, capped to a limit</p> <p> </p>"},{"location":"shards/shards/Time/DeltaMs/","title":"Time.DeltaMs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the amount of time that has elapsed in milliseconds. <code>Float</code> <p>Outputs the time between the last call of this shard and the current call in milliseconds, capped to a limit</p> <p> </p>"},{"location":"shards/shards/Time/Epoch/","title":"Time.Epoch","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Amount of time since the Unix epoch in seconds. <code>Int</code> <p>This shard outputs the the amount of time that has elapsed from the Unix epoch to the current system time in seconds.</p>"},{"location":"shards/shards/Time/Epoch/#details","title":"Details","text":"<p>Unix Epoch time is the number of seconds that have elapsed since 00:00:00 UTC on 1 January 1970.</p> <p> </p>"},{"location":"shards/shards/Time/EpochLocal/","title":"Time.EpochLocal","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Amount of time since the Unix epoch in local time seconds. <code>Int</code> <p>This shard outputs the amount of time that has elapsed from the Unix epoch to the current local system time in seconds.</p> <p> </p>"},{"location":"shards/shards/Time/EpochLocalMs/","title":"Time.EpochLocalMs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Amount of time since the Unix epoch in local time milliseconds. <code>Int</code> <p>This shard outputs the amount of time that has elapsed from the Unix epoch to the current local system time in milliseconds.</p> <p> </p>"},{"location":"shards/shards/Time/EpochMs/","title":"Time.EpochMs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Amount of time since the Unix epoch in milliseconds. <code>Int</code> <p>This shard outputs the the amount of time that has elapsed from the Unix epoch to the current system time in milliseconds.</p>"},{"location":"shards/shards/Time/EpochMs/#details","title":"Details","text":""},{"location":"shards/shards/Time/MovingAverage/","title":"Time.MovingAverage","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The floating point number to compute the average of. <code>Float</code> <code>Output \u27a1\ufe0f</code> The average of the floating point number over the specified number of frames. <code>Float</code> <code>Window</code>  No The sample size in frames <code>16</code> <code>Int</code> <code>Clear</code>  No Set to true to clear the moving average <code>none</code> <code>None</code><code>Var(Bool)</code> <p>This shard computes the average of a floating point number over a specified number of frames.</p>"},{"location":"shards/shards/Time/MovingAverage/#details","title":"Details","text":"<p>Each frame the shard is called, it stores the value provided as input and returns the average. The number of samples it stores is specified by the number of frames given in the Window parameter.</p> <p> </p>"},{"location":"shards/shards/Time/Now/","title":"Time.Now","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the amount of time that has elapsed in seconds. <code>Float</code> <p>This shard outputs the amount of time that has elapsed since the shards application or script was launched in seconds.</p> <p> </p>"},{"location":"shards/shards/Time/NowMs/","title":"Time.NowMs","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the amount of time that has elapsed in milliseconds. <code>Float</code> <p>This shard outputs the amount of time that has elapsed since the shards application or script was launched in milliseconds.</p> <p> </p>"},{"location":"shards/shards/Time/ToString/","title":"Time.ToString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The time to convert. <code>Int</code><code>Float</code> <code>Output \u27a1\ufe0f</code> A string representation of the time. <code>String</code> <code>Millis</code>  No True if the input is given in milliseconds, False if given in seconds. <code>false</code> <code>Bool</code> <p>This shard converts time into a human readable string.</p>"},{"location":"shards/shards/Time/ToString/#examples","title":"Examples","text":"Code <pre><code>@wire(main-wire {\n  0 | Time.ToString | Log\n  0 | Time.ToString(Millis: true) | Log\n  500 | Time.ToString | Log\n  500 | Time.ToString(Millis: true) | Log\n  Time.EpochMs | Time.ToString(Millis: true) | Log\n\n  Pause(2.0)\n\n  Time.Now | Time.ToString | Log\n  Time.NowMs | Time.ToString(Millis: true) | Log\n} Looped: true)\n\n{logic-behavior: main-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/AddFonts/","title":"UI.AddFonts","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[[Any]]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[[Any]]</code> <p>Adds custom fonts to the UI system, the input should a seq of a pair (name, bytes).</p> <p> </p>"},{"location":"shards/shards/UI/Area/","title":"UI.Area","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Position</code>  No Defines the position of the UI element. If 'Anchor' is set, this acts as a relative offset (X/Y). Accepts fixed and variable float2 types. <code>none</code> <code>Float2</code><code>Var(Float2)</code> <code>Pivot</code>  No Specifies the pivot point of the UI element. Can be any predefined anchor type or variable. <code>none</code> <code>Anchor</code><code>Var(Anchor)</code> <code>Anchor</code>  No Determines the side of the screen where the UI element is anchored. Accepts predefined anchor types or variables. <code>none</code> <code>Anchor</code><code>Var(Anchor)</code> <code>Order</code>  No Sets the rendering layer for the UI element. The default layer is 'background'. <code>none</code> <code>Order</code> <code>Constrain</code>  No Constrains the UI element to remain within the screen boundaries. Accepts a boolean value. <code>false</code> <code>Bool</code> <code>ForcedSize</code>  No Force area to be the given size, will update the area state <code>none</code> <code>None</code><code>Float2</code><code>Var(Float2)</code> <p>Places UI element at a specific position.</p>"},{"location":"shards/shards/UI/Area/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  ; The default order for a window is Order::Middle, and depending on focus, this window,\n  ; or the Area with Order::Middle will be drawn on top of the other.\n  UI.Window(\n    Title: \"Greetings\"\n    Flags: WindowFlags::NoCollapse\n    Contents: {\n      \"Hello shards!\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::TopLeft\n    ; Order: Order::Background ; This is the default for UI.Area\n    Contents: {\n      \"Lowest: Background\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::Left\n    Order: Order::PanelResizeLine\n    Contents: {\n      \"2nd Lowest: PanelResizeLine\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::BottomLeft\n    Order: Order::Middle\n    Contents: {\n      \"3rd Lowest: Middle\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::TopRight\n    Order: Order::Foreground\n    Contents: {\n      \"3rd Highest: Foreground\" | UI.Label(Wrap: false)\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::Right\n    Order: Order::Tooltip\n    Contents: {\n      \"2nd Highest: Tooltip\" | UI.Label(Wrap: false)\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::BottomRight\n    Order: Order::Debug\n    Contents: {\n      \"Highest: Debug\" | UI.Label(Wrap: false)\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Area(\n    Anchor: Anchor::TopLeft\n    Contents: {\n      \"TopLeft\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::Top\n    Contents: {\n      \"Top\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::TopRight\n    Contents: {\n      \"TopRight\" | UI.Label(Wrap: false)\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::Center\n    Contents: {\n      \"Center\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::Right\n    Contents: {\n      \"Right\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::BottomLeft\n    Contents: {\n      \"BottomLeft\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::Bottom\n    Contents: {\n      \"Bottom\" | UI.Label\n    }\n  )\n  UI.Area(\n    Anchor: Anchor::BottomRight\n    Contents: {\n      \"BottomRight\" | UI.Label(Wrap: false)\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/AutoGrid/","title":"UI.AutoGrid","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Any]</code> <code>Contents</code>  No The UI contents to be generated and inserted in each column for each element in the given sequence. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Striped</code>  No Whether to alternate a subtle background color to every other row. <code>false</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>MaxGridWidth</code>  No Maximum grid width. <code>none</code> <code>Float</code><code>Var(Float)</code> <code>ItemWidth</code>  No The width of each item. <code>none</code> <code>Float</code><code>Var(Float)</code> <code>ColumnSpacing</code>  No Spacing between columns. <code>none</code> <code>Float</code><code>Var(Float)</code> <code>RowSpacing</code>  No Spacing between rows. <code>none</code> <code>Float</code><code>Var(Float)</code> <code>MaxTileHeight</code>  No Maximum height of each tile for viewport culling. <code>none</code> <code>Float</code><code>Var(Float)</code> <p>Works like UI.Grid, but given a Sequence, it will, it each object in the Sequence, execute the Shard provided in its Contents and automatically wrap the generated contents when it exceeds the grid's width.</p>"},{"location":"shards/shards/UI/AutoGrid/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"Greetings\"\n    Contents: {\n      [\n        \"Hello\" \"World\" \"Please\" \"Sort\" \"Me\"\n        \"Hello\" \"World\" \"Please\" \"Sort\" \"Me\"\n      ]\n      UI.AutoGrid(\n        ItemWidth: 300.0\n        MaxGridWidth: 700.0 ; Since item size is 300, max grid width is 700, only two items allowed per row\n        Contents: {\n          UI.Button(Label: \"Test\" Action: {\n            Log ; Logs the given sequence element\n          })\n        }\n      )\n      ; | Log ; Passthrough\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"Greetings\"\n    Contents: {\n      [\n        \"Hello\" \"World\" \"Please\" \"Sort\" \"Me\"\n        \"Hello\" \"World\" \"Please\" \"Sort\" \"Me\"\n      ]\n      UI.AutoGrid(\n        ItemWidth: 300.0\n        MaxGridWidth: 700.0\n        ColumnSpacing: 50.0 ; Spacing between columns, not included in MaxGridWidth\n        RowSpacing: 30.0 ; Spacing between rows\n        Contents: {\n          UI.Button(Label: \"Test\" Action: {\n            Log\n          })\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"Greetings\"\n    Width: 200 ; Makes window resizable but with a minimum width of 200, allowing resizing window to manipulate number of rows in autogrid\n    Contents: {\n      [\n        \"Hello\" \"World\" \"Please\" \"Sort\" \"Me\"\n        \"Hello\" 2 \"Please\" 4 5.5\n      ]\n      UI.AutoGrid(\n        ItemWidth: 300.0\n        Contents: {\n          UI.Button(Label: \"Test\" Action: {\n            Log ; Logs the given sequence element\n          })\n        }\n      )\n      ; | Log ; Passthrough\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/BottomPanel/","title":"UI.BottomPanel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the panel. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Resizable</code>  No Whether the panel can be resized. <code>false</code> <code>Bool</code> <code>DefaultSize</code>  No The initial size of the panel. <code>none</code> <code>Float</code><code>None</code> <code>MinSize</code>  No The minimum allowable size of the panel. <code>none</code> <code>Float</code><code>None</code> <code>MaxSize</code>  No The maximum allowable size of the panel. <code>none</code> <code>Float</code><code>None</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Layout UI elements into the panel.</p>"},{"location":"shards/shards/UI/BottomPanel/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.BottomPanel(\n  Contents: {\"Bottom Panel\" | UI.Label})\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Button/","title":"UI.Button","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Action shards of the button. <code>Any</code> <code>Output \u27a1\ufe0f</code> Indicates whether the button was clicked during this frame. <code>Bool</code> <code>Label</code>  No The text label of this button. `` <code>String</code><code>Var(String)</code> <code>Action</code>  No The shards to execute when the button is pressed. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code><code>None</code> <code>Wrap</code>  No The text wrapping mode. <code>TextWrap::Extend</code> <code>TextWrap</code><code>Bool</code> <code>Selected</code>  No Indicates whether the button is selected. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <p>Clickable button with text.</p>"},{"location":"shards/shards/UI/Button/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Button(\n        Label: \"Click me!\"\n        Style: {color: @color(255 255 0)}\n        Action: Msg(\"Clicked\")\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Button(\n        Label: \"Click me!\"\n        Action: Msg(\"Clicked\")\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Canvas/","title":"UI.Canvas","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Contents</code>  No <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Rect</code>  No The target UI position (X/Y/W/H) <code>none</code> <code>Float4</code><code>Var(Float4)</code> <code>Order</code>  No The order this UI is drawn in <code>none</code> <code>Order</code> <p>A canvas to draw UI elements on</p> <p> </p>"},{"location":"shards/shards/UI/CentralPanel/","title":"UI.CentralPanel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the panel. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Layout UI elements into the central panel.</p>"},{"location":"shards/shards/UI/CentralPanel/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.TopPanel(\n        Contents: {\n          \"Top Panel\" | UI.Label\n        }\n      )\n      UI.CentralPanel(\n        Contents: {\n          \"Central Panel\" | UI.Label\n        }\n      )\n      UI.BottomPanel(\n        Contents: {\n          \"Bottom Panel\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Checkbox/","title":"UI.Checkbox","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Indicates whether the checkbox state changed during this frame. <code>Bool</code> <code>Label</code>  No The text label of this checkbox. <code>none</code> <code>String</code><code>None</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <p>Boolean on/off widget with text label.</p>"},{"location":"shards/shards/UI/Checkbox/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.CentralPanel(\n    UI.Checkbox(\n      Label: \"Checked\"\n      Style: {color: @color(255 0 255) italics: true}\n      Variable: checked\n    )\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.CentralPanel(\n    UI.Checkbox(\n      Label: \"Checked\"\n      Variable: checked\n    )\n  )\n} Looped: true)\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/CloseMenu/","title":"UI.CloseMenu","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <p>Closes the currently opened menu.</p>"},{"location":"shards/shards/UI/CloseMenu/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Checkbox(\n        Label: \"Checked\"\n        Style: {color: @color(255 0 255) italics: true}\n        Variable: checked\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/CodeEditor/","title":"UI.CodeEditor","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced when changed. <code>Bool</code> <code>Code</code>  No The variable that holds the code to edit. <code>none</code> <code>String</code><code>Var(String)</code> <code>Language</code>  No The name of the programming language for syntax highlighting. <code>none</code> <code>String</code><code>Var(String)</code> <p>A TextField with support for highlighting.</p>"},{"location":"shards/shards/UI/CodeEditor/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      Once({\n        \"\" &gt;= code\n      })\n      UI.TopPanel(\n        Contents:\n        UI.MenuBar(\n          Contents:\n          UI.Menu(\n            \"Edit\"\n            UI.Button(\n              \"Clear\"\n              {\n                \"\" &gt; code\n                UI.CloseMenu\n              }\n            )\n          )\n        )\n      )\n      UI.CentralPanel(\n      Contents:\n      UI.CodeEditor(code \"Rust\"))\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Collapsing/","title":"UI.Collapsing","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the collapsing header. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Heading</code>  No The heading text or widgets for this collapsing header. <code>none</code> <code>String</code><code>Var(String)</code><code>Shard</code><code>[Shard]</code><code>None</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>DefaultOpen</code>  No Whether the collapsing header is opened by default. <code>false</code> <code>Bool</code><code>Var(Bool)</code> <p>A header which can be collapsed/expanded, revealing a contained UI region.</p>"},{"location":"shards/shards/UI/Collapsing/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Collapsing(\n        Heading: UI.Button(\"Heading\" Msg(\"Clicked\"))\n        DefaultOpen: true\n        Contents: {\"Content\" | UI.Label}\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Collapsing(\n        Heading: \"Heading\"\n        DefaultOpen: true\n        Contents: {\n          \"Content\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/ColorInput/","title":"UI.ColorInput","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The selected color. <code>Color</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Color</code><code>Var(Color)</code><code>None</code> <p>A widget where a color can be selected.</p>"},{"location":"shards/shards/UI/ColorInput/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.ColorInput(Variable: color)\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Columns/","title":"UI.Columns","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards (each column). <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No A sequence of UI contents. <code>[]</code> <code>[None Shard [Shard]]</code> <p>Splits the contents into several columns.</p>"},{"location":"shards/shards/UI/Columns/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Columns(\n        Contents:\n        [{\"Column 1\" | UI.Label}\n          {\"Column 2\" | UI.Label}]\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Combo/","title":"UI.Combo","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> The selected value. <code>Any</code> <code>Label</code>  No The text label of this combobox. <code>none</code> <code>String</code><code>None</code> <code>Index</code>  No The index of the selected item. <code>none</code> <code>Int</code><code>Var(Int)</code><code>None</code> <code>Width</code>  No The width of the button and menu. <code>none</code> <code>Float</code><code>Var(Float)</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <p>A drop-down selection menu with a label.</p>"},{"location":"shards/shards/UI/Combo/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.CentralPanel(\n    {[\"\u03b1 \u0391\" \"\u03c9 \u03a9\"]\n      UI.Combo(\n        Label: \"Greek letter\"\n        Style: {color: @color(200 10 200)}\n        Index: index\n      )\n      ExpectString &gt;= letter\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      {[\"\u03b1 \u0391\" \"\u03c9 \u03a9\"]\n        UI.Combo(\n          Label: \"Greek letter\"\n          Index: index\n        )\n        ExpectString &gt;= letter\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Console/","title":"UI.Console","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The raw logs. <code>String</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>String</code> <code>ShowFilters</code>  No Whether to display filter controls. <code>false</code> <code>Bool</code> <code>Style</code>  No The console style. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <p>A console with formatted logs.</p>"},{"location":"shards/shards/UI/Console/#examples","title":"Examples","text":"Code <pre><code>@wire(capture {\n  CaptureLog(\n    Size: 24\n    MinLevel: \"info\"\n    Pattern: \"%^[%l]%$ [%Y-%m-%d %T.%e] %v\"\n    Suspend: true\n  )\n  String.Join &gt; logs\n  Math.Inc(generation)\n} Looped: true)\n\n@wire(ui-wire {\n  Once {\n    \"\" | Set(logs Global: true)\n    0 | Set(generation Global: true)\n    Detach(capture)\n  }\n\n  UI.BottomPanel(\n    Contents:\n    {Get(generation Global: true)\n      ToString | UI.Label\n    }\n  )\n  UI.CentralPanel(\n    Contents:\n    {UI.Button(\"Say Hello\" Msg(\"Hello!\"))\n      Get(logs Global: true)\n      UI.Console(ShowFilters: true)\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Button(\"Say Hello\" Msg(\"Hello!\"))\n      CaptureLog(\n        Size: 24\n        MinLevel: \"info\"\n        Pattern: \"%^[%l]%$ [%Y-%m-%d %T.%e] %v\"\n      )\n      String.Join\n      UI.Console\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Disable/","title":"UI.Disable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the scope. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Disable</code>  No Whether the contents should be disabled. <code>true</code> <code>Bool</code><code>Var(Bool)</code> <p>Creates a scoped child UI.</p>"},{"location":"shards/shards/UI/Disable/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Disable\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Disable(\n        Disable: true\n        Contents:\n        UI.Button(\"Can't be clicked\")\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/DockArea/","title":"UI.DockArea","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> TODO. <code>Any</code> <code>Output \u27a1\ufe0f</code> TODO. <code>Any</code> <code>Contents</code>  No The UI contents containing tabs. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>TODO.</p>"},{"location":"shards/shards/UI/DockArea/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI DockArea\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.DockArea(\n        Contents:\n        {\n          UI.Tab(\n            Title: \"Tab 1\"\n            Contents:\n            {\"Tab 1 contents\" | UI.Label}\n          )\n          UI.Tab(\n            Title: \"Tab 2\"\n            Contents:\n            {\"Tab 2 contents\" | UI.Label}\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/DragAndDrop/","title":"UI.DragAndDrop","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Contents</code>  No The property to retrieve from the UI context. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Hover</code>  No Callback function for checking if this is a valid drop target. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Drop</code>  No Callback function for when something is dropped. When set, this element will act as a drop target. When unset, it will act as a drag source. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>ID</code>  No An optional ID value in case of ID conflicts. <code>none</code> <code>String</code><code>Var(String)</code><code>None</code> <code>Visualize</code>  No Visualize valid drop targets <code>none</code> <code>Bool</code><code>None</code> <p>Drag and drop source &amp; target.</p> <p> </p>"},{"location":"shards/shards/UI/Float2Input/","title":"UI.Float2Input","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float2</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Float2</code><code>Var(Float2)</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/Float2Input/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Float2 Input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Float2Input(Variable: float2)\n        ExpectFloat2\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Float2Slider/","title":"UI.Float2Slider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float2</code> <code>Label</code>  No The label for this widget. <code>none</code> <code>String</code><code>None</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Float2</code><code>Var(Float2)</code> <code>Min</code>  No The minimum value. <code>none</code> <code>Float2</code><code>Var(Float2)</code> <code>Max</code>  No The maximum value. <code>none</code> <code>Float2</code><code>Var(Float2)</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/Float2Slider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Float2Slider(\n        Variable: float2\n        Min: @f2(0.0) Max: @f2(1.0)\n      )\n      ExpectFloat2\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Float3Input/","title":"UI.Float3Input","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float3</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Float3</code><code>Var(Float3)</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/Float3Input/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Float3 Input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Float3Input(Variable: float3)\n        ExpectFloat3\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Float3Slider/","title":"UI.Float3Slider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float3</code> <code>Label</code>  No The label for this widget. <code>none</code> <code>String</code><code>None</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>Min</code>  No The minimum value. <code>none</code> <code>Float3</code><code>Var(Float3)</code> <code>Max</code>  No The maximum value. <code>none</code> <code>Float3</code><code>Var(Float3)</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/Float3Slider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Float3 Slider\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Float3Slider(\n          Variable: float3\n          Min: @f3(0) Max: @f3(1)\n        )\n        ExpectFloat3\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Float4Input/","title":"UI.Float4Input","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float4</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Float4</code><code>Var(Float4)</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/Float4Input/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Float 4 Input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Float4Input(Variable: float4)\n        ExpectFloat4\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Float4Slider/","title":"UI.Float4Slider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float4</code> <code>Label</code>  No The label for this widget. <code>none</code> <code>String</code><code>None</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Float4</code><code>Var(Float4)</code> <code>Min</code>  No The minimum value. <code>none</code> <code>Float4</code><code>Var(Float4)</code> <code>Max</code>  No The maximum value. <code>none</code> <code>Float4</code><code>Var(Float4)</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/Float4Slider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Float 4 Slider\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Float4Slider(\n          Variable: float4\n          Min: @f4(0) Max: @f4(1)\n        )\n        ExpectFloat4\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/FloatInput/","title":"UI.FloatInput","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Float</code><code>Var(Float)</code> <code>Prefix</code>  No Display a prefix before the number. <code>none</code> <code>String</code><code>None</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/FloatInput/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Float Input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.FloatInput(Variable: float)\n        ExpectFloat\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/FloatSlider/","title":"UI.FloatSlider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Float</code> <code>Label</code>  No The text label for this widget. <code>none</code> <code>String</code><code>None</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Float</code><code>Var(Float)</code> <code>Min</code>  No The minimum value. <code>none</code> <code>Float</code><code>Var(Float)</code> <code>Max</code>  No The maximum value. <code>none</code> <code>Float</code><code>Var(Float)</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/FloatSlider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI FLoat Slider\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.FloatSlider(\n          Variable: float\n          Min: 0.0 Max: 1.0\n        )\n        ExpectFloat\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Frame/","title":"UI.Frame","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the frame. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>InnerMargin</code>  No The margin inside the frame, between the outline and the contents. <code>none</code> <code>Float4</code> <code>OuterMargin</code>  No The margin outside the frame. <code>none</code> <code>Float4</code> <code>Rounding</code>  No Rounding radiuses for the corners. <code>none</code> <code>Float4</code> <code>FillColor</code>  No The color filling the background of the frame. <code>none</code> <code>Color</code><code>Var(Color)</code><code>None</code> <code>StrokeColor</code>  No The color for the frame outline. <code>none</code> <code>Color</code><code>Var(Color)</code><code>None</code> <code>StrokeWidth</code>  No The width of the frame outline. <code>none</code> <code>Float</code> <p>Visually groups the contents together.</p>"},{"location":"shards/shards/UI/Frame/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Frame\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Frame(\n          InnerMargin: @f4(10) OuterMargin: @f4(0) Rounding: @f4(5)\n          FillColor: @color(50 50 21)\n          StrokeColor: @color(250 250 32) StrokeWidth: 2.0\n          Contents:\n          {\n            \"Frame content\" | UI.Label\n          }\n        )\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/GetClipboard/","title":"UI.GetClipboard","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of this shard is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Outputs the current clipboard contents as a string. <code>String</code> <p>This shard retrieves the current system clipboard contents.</p>"},{"location":"shards/shards/UI/GetClipboard/#details","title":"Details","text":"<p>If the clipboard contains a value that is not a string, eg. an image, the shard will return an empty string.</p> <p> </p>"},{"location":"shards/shards/UI/Grid/","title":"UI.Grid","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the grid. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Striped</code>  No Whether to alternate a subtle background color to every other row. <code>false</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>NumColumns</code>  No The number of columns in the grid. Setting this will allow the last column to expand to take up the rest of the space of the parent UI. <code>none</code> <code>Int</code><code>Var(Int)</code><code>None</code> <code>MinWidth</code>  No Minimum column width. <code>none</code> <code>Float</code><code>Var(Float)</code> <code>MaxWidth</code>  No Maximum column width. <code>none</code> <code>Float</code><code>Var(Float)</code> <code>Spacing</code>  No Spacing between columns/rows. <code>none</code> <code>Float2</code><code>Var(Float2)</code> <p>Simple grid layout.</p>"},{"location":"shards/shards/UI/Grid/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Grid\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Grid(\n          Striped: true\n          Contents:\n          {\"Col 1\" | UI.Label\n            \"Col 2\" | UI.Label\n            \"Col 3\" | UI.Label\n            UI.NextRow\n            \"Hello\" | UI.Label\n            \"shards\" | UI.Label\n            \"!\" | UI.Label\n            UI.NextRow\n            \"Lorem ipsum dolor sit amet\" | UI.Label\n            \"consectetur adipiscing elit\" | UI.Label\n            \"sed do eiusmod tempor\" | UI.Label\n          }\n        )\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Group/","title":"UI.Group","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the group. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Visually groups the contents together.</p>"},{"location":"shards/shards/UI/Group/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Group\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      {\n        UI.Group(\n        Contents:\n        {\"Group content\" | UI.Label})\n      }\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/HexViewer/","title":"UI.HexViewer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The data to visualize. Supports primitive types only (floats, ints, string and bytes). <code>Bytes</code><code>Enum</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>String</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Bytes</code><code>Enum</code><code>Float</code><code>Float2</code><code>Float3</code><code>Float4</code><code>Int</code><code>Int2</code><code>Int3</code><code>Int4</code><code>Int8</code><code>Int16</code><code>String</code> <p>Displays an hexadecimal viewer of data.</p>"},{"location":"shards/shards/UI/HexViewer/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Hex Viewer\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        \"Hello shards!\" &gt;= text\n      })\n\n      UI.Horizontal(\n        {\n          \"Text: \" | UI.Label\n          UI.TextField(text)\n        }\n      )\n\n      text | UI.HexViewer\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Horizontal/","title":"UI.Horizontal","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the layout. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Wrap</code>  No Wrap the content once it reaches the right edge. <code>false</code> <code>Bool</code> <code>Centered</code>  No Center the contents horizontally. <code>false</code> <code>Bool</code> <p>Layout the contents horizontally.</p>"},{"location":"shards/shards/UI/Horizontal/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Horizntal\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Horizontal({\n        \"Hello\" | UI.Label\n        UI.Separator\n        \"World\" | UI.Label\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Hyperlink/","title":"UI.Hyperlink","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The URL. <code>String</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>String</code> <code>Label</code>  No Optional label for the hyperlink. <code>none</code> <code>String</code><code>None</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <p>A clickable hyperlink.</p>"},{"location":"shards/shards/UI/Hyperlink/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Hyperlink\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      \"https://docs.fragcolor.com\"\n      UI.Hyperlink(\n        Label: \"Fragcolor documentation\"\n        Style: {italics: true}\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Hyperlink\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      \"https://docs.fragcolor.com\"\n      UI.Hyperlink(Label: \"Fragcolor documentation\")\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Image/","title":"UI.Image","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The image to display. <code>Image</code><code>GFX.Texture2D</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Image</code><code>GFX.Texture2D</code> <code>Scale</code>  No Scaling to apply to the source image. <code>@f2(1 1)</code> <code>Float2</code><code>Var(Float2)</code> <code>Size</code>  No The size to render the image at. <code>none</code> <code>Float2</code><code>Var(Float2)</code> <code>ScalingAware</code>  No When set to true, this image's pixels will be rendered 1:1 regardless of UI context point size. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <p>Display an image in the UI.</p>"},{"location":"shards/shards/UI/Image/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Image\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        asset/r0 | GFX.Texture = uiImage1 ;; replace with whatever image you have as references\n\n      })\n\n      uiImage1 | UI.Image\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/ImageButton/","title":"UI.ImageButton","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Action shards of the button. <code>Image</code><code>GFX.Texture2D</code> <code>Output \u27a1\ufe0f</code> Indicates whether the button was clicked during this frame. <code>Bool</code> <code>Action</code>  No The shards to execute when the button is pressed. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Scale</code>  No Scaling to apply to the source image. <code>@f2(1 1)</code> <code>Float2</code><code>Var(Float2)</code> <code>Size</code>  No The size to render the image at. <code>none</code> <code>Float2</code><code>Var(Float2)</code> <code>ScalingAware</code>  No When set to true, this image's pixels will be rendered 1:1 regardless of UI context point size. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>Selected</code>  No Indicates whether the button is selected. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <p>Clickable button with image.</p>"},{"location":"shards/shards/UI/ImageButton/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Image Button\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        asset/r0 | GFX.Texture = uiImage1 ;; replace with whatever image you have as references\n\n      })\n\n      uiImage1 | UI.ImageButton(Action: {\n        Msg(\"Image Button Working\")\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Indent/","title":"UI.Indent","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Creates a child UI which is indented to the right.</p>"},{"location":"shards/shards/UI/Indent/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI indent\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      \"Part A\" | UI.Label\n      UI.Indent(\n        Contents:\n        {\n          \"1.\" | UI.Label\n          UI.Indent(\n            Contents:\n            {\n              \"1.1.\" | UI.Label\n              \"1.2.\" | UI.Label\n            }\n          )\n          \"2.\" | UI.Label\n        }\n      )\n      UI.Separator\n      \"Part B\" | UI.Label\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Inspection/","title":"UI.Inspection","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <p>Show inspection ui</p> <p> </p>"},{"location":"shards/shards/UI/Int2Input/","title":"UI.Int2Input","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int2</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Int2</code><code>Var(Int2)</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/Int2Input/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Int2 Input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Int2Input(\n      Variable: int2)\n      ExpectInt2\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Int2Slider/","title":"UI.Int2Slider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int2</code> <code>Label</code>  No The label for this widget. <code>none</code> <code>String</code><code>None</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Int2</code><code>Var(Int2)</code> <code>Min</code>  No The minimum value. <code>none</code> <code>Int2</code><code>Var(Int2)</code> <code>Max</code>  No The maximum value. <code>none</code> <code>Int2</code><code>Var(Int2)</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/Int2Slider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"Int Slider\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Int2Slider(\n        Variable: int2\n        Min: @i2(1) Max: @i2(100)\n      )\n      ExpectInt2\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Int3Input/","title":"UI.Int3Input","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int3</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Int3</code><code>Var(Int3)</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/Int3Input/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Int3 Input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Int3Input(\n      Variable: int3)\n      ExpectInt3\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Int3Slider/","title":"UI.Int3Slider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int3</code> <code>Label</code>  No The label for this widget. <code>none</code> <code>String</code><code>None</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Int3</code><code>Var(Int3)</code> <code>Min</code>  No The minimum value. <code>none</code> <code>Int3</code><code>Var(Int3)</code> <code>Max</code>  No The maximum value. <code>none</code> <code>Int3</code><code>Var(Int3)</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/Int3Slider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"Int Int3 Slider\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Int3Slider(\n        Variable: int3\n        Min: @i3(1) Max: @i3(100)\n      )\n      ExpectInt3\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Int4Input/","title":"UI.Int4Input","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int4</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Int4</code><code>Var(Int4)</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/Int4Input/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Int 4 Input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Int4Input(\n      Variable: int4)\n      ExpectInt4\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Int4Slider/","title":"UI.Int4Slider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int4</code> <code>Label</code>  No The label for this widget. <code>none</code> <code>String</code><code>None</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Int4</code><code>Var(Int4)</code> <code>Min</code>  No The minimum value. <code>none</code> <code>Int4</code><code>Var(Int4)</code> <code>Max</code>  No The maximum value. <code>none</code> <code>Int4</code><code>Var(Int4)</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/Int4Slider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"Int 4 Slider\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Int4Slider(\n        Label: \"My Label\"\n        Style: {color: @color(255 128 64) italics: true}\n        Variable: int4\n        Min: @i4(1) Max: @i4(100)\n      )\n      ExpectInt4\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/IntInput/","title":"UI.IntInput","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Int</code><code>Var(Int)</code> <code>Prefix</code>  No Display a prefix before the number. <code>none</code> <code>String</code><code>None</code> <p>A numeric input.</p>"},{"location":"shards/shards/UI/IntInput/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Int input\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.IntInput(\n      Variable: int)\n      ExpectInt\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/IntSlider/","title":"UI.IntSlider","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced. <code>Int</code> <code>Label</code>  No The text label for this widget. <code>none</code> <code>String</code><code>None</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Int</code><code>Var(Int)</code> <code>Min</code>  No The minimum value. <code>none</code> <code>Int</code><code>Var(Int)</code> <code>Max</code>  No The maximum value. <code>none</code> <code>Int</code><code>Var(Int)</code> <p>A numeric slider.</p>"},{"location":"shards/shards/UI/IntSlider/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.IntSlider(\n        Label: \"My Label\"\n        Style: {color: @color(255 128 64) italics: true}\n        Variable: int\n        Min: 1 Max: 100\n      )\n      ExpectInt\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Label/","title":"UI.Label","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <code>Wrap</code>  No The text wrapping mode. <code>TextWrap::Extend</code> <code>TextWrap</code><code>Bool</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code><code>None</code> <p>Static text.</p>"},{"location":"shards/shards/UI/Label/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Label\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.Columns(\n        [{\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\" | UI.Label(Wrap: true)}\n          none\n          {\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\" | UI.Label(Wrap: false)}\n        ]\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Label\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      \"Hello Shards!\" | UI.Label\n      \"Hello Shards!\" | UI.Label(Style: {strikethrough: true})\n      \"Hello Shards!\" | UI.Label(Style: {underline: true})\n      \"Hello Shards!\" | UI.Label(Style: {italics: true})\n      \"Hello Shards!\" | UI.Label(Style: {color: @color(96 96 12)})\n      \"Hello Shards!\" | UI.Label(Style: {color: @color(12 96 96) italics: true})\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Label\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      \"Hello Shards!\" | UI.Label\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Layout/","title":"UI.Layout","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Not used. <code>Any</code> <code>Output \u27a1\ufe0f</code> Passthrough the input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Class</code>  No The Layout class defining all layout options. <code>none</code> <code>Var(Object)</code> <code>MinSize</code>  No Minimum reserved space for the UI. Overridden by FillWidth and FillHeight. <code>none</code> <code>Float2</code><code>Var(Float2)</code><code>None</code> <code>MaxSize</code>  No Maximum reserved space for the UI. Overridden by FillWidth and FillHeight. <code>none</code> <code>Float2</code><code>Var(Float2)</code><code>None</code> <code>FillWidth</code>  No Whether the layout should occupy the full width. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>FillHeight</code>  No Whether the layout should occupy the full height. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <p>Versatile layout with numerous customization options.</p>"},{"location":"shards/shards/UI/Layout/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Layout\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        UI.LayoutClass(\n          MainDirection: LayoutDirection::BottomUp\n          MainWrap: true\n          CrossAlign: LayoutAlign::Center\n          CrossJustify: true\n        ) = bottom-up-layout-class\n        false &gt;= checked\n        1 &gt;= choice\n      })\n\n      UI.Layout(\n        Class: bottom-up-layout-class\n        Contents: {\n          \"Wrapping text followed by example widgets:\" | UI.Label\n          UI.Checkbox(\n            Label: \"checkbox\"\n            Variable: checked\n          )\n          UI.RadioButton(\n            Label: \"radio\"\n            Variable: choice\n            Value: 1\n          )\n          UI.Button(\n            Label: \"button\"\n            Action: Msg(\"Clicked\")\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Layout\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        UI.LayoutClass(\n          MainDirection: LayoutDirection::RightToLeft\n          MinSize: @f2(200 200)\n          ; note that some direction layouts may try to expand to max size and this max size will increase if the contents are too large\n          ; also, without max size, the layout will try to expand to max size of the window, so for shrink to fit, may want to set to (0 0)\n          MaxSize: @f2(600 600)\n          ; FillHeight: true\n          ; FillWidth: true\n          Disabled: false\n          Frame: LayoutFrame::Widgets\n          EnableHorizontalScrollBar: true\n          EnableVerticalScrollBar: true\n          ScrollAreaMinWidth: 200.0\n          ScrollAreaMaxWidth: 200.0\n        ) = scroll-frame-layout-class\n        false &gt;= checked\n        1 &gt;= choice\n      })\n\n      UI.Layout(\n        Class: scroll-frame-layout-class\n        ; individual override for size for each layout is also possible\n        ; MinSize: @f2(200 200)\n        ; MaxSize: @f2(600 600)\n        ; FillHeight: true\n        ; FillWidth: true\n        Contents: {\n          \"Wrapping text followed by example widgets:\" | UI.Label\n          UI.Checkbox(\n            Label: \"checkbox\"\n            Variable: checked\n          )\n          UI.RadioButton(\n            Label: \"radio\"\n            Variable: choice\n            Value: 1\n          )\n          UI.Button(\n            Label: \"button\"\n            Action: Msg(\"Clicked\")\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Layout\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        UI.LayoutClass(\n        MainDirection: LayoutDirection::LeftToRight) = left-to-right-layout-class\n        UI.LayoutClass(\n        MainDirection: LayoutDirection::TopDown) = top-down-layout-class\n      })\n\n      UI.Layout(\n        Class: left-to-right-layout-class\n        MaxSize: @f2(0 0) ; use as small area as possible, this vertical separator needs this to act like egui vertical separator\n        Contents: {\n          \"Hello\" | UI.Label\n          UI.Separator\n          \"World\" | UI.Label\n        }\n      )\n      UI.Layout(\n        Class: top-down-layout-class\n        Contents: {\n          \"Hello\" | UI.Label\n          UI.Separator\n          \"World\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/LayoutClass/","title":"UI.LayoutClass","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> Not used. <code>Any</code> <code>Output \u27a1\ufe0f</code> A Layout class that can be used in other UI shards. <code>Object</code> <code>Parent</code>  No The parent Layout class to inherit parameters from. <code>none</code> <code>Var(Object)</code><code>None</code> <code>MainDirection</code>  No The primary direction of the UI element layout. <code>none</code> <code>LayoutDirection</code><code>None</code> <code>MainWrap</code>  No Should UI elements wrap when reaching the end of the main direction. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>MainAlign</code>  No Alignment of UI elements along the main axis. <code>none</code> <code>LayoutAlign</code><code>None</code> <code>MainJustify</code>  No Justification of UI elements along the main axis. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>CrossAlign</code>  No Alignment of UI elements along the cross axis. <code>none</code> <code>LayoutAlign</code><code>None</code> <code>CrossJustify</code>  No Justification of UI elements along the cross axis. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>MinSize</code>  No Minimum space reserved for UI contents. Overridden by FillWidth and FillHeight. <code>none</code> <code>Float2</code><code>Var(Float2)</code><code>None</code> <code>MaxSize</code>  No Maximum space reserved for UI contents. Overridden by FillWidth and FillHeight. <code>none</code> <code>Float2</code><code>Var(Float2)</code><code>None</code> <code>FillWidth</code>  No Whether the layout should occupy the full width. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>FillHeight</code>  No Whether the layout should occupy the full height. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>Disabled</code>  No Whether the layout should be disabled. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>Frame</code>  No Frame to be drawn around the layout. <code>none</code> <code>LayoutFrame</code><code>None</code> <code>EnableHorizontalScrollBar</code>  No Enable the horizontal scroll bar. Creates a ScrollArea if true. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>EnableVerticalScrollBar</code>  No Enable the vertical scroll bar. Creates a ScrollArea if true. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>ScrollBarVisibility</code>  No Visibility of the scroll bars: AlwaysVisible, VisibleWhenNeeded, or AlwaysHidden. Default: AlwaysVisible. <code>none</code> <code>ScrollVisibility</code><code>None</code> <code>ScrollAreaMinWidth</code>  No Minimum width of the scroll area. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <code>ScrollAreaMinHeight</code>  No Minimum height of the scroll area. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <code>ScrollAreaMaxWidth</code>  No Maximum width of the scroll area. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <code>ScrollAreaMaxHeight</code>  No Maximum height of the scroll area. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <code>ScrollAreaAutoShrinkWidth</code>  No Auto-shrink scroll area width to fit contents. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>ScrollAreaAutoShrinkHeight</code>  No Auto-shrink scroll area height to fit contents. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>ScrollAreaEnableScrolling</code>  No Enable scrolling in the scroll area. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <p>This shard creates a Layout class that can be used in other UI shards.</p> <p> </p>"},{"location":"shards/shards/UI/LeftPanel/","title":"UI.LeftPanel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the panel. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Resizable</code>  No Whether the panel can be resized. <code>false</code> <code>Bool</code> <code>DefaultSize</code>  No The initial size of the panel. <code>none</code> <code>Float</code><code>None</code> <code>MinSize</code>  No The minimum allowable size of the panel. <code>none</code> <code>Float</code><code>None</code> <code>MaxSize</code>  No The maximum allowable size of the panel. <code>none</code> <code>Float</code><code>None</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Layout UI elements into the panel.</p>"},{"location":"shards/shards/UI/LeftPanel/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI LEftPanel\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.LeftPanel(\n      Contents:\n      {\"Left Panel\" | UI.Label})\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Link/","title":"UI.Link","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Action shards of the link. <code>Any</code> <code>Output \u27a1\ufe0f</code> Indicates whether the link was clicked during this frame. <code>Bool</code> <code>Label</code>  No Optional label for the link. <code>none</code> <code>String</code><code>None</code> <code>Action</code>  No The shards to execute when the link is clicked. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <p>A clickable link.</p>"},{"location":"shards/shards/UI/Link/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Link\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel(\n        {UI.Link(\n            Label: \"Click here\"\n            Style: {italics: true}\n            Action: Msg(\"Hello\")\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Link\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel(\n      {UI.Link(\"Click here\" Msg(\"Hello\"))})\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/ListBox/","title":"UI.ListBox","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of values. <code>Any</code> <code>Output \u27a1\ufe0f</code> The selected value. <code>Any</code> <code>Index</code>  No The index of the selected item. <code>none</code> <code>Int</code><code>Var(Int)</code><code>None</code> <code>IsSelected</code>  No Predicate that should return selection state of an item, receives the index in the list, should return true/false. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Clicked</code>  No Action to perform if an element of the list is being clicked. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Template</code>  No Custom rendering <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>A list selection.</p>"},{"location":"shards/shards/UI/ListBox/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI List Box\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel(\n        {[1 2 3 4 5 6 7 8 9]\n          UI.ListBox(\n            Index: index\n            Template:\n            {ToString | UI.Label}\n          )\n          ExpectInt &gt;= value\n\n          UI.Horizontal(\n            {\"Selected index: \" | UI.Label\n              index | ToString | UI.Label\n            }\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI List Box\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel({\n\n        Once({\n          -1 &gt;= clicked\n          [1 2 3 4 5 6 7 8 9] = items\n        })\n\n        items\n        UI.ListBox(\n          IsSelected: {\n            = i\n            clicked | If(IsLess(0) {false}\n            {IsLessEqual(i)})\n          }\n          Clicked: {&gt; clicked}\n          Template:\n          {ToString | UI.Label}\n        )\n        ExpectInt &gt;= value\n\n        UI.Horizontal(\n          {\"Selected index: \" | UI.Label\n            clicked | ToString | UI.Label\n          }\n        )\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI List Box\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel (\n        [\"\u03b1 \u0391\" \"\u03c9 \u03a9\"]\n        UI.ListBox(Index: index)\n        ExpectString &gt;= value\n\n        UI.Horizontal(\n          {\"Selected index: \" | UI.Label\n            index | ToString | UI.Label\n          }\n        )\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/MarkdownViewer/","title":"UI.MarkdownViewer","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <p>A markdown viewer.</p>"},{"location":"shards/shards/UI/MarkdownViewer/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Markdown Viewer\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.TopPanel(\n        Contents: {\n          \"# Title\n\n  ## Sub-title\n  **list:**\n  - item 1\n  - item 2\"\n          UI.MarkdownViewer\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Menu/","title":"UI.Menu","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the menu. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the menu is active. <code>Bool</code> <code>Title</code>  No The title of the menu. <code>none</code> <code>String</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Creates a menu button that when clicked will show the given menu. If called from within a menu this will instead create a button for a sub-menu.</p>"},{"location":"shards/shards/UI/Menu/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Menu\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.TopPanel(\n        Contents: {\n          UI.TopPanel(\n            Contents:\n            UI.MenuBar(\n              UI.Menu(\n                Title: \"File\"\n                Contents:\n                UI.Button(\"Exit\")\n              )\n            )\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/MenuBar/","title":"UI.MenuBar","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the menu bar. <code>Any</code> <code>Output \u27a1\ufe0f</code> A boolean value indicating whether the menu bar is active. <code>Bool</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>The menu bar goes well in a <code>UI.TopPanel</code>.</p>"},{"location":"shards/shards/UI/MenuBar/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI MenuBar\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.TopPanel(\n        Contents: {\n          UI.TopPanel(\n            Contents:\n            UI.MenuBar(\n              Contents:\n              UI.Menu(\n                \"Menu\"\n                {\"Some Text\" | UI.Label}\n              )\n            )\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/NextRow/","title":"UI.NextRow","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <p>Moves to the next row in a grid layout.</p>"},{"location":"shards/shards/UI/NextRow/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI Next Row\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel(\n        UI.Grid(\n          Striped: true\n          Contents: {\n            \"Col 1\" | UI.Label\n            \"Col 2\" | UI.Label\n            \"Col 3\" | UI.Label\n            UI.NextRow\n            \"Hello\" | UI.Label\n            \"shards\" | UI.Label\n            \"!\" | UI.Label\n            UI.NextRow\n            \"Lorem ipsum dolor sit amet\" | UI.Label\n            \"consectetur adipiscing elit\" | UI.Label\n            \"sed do eiusmod tempor\" | UI.Label\n          }\n        )\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Overlay/","title":"UI.Overlay","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Items</code>  No A list of UI's to overlay on top of each other in order <code>none</code> <code>[[None Shard [Shard]]]</code> <p>Overlays multiple UI's on top of each other.</p> <p> </p>"},{"location":"shards/shards/UI/PaintCircle/","title":"UI.PaintCircle","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Center</code>  No Center of the circle <code>none</code> <code>Float2</code><code>Var(Float2)</code> <code>Radius</code>  No Radius of the circle <code>none</code> <code>Float</code><code>Var(Float)</code> <code>StrokeWidth</code>  No Width of circle outline <code>none</code> <code>Float</code><code>Var(Float)</code> <code>StrokeColor</code>  No Color of circle outline <code>none</code> <code>Color</code><code>Var(Color)</code> <p>Draw a circle on the canvas</p> <p> </p>"},{"location":"shards/shards/UI/Plot/","title":"UI.Plot","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the plot. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>ViewAspect</code>  No Width / height ratio of the plot region. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <code>DataAspect</code>  No Width / height ratio of the data. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <code>Legend</code>  No Whether to display the legend. <code>none</code> <code>Bool</code><code>None</code> <p>A 2D plot area.</p>"},{"location":"shards/shards/UI/Plot/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PlotBar\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.TopPanel(\n      Contents:\n      UI.Checkbox(\"Horizontal\" horizontal))\n      UI.CentralPanel(\n        Contents: {\n          UI.Plot({\n            [] &gt;= hist\n            ForRange(\n              -40 39\n              {\n                Once({\n                  0.02 | Math.Multiply(3.1415926535) | Math.Sqrt = f\n                })\n                ToFloat | Math.Divide(10.0) | Math.Add(0.05) &gt;= x\n                x | Math.Multiply(x) | Math.Divide(-2.0) | Math.Exp | Math.Divide(f) &gt;= y\n                [x y] | ToFloat2 &gt;&gt; hist\n              }\n            )\n\n            hist | ExpectLike([@f2(0)])\n            UI.PlotBar(\n              Horizontal: horizontal\n              Width: 0.095\n              Color: @color(173 216 230)\n            )\n          })\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PlotPoints\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        32.0 &gt;= n\n        [] &gt;= sin\n        n | Math.Divide(3.1415926535) = divide-factor\n      })\n\n      UI.Plot(\n        Legend: true\n        Contents: {\n          ForRange(\n            From: -32\n            To: 32\n            Action: {\n              ToFloat | Math.Divide(divide-factor) &gt;= x\n              x | Math.Sin &gt;= y\n              [x y] | ToFloat2 &gt;&gt; sin\n            }\n          )\n          sin | ExpectLike([@f2(0)])\n          UI.PlotPoints(\n            Color: @color(200 100 100)\n            Name: \"sin\"\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PlotLine\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel({\n        UI.Plot({\n          [@f2(-1.0) @f2(0.0) @f2(1 0)] | UI.PlotLine\n        })\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/PlotBar/","title":"UI.PlotBar","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of point coordinates. <code>[Float2]</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>[Float2]</code> <code>Color</code>  No Stroke color. <code>none</code> <code>Color</code><code>Var(Color)</code><code>None</code> <code>Width</code>  No Width of a bar. <code>none</code> <code>Float</code> <code>Horizontal</code>  No Display the bars horizontally. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>Name</code>  No Name of this chart, displayed in the plot legend. <code>none</code> <code>String</code><code>None</code> <p>Points represented as vertical or horizontal bars on a plot.</p>"},{"location":"shards/shards/UI/PlotBar/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PlotBar\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.TopPanel(\n      Contents:\n      UI.Checkbox(\"Horizontal\" horizontal))\n      UI.CentralPanel(\n        Contents: {\n          UI.Plot({\n            [] &gt;= hist\n            ForRange(\n              -40 39\n              {\n                Once({\n                  0.02 | Math.Multiply(3.1415926535) | Math.Sqrt = f\n                })\n                ToFloat | Math.Divide(10.0) | Math.Add(0.05) &gt;= x\n                x | Math.Multiply(x) | Math.Divide(-2.0) | Math.Exp | Math.Divide(f) &gt;= y\n                [x y] | ToFloat2 &gt;&gt; hist\n              }\n            )\n\n            hist | ExpectLike([@f2(0)])\n            UI.PlotBar(\n              Horizontal: horizontal\n              Width: 0.095\n              Color: @color(173 216 230)\n            )\n          })\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/PlotLine/","title":"UI.PlotLine","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of point coordinates. <code>[Float2]</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>[Float2]</code> <code>Color</code>  No Stroke color. <code>none</code> <code>Color</code><code>Var(Color)</code><code>None</code> <code>Name</code>  No Name of this chart, displayed in the plot legend. <code>none</code> <code>String</code><code>None</code> <p>Line-connected points on a plot.</p>"},{"location":"shards/shards/UI/PlotLine/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PlotLine\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel(\n        UI.Plot({\n          [@f2(-1) @f2(0) @f2(1)] | UI.PlotLine\n        })\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/PlotPoints/","title":"UI.PlotPoints","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> A sequence of point coordinates. <code>[Float2]</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>[Float2]</code> <code>Name</code>  No Name of this chart, displayed in the plot legend. <code>none</code> <code>String</code><code>None</code> <code>Color</code>  No Stroke color. <code>none</code> <code>Color</code><code>Var(Color)</code><code>None</code> <code>Shape</code>  No Shape of the marker. <code>none</code> <code>MarkerShape</code> <code>Radius</code>  No Radius of the marker. <code>none</code> <code>Float</code> <p>Scattered points on a plot.</p>"},{"location":"shards/shards/UI/PlotPoints/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PlotPoints\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      Once({\n        32.0 &gt;= n\n        [] &gt;= sin\n        n | Math.Divide(3.1415926535) = divide-factor\n      })\n\n      UI.Plot(\n        Legend: true\n        Contents: {\n          ForRange(\n            From: -32\n            To: 32\n            Action: {\n              ToFloat | Math.Divide(divide-factor) &gt;= x\n              x | Math.Sin &gt;= y\n              [x y] | ToFloat2 &gt;&gt; sin\n            }\n          )\n          sin | ExpectLike([@f2(0)])\n          UI.PlotPoints(\n            Color: @color(200 100 100)\n            Name: \"sin\"\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/PopupWrapper/","title":"UI.PopupWrapper","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Widget shard(s) of the popup. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>MinWidth</code>  No The minimum width of the popup that should appear below or above the button. By default, it is always at least as wide as the button. <code>none</code> <code>Float</code><code>None</code> <code>AboveOrBelow</code>  No Whether the location of the popup should be above or below the button. <code>none</code> <code>PopupLocation</code> <code>ID</code>  No An optional ID value to make the popup unique if the label text collides. <code>none</code> <code>String</code><code>Var(String)</code><code>None</code> <code>Widget</code>  No The shard(s) to execute that should contain a widget that supports having this popup generated for it upon being clicked. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Contents</code>  No The shards to execute and render inside the popup ui when the button is pressed. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Wraps a button with a popup that can act as a drop-down menu or suggestion menu.</p>"},{"location":"shards/shards/UI/PopupWrapper/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PopupWrapper\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel({\n        Once({\n          asset/r0 | GFX.Texture = image\n        })\n        UI.PopupWrapper(\n          MinWidth: 200.0\n          Widget: {\n            image | UI.ImageButton(\n              Scale: @f2(0.1)\n              Action: {\n                \"Message sent!\" | Log\n              }\n            )\n          }\n          Contents: {\n            UI.Button(\n              Label: \"Receive message\"\n              Action: {\n                \"Message received!\" | Log\n              }\n            )\n          }\n        )\n        UI.PopupWrapper(\n          MinWidth: 300.0 ; Changes the minimum width of the popup to be 200.0 instead of the width of the button\n          AboveOrBelow: PopupLocation::Above\n          Widget: {\n            UI.Button(\n              Label: \"Send message\"\n              Action: {\n                \"Message sent!\" | Log\n              }\n            )\n          }\n          Contents: {\n            image | UI.ImageButton(\n              Scale: @f2(0.1)\n              Action: {\n                \"Message received!\" | Log\n              }\n            )\n            UI.Button(\n              Label: \"Receive message\"\n              Action: {\n                \"Message received!\" | Log\n              }\n            )\n          }\n        )\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"UI PlotPopup Wrapper\"\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel({\n        UI.PopupWrapper(\n          Widget: {\n            UI.Button(\n              Label: \"Send message\"\n              Action: {\n                \"Message sent!\" | Log\n              }\n            )\n          }\n          Contents: {\n            UI.Button(\n              Label: \"Receive message\"\n              Action: {\n                \"Message received!\" | Log\n              }\n            )\n          }\n        )\n        UI.PopupWrapper(\n          Widget: {\n            UI.Button(\n              Label: \"Send message\"\n              Action: {\n                \"Message sent!\" | Log\n              }\n            )\n          }\n          Contents: {\n            UI.Button(\n              Label: \"Receive message\"\n              Action: {\n                \"Message received!\" | Log\n              }\n            )\n          }\n        )\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/ProgressBar/","title":"UI.ProgressBar","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The progress amount ranging from 0.0 (no progress) to 1.0 (completed). <code>Float</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Float</code> <code>Overlay</code>  No The text displayed inside the progress bar. <code>none</code> <code>String</code><code>Var(String)</code><code>None</code> <code>Width</code>  No The desired width of the progress bar. Will use all horizontal space if not set. <code>none</code> <code>Float</code><code>Var(Float)</code> <p>A progress bar with an optional overlay text.</p>"},{"location":"shards/shards/UI/ProgressBar/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel({\n        Once({\n          0.0 &gt;= progress\n        })\n        progress | UI.ProgressBar(Overlay: \"Progress\")\n        Math.Add(0.01) &gt; progress\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Property/","title":"UI.Property","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>None</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Float4</code><code>Float2</code><code>Float</code><code>Bool</code> <code>Property</code>  No The property to retrieve from the UI context <code>none</code> <code>UIProperty</code> <p>Retrieves values from the current state of the UI.</p>"},{"location":"shards/shards/UI/Property/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel(\n        Contents: {\n          UI.Property(UIProperty::RemainingSpace)\n          Once({\n            Log\n          } 2.0)\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/RadioButton/","title":"UI.RadioButton","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Indicates whether the radio button was clicked during this frame. <code>Bool</code> <code>Label</code>  No The text label of this radio button. <code>none</code> <code>String</code><code>None</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>Any</code><code>Var(Any)</code> <code>Value</code>  No The value to compare with. <code>none</code> <code>Any</code> <code>Style</code>  No The text style. <code>none</code> <code>{Any}</code><code>Var({Any})</code> <p>A radio button for selecting a value amongst multiple choices.</p>"},{"location":"shards/shards/UI/RadioButton/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel({\n        Once({\n          2 &gt;= choice\n        })\n        UI.RadioButton(Label: \"Choice 1\" Style: {} Variable: choice Value: 1)\n        UI.RadioButton(\n          Label: \"Choice 2\"\n          Style: {underline: true}\n          Variable: choice\n          Value: 2\n        )\n        UI.RadioButton(Label: \"Choice 3\" Style: {} Variable: choice Value: 3)\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel({\n        Once({\n          2 &gt;= choice\n        })\n        UI.RadioButton(\n          Label: \"Choice 1\"\n          Variable: choice\n          Value: 1\n        )\n        UI.RadioButton(\"Choice 2\" choice 2)\n        UI.RadioButton(\"Choice 3\" choice 3)\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Render/","title":"UI.Render","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>[Object]</code><code>Object</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>[Object]</code><code>Object</code> <code>Queue</code>  No The draw queue. <code>none</code> <code>Var(GFX.DrawQueue)</code> <p>Render given UI</p> <p> </p>"},{"location":"shards/shards/UI/RenderTarget/","title":"UI.RenderTarget","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The image to display. <code>GFX.Texture2D</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>GFX.Texture2D</code> <code>Scale</code>  No Scaling to apply to the source texture. <code>@f2(1 1)</code> <code>Float2</code><code>Var(Float2)</code> <p>Display the contents of a render target. Consumes input on the region.</p> <p> </p>"},{"location":"shards/shards/UI/Reset/","title":"UI.Reset","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <p>Forgets UI scroll, position, size changes, etc.</p>"},{"location":"shards/shards/UI/Reset/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.TopPanel(\n    Contents:\n    UI.MenuBar(\n      UI.Menu(\n        Title: \"File\"\n        Contents:\n        UI.Tooltip(\n          Contents:\n          UI.Button(\"Reset UI memory\" UI.Reset)\n          OnHover:\n          {\n            \"Forget scroll, positions, sizes, etc.\" | UI.Label\n          }\n        )\n      )\n    )\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/RestoreState/","title":"UI.RestoreState","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The UI state to restore to represented as a byte array. <code>Bytes</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input passed through unchanged. <code>Bytes</code> <p>This shard restores the UI to a previously saved state (provided as input as a byte array).</p> <p> </p>"},{"location":"shards/shards/UI/RightPanel/","title":"UI.RightPanel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the panel. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Resizable</code>  No Whether the panel can be resized. <code>false</code> <code>Bool</code> <code>DefaultSize</code>  No The initial size of the panel. <code>none</code> <code>Float</code><code>None</code> <code>MinSize</code>  No The minimum allowable size of the panel. <code>none</code> <code>Float</code><code>None</code> <code>MaxSize</code>  No The maximum allowable size of the panel. <code>none</code> <code>Float</code><code>None</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Layout UI elements into the panel.</p>"},{"location":"shards/shards/UI/RightPanel/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.RightPanel(\n        Contents:\n        {\n          \"Right Panel\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/SaveState/","title":"UI.SaveState","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> Returns the current state of the UI as a byte array. <code>Bytes</code> <p>This shard saves the current state of the UI as a byte array. It saves UI information such as the position of windows, the state of checkboxes, the state of sliders, etc.</p> <p> </p>"},{"location":"shards/shards/UI/Scope/","title":"UI.Scope","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the scope. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Creates a scoped child UI.</p>"},{"location":"shards/shards/UI/Scope/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 700\n    Height: 400\n    Contents: {\n      UI.CentralPanel(\n        UI.Scope(\n        Contents:\n        {\"Hello\" | UI.Label})\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/ScrollArea/","title":"UI.ScrollArea","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the scroll area. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Horizontal</code>  No Enable horizontal scrolling. <code>false</code> <code>Bool</code> <code>Vertical</code>  No Enable vertical scrolling. <code>true</code> <code>Bool</code> <code>AlwaysShow</code>  No Always show the enabled scroll bars even if not needed. <code>false</code> <code>Bool</code> <p>Add vertical and/or horizontal scrolling to a contained UI.</p>"},{"location":"shards/shards/UI/ScrollArea/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.CentralPanel({\n        UI.ScrollArea(\n          Horizontal: true\n          AlwaysShow: true\n          Contents: {\n            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\" | UI.Label(Wrap: false)\n          }\n        )\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Selectable/","title":"UI.Selectable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bool</code> <code>Contents</code>  No The UI contents to wrap, contain, and detect for selection. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>IsSelected</code>  No Callback function for checking if the contents are currently selected. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Clicked</code>  No Callback function for the contents of this shard is clicked. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>DoubleClicked</code>  No Callback function for the contents of this shard is clicked. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>ContextMenu</code>  No Callback function for the right-click context menu. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>DragData</code>  No Enables dragging and sets the data for drag operations <code>none</code> <code>Any</code> <code>ID</code>  No An optional ID value in case of ID conflicts. <code>none</code> <code>String</code><code>Var(String)</code><code>None</code> <p>A wrapper that detects selection over the provided contents.</p>"},{"location":"shards/shards/UI/Selectable/#examples","title":"Examples","text":"Code <pre><code>@template(is-selected [idx] {\n  currently-selected | Is(idx)\n})\n\n@template(select [idx] {\n  idx &gt; currently-selected | Log\n})\n\n@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      Once({\n        1 &gt;= currently-selected\n        \"\" &gt;= currently-selected-str\n      })\n      UI.CentralPanel(\n        Contents: {\n          UI.Selectable(\n            Contents: {UI.Button(\"Select Button 1\" {\"Select Button 1 Clicked\" | Log})}\n            IsSelected: {@is-selected(1)}\n            Clicked: {@select(1)}\n          )\n          UI.Selectable(\n            Contents: {\n              UI.Button(\"Select Button 2\" {\"Select Button 2 Clicked\" | Log})\n              \"Another part of the same selectable as Select Button 2\" | UI.Label(Wrap: true)\n            }\n            IsSelected: {@is-selected(2)}\n            Clicked: {@select(2)}\n          )\n\n          currently-selected | ToString &gt; currently-selected-str\n          [\n            \"Currently selected: \"\n            currently-selected-str\n          ] | String.Join | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Separator/","title":"UI.Separator","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <p>A visual separator. A horizontal or vertical line (depending on the layout).</p>"},{"location":"shards/shards/UI/Separator/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.CentralPanel({\n        \"Hello\" | UI.Label\n        UI.Separator\n        \"World\" | UI.Label\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/SetClipboard/","title":"UI.SetClipboard","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The string to set as the clipboard contents. <code>String</code> <code>Output \u27a1\ufe0f</code> Outputs the input value, passed through unchanged. <code>String</code> <p>This shard sets the input string to the system clipboard.</p> <p> </p>"},{"location":"shards/shards/UI/Settings/","title":"UI.Settings","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <p>Show settings ui</p> <p> </p>"},{"location":"shards/shards/UI/Shards/","title":"UI.Shards","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> No input required, the AST is manipulated in place. <code>None</code> <code>Output \u27a1\ufe0f</code> True if the AST has been modified, false otherwise. <code>Bool</code> <code>AST</code>  No The Shards AST object to edit in real time, this shard will manipulate and edit this variable in place. <code>none</code> <code>Var(Object)</code> <p>A Shards program AST visual editor.</p> <p> </p>"},{"location":"shards/shards/UI/Sized/","title":"UI.Sized","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the layout. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Width</code>  No <code>0</code> <code>Float</code> <code>Height</code>  No <code>0</code> <code>Float</code> <code>FillWidth</code>  No <code>false</code> <code>Bool</code> <code>FillHeight</code>  No <code>false</code> <code>Bool</code> <p>Layout the contents sizedly.</p> <p> </p>"},{"location":"shards/shards/UI/Space/","title":"UI.Space","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Amount</code>  No The amount of space to insert. <code>none</code> <code>Float</code><code>Var(Float)</code> <p>Inserts an empty space before the next widget. The direction will depend on the layout.</p> <p> </p>"},{"location":"shards/shards/UI/Spinner/","title":"UI.Spinner","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Size</code>  No Overrides the size of the spinner. This sets both the height and width, as the spinner is always square. <code>none</code> <code>Float</code><code>Var(Float)</code> <p>A spinner widget used to indicate loading.</p>"},{"location":"shards/shards/UI/Spinner/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.CentralPanel(\n      UI.Spinner)\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Style/","title":"UI.Style","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>InheritDefault</code>  No Inherit default style instead of current style. <code>false</code> <code>Bool</code> <code>OverrideTextStyle</code>  No If set this will change the default TextStyle for all widgets. <code>none</code> <code>None</code><code>TextStyle</code><code>Var(TextStyle)</code><code>String</code><code>Var(String)</code> <code>FontId</code>  No If set this will change the font family and size for all widgets. <code>none</code> <code>None</code><code>{Any}</code><code>Var({Any})</code> <code>TextStyles</code>  No The FontFamily and size you want to use for a specific TextStyle. <code>none</code> <code>None</code><code>{Any}</code><code>Var({Any})</code> <code>DragValueTextStyle</code>  No The style to use for DragValue text. <code>none</code> <code>None</code><code>TextStyle</code><code>Var(TextStyle)</code><code>String</code><code>Var(String)</code> <code>Wrap</code>  No If set, labels, buttons, etc will use this to determine wrap behavior of the text at the right edge of the Ui they are in. <code>none</code> <code>None</code><code>Bool</code><code>TextWrap</code> <code>AnimationTime</code>  No How many seconds a typical animation should last. <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>ExplanationTooltips</code>  No Show tooltips explaining DragValues etc when hovered. <code>none</code> <code>None</code><code>Bool</code> <code>ResizeGrabRadiusSide</code>  No Mouse must be this close to the side of a window to resize <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>ResizeGrabRadiusCorner</code>  No Mouse must be this close to the corner of a window to resize <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>ShowTooltipsOnlyWhenStill</code>  No If <code>false</code>, tooltips will show up anytime you hover anything, even is mouse is still moving <code>none</code> <code>None</code><code>Bool</code> <code>ItemSpacing</code>  No Horizontal and vertical spacing between widgets. <code>none</code> <code>None</code><code>Float2</code><code>Var(Float2)</code> <code>WindowMargin</code>  No Horizontal and vertical margins within a window frame. <code>none</code> <code>None</code><code>Float4</code><code>Var(Float4)</code> <code>ButtonPadding</code>  No Button size is text size plus this on each side <code>none</code> <code>None</code><code>Float2</code><code>Var(Float2)</code> <code>MenuMargin</code>  No Horizontal and vertical margins within a menu frame. <code>none</code> <code>None</code><code>Float4</code><code>Var(Float4)</code> <code>Indent</code>  No Indent collapsing regions etc by this much. <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>InteractSize</code>  No Minimum size of a DragValue, color picker button, and other small widgets. interact_size.y is the default height of button, slider, etc. Anything clickable should be (at least) this size. <code>none</code> <code>None</code><code>Float2</code><code>Var(Float2)</code> <code>SliderWidth</code>  No Default width of a Slider. <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>ComboWidth</code>  No Default (minimum) width of a ComboBox. <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>TextEditWidth</code>  No Default width of a TextEdit. <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>IconWidth</code>  No Checkboxes, radio button and collapsing headers have an icon at the start. This is the width/height of the outer part of this icon (e.g. the BOX of the checkbox). <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>IconWidthInner</code>  No Checkboxes, radio button and collapsing headers have an icon at the start. This is the width/height of the inner part of this icon (e.g. the check of the checkbox). <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>IconSpacing</code>  No Checkboxes, radio button and collapsing headers have an icon at the start. This is the spacing between the icon and the text <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>DefaultAreaSize</code>  No The size used for the [<code>Ui::max_rect</code>] the first frame. Text will wrap at this width, and images that expand to fill the available space will expand to this size. <code>none</code> <code>None</code><code>Float2</code><code>Var(Float2)</code> <code>TooltipWidth</code>  No Width of a tooltip (on_hover_ui, on_hover_text etc). <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>IndentEndsWithHorizontalLine</code>  No End indented regions with a horizontal line <code>none</code> <code>None</code><code>Bool</code> <code>ComboHeight</code>  No Height of a combo-box before showing scroll bars. <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>ScrollBarFloating</code>  No Use floating scroll bar. <code>none</code> <code>None</code><code>Bool</code><code>Var(Bool)</code> <code>ScrollBarWidth</code>  No Width of a scroll bar. <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>ScrollBarFloatingWidth</code>  No Width of a floating scroll bar (not hovering). <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>ScrollBarFloatingAllocatedWidth</code>  No Allocated width of a floating scroll bar (not hovering). <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>ScrollHandleMinLength</code>  No Make sure the scroll handle is at least this big <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>ScrollBarInnerMargin</code>  No Margin between contents and scroll bar. <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>ScrollBarOuterMargin</code>  No Margin between scroll bar and the outer container (e.g. right of a vertical scroll bar). <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>ScrollBarDormantOpacity</code>  No Opacity of the scroll bar when dormant. <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>DarkMode</code>  No If true, the visuals are overall dark with light text. If false, the visuals are overall light with dark text. <code>none</code> <code>None</code><code>Bool</code><code>Var(Bool)</code> <code>OverrideTextColor</code>  No Override default text color for all text. <code>none</code> <code>None</code><code>Color</code><code>Var(Color)</code> <code>Selection</code>  No <code>none</code> <code>None</code><code>{Any}</code><code>Var({Any})</code> <code>HyperlinkColor</code>  No The color used for Hyperlink <code>none</code> <code>None</code><code>Color</code><code>Var(Color)</code> <code>FaintBgColor</code>  No Something just barely different from the background color. Used for Grid::striped. <code>none</code> <code>None</code><code>Color</code><code>Var(Color)</code> <code>ExtremeBgColor</code>  No Very dark or light color (for corresponding theme). Used as the background of text edits, scroll bars and others things that needs to look different from other interactive stuff. <code>none</code> <code>None</code><code>Color</code><code>Var(Color)</code> <code>CodeBgColor</code>  No Background color behind code-styled monospaced labels. <code>none</code> <code>None</code><code>Color</code><code>Var(Color)</code> <code>WarnFgColor</code>  No A good color for warning text (e.g. orange). <code>none</code> <code>None</code><code>Color</code><code>Var(Color)</code> <code>ErrorFgColor</code>  No A good color for error text (e.g. red). <code>none</code> <code>None</code><code>Color</code><code>Var(Color)</code> <code>WindowRounding</code>  No Window corner rounding. <code>none</code> <code>None</code><code>Float4</code><code>Var(Float4)</code> <code>WindowShadow</code>  No Window shadow size. <code>none</code> <code>None</code><code>{Any}</code><code>Var({Any})</code> <code>WindowFill</code>  No Window background color. <code>none</code> <code>None</code><code>Color</code><code>Var(Color)</code> <code>WindowStroke</code>  No Window stroke (border) color and thickness. <code>none</code> <code>None</code><code>{Any}</code><code>Var({Any})</code> <code>MenuRounding</code>  No Menu corner rounding. <code>none</code> <code>None</code><code>Float4</code><code>Var(Float4)</code> <code>PanelFill</code>  No Panel background color. <code>none</code> <code>None</code><code>Color</code><code>Var(Color)</code> <code>PopupShadow</code>  No Popup shadow size. <code>none</code> <code>None</code><code>{Any}</code><code>Var({Any})</code> <code>ResizeCornerSize</code>  No Corner rounding for resize handle rects. <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>TextCursorWidth</code>  No Width of the line cursor when hovering over InputText etc. <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>TextCursorPreview</code>  No Show where the text cursor would be if you clicked. <code>none</code> <code>None</code><code>Bool</code><code>Var(Bool)</code> <code>ClipRectMargin</code>  No Allow child widgets to be just on the border and still have a stroke with some thickness <code>none</code> <code>None</code><code>Float</code><code>Var(Float)</code> <code>ButtonFrame</code>  No Show a background behind buttons. <code>none</code> <code>None</code><code>Bool</code><code>Var(Bool)</code> <code>CollapsingHeaderFrame</code>  No Show a background behind collapsing headers. <code>none</code> <code>None</code><code>Bool</code><code>Var(Bool)</code> <code>IndentHasLeftVLine</code>  No Draw a vertical lien left of indented region, in e.g. CollapsingHeader. <code>none</code> <code>None</code><code>Bool</code><code>Var(Bool)</code> <code>Striped</code>  No Whether or not Grids and Tables should be striped by default (have alternating rows differently colored). <code>none</code> <code>None</code><code>Bool</code><code>Var(Bool)</code> <code>SliderTrailingFill</code>  No Show trailing color behind the circle of a Slider. Default is OFF. Enabling this will affect ALL sliders, and can be enabled/disabled per slider with Slider::trailing_fill. <code>none</code> <code>None</code><code>Bool</code><code>Var(Bool)</code> <p>Apply style changes to the current UI scope.</p>"},{"location":"shards/shards/UI/Style/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.CentralPanel({\n        Once({\n          64 &gt;= hue\n          0 &gt;= r &gt;= g\n          @color(0 0 0 0) &gt;= color\n          16.0 &gt;= size\n        })\n\n        255 | Math.Subtract(hue) | Math.Multiply(2) | Min(255) &gt; r\n        hue | Math.Multiply(2) | Min(255) &gt; g\n        [r g 0 255] | ToColor &gt; color\n\n        UI.Scope({\n          UI.Style(\n            OverrideTextStyle: \"MyStyle\"\n            TextStyles: {MyStyle: {Size: size\n                                   Family: FontFamily::Monospace}}\n            OverrideTextColor: color\n          )\n          UI.IntSlider(\n            Variable: hue\n            Min: 0 Max: 255\n          )\n          UI.FloatSlider(\n            Variable: size\n            Min: 8.0 Max: 96.0\n          )\n          \"Hello Shards!\" | UI.Label\n        })\n\n        \"This text is not affected\" | UI.Label\n      })\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.CentralPanel(\n        Contents: {\n          UI.Style(\n            OverrideTextStyle: \"MyStyle\"\n            TextStyles: {MyStyle: {Size: 36.0\n                                   Family: FontFamily::Monospace}}\n          )\n          \"Hello Shards!\" | UI.Label\n\n          UI.Style(TextStyles: {MyStyle: {Size: 16.0 Family: FontFamily::Monospace}})\n          \"Hello Shards!\" | UI.Label\n\n          UI.Style(TextStyles: {MyStyle: {Size: 20.0 Family: FontFamily::Proportional}})\n          \"Hello Shards!\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/SubArea/","title":"UI.SubArea","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Offset</code>  No Relative offset. (X/Y) <code>none</code> <code>Float2</code><code>Var(Float2)</code> <code>Anchor</code>  No The anchor for the inner UI, relative to the available space <code>none</code> <code>Anchor</code><code>Var(Anchor)</code> <code>Pivot</code>  No The pivot for the inner UI <code>none</code> <code>Anchor</code><code>Var(Anchor)</code> <p>Places UI element at a specific position.</p> <p> </p>"},{"location":"shards/shards/UI/Tab/","title":"UI.Tab","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the tab. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Title</code>  No The title of the tab. <code>none</code> <code>String</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Experimental/unstable</p> <p>This API is experimental and might produce unexpected results or crash.</p> <p>Represents a tab inside a DockArea.</p>"},{"location":"shards/shards/UI/Tab/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.DockArea(\n        Contents: {\n          UI.Tab(\n            Title: \"Tab 1\"\n            Contents: {\n              \"Tab 1 contents\" | UI.Label\n            }\n          )\n          UI.Tab(\n            Title: \"Tab 2\"\n            Contents: {\n              \"Tab 2 contents\" | UI.Label\n            }\n          )\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Table/","title":"UI.Table","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Columns and Rows shards of the table. <code>[Any]</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>[Any]</code> <code>Builder</code>  No Sequence of shards to build each column, repeated for each row. <code>[]</code> <code>[None Shard [Shard]]</code> <code>Columns</code>  No Configuration of the columns. <code>none</code> <code>[{Any}]</code><code>None</code> <code>Striped</code>  No Whether to alternate a subtle background color to every other row. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>Resizable</code>  No Whether columns can be resized within their specified range. <code>none</code> <code>Bool</code><code>Var(Bool)</code><code>None</code> <code>RowIndex</code>  No Variable to hold the row index, to be used within Rows. <code>Var: Table.RowIndex</code> <code>Int</code><code>Var(Int)</code><code>None</code> <p>Table layout.</p>"},{"location":"shards/shards/UI/Table/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      [\n        @i2(0) @i2(0 1) @i2(1) @i2(1 0)]\n      UI.Table(\n        Columns: [\n          {Header: \"A\"}\n          {Header: \"B\"}\n          {Header: \"A xor B\"}]\n        Builder: [\n          {Take(0) | ToString | UI.Label}\n          {Take(1) | ToString | UI.Label}\n          {\n            {Take(0) &gt;= a}\n            {Take(1) &gt;= b}\n            a | Math.Xor(b) | ToString | UI.Label\n          }]\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      [\n        {Name: \"Doe\" Surname: \"John\"}\n        {Name: \"Dough\" Surname: \"Jane\"}\n        {Name: \"Smith\" Surname: \"Dick\"}]\n      UI.Table(\n        Resizable: true\n        Striped: true\n        RowIndex: index\n        Columns: [\n          {Initial: 20.0}\n          {\n            Header: \"Surname\"\n            Initial: 100.0\n            AtLeast: 60.0\n            AtMost: 160.0\n          }\n          {\n            Header: {\n              \"Name\" | UI.Label(Style: {text_style: \"Heading\"})\n              UI.Button(\"Up\" Msg(\"Clicked Up\") Style: {text_style: \"Small\"})\n              UI.Button(\"Down\" Msg(\"Clicked Down\") Style: {text_style: \"Small\"})\n            }\n            Initial: 120.0\n            AtLeast: 100.0\n            AtMost: 160.0\n          }]\n        Builder: [\n          {index | ToString | UI.Label}\n          {Take(\"Surname\") | UI.Label}\n          {Take(\"Name\") | UI.Label}]\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      [\n        {Name: \"Doe\" Surname: \"John\"}\n        {Name: \"Dough\" Surname: \"Jane\"}\n        {Name: \"Smith\" Surname: \"Dick\"}]\n      UI.Table(\n        Resizable: true\n        Striped: true\n        RowIndex: index\n        Columns: [\n          {Initial: 20.0}\n          {\n            Header: \"Surname\"\n            Initial: 100.0\n            AtLeast: 60.0\n            AtMost: 160.0\n          }\n          {\n            Header: \"Name\"\n            Initial: 80.0\n            AtLeast: 60.0\n            AtMost: 160.0\n          }]\n        Builder: [\n          {index | ToString | UI.Label}\n          {Take(\"Surname\") | UI.Label}\n          {Take(\"Name\") | UI.Label}]\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/TextField/","title":"UI.TextField","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>None</code> <code>Output \u27a1\ufe0f</code> The value produced when changed. <code>Any</code> <code>Variable</code>  No The variable that holds the input value. <code>none</code> <code>String</code><code>Var(String)</code> <code>JustifyWidth</code>  No Whether to take up all available space for its desired width. Takes priority over Desired Width. <code>false</code> <code>Bool</code> <code>DesiredWidth</code>  No The desired width of the text field. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <code>ClipText</code>  No Whether to clip the text if it exceeds the width of the text field. Or expand the text field to fit the text. <code>true</code> <code>Bool</code> <code>Multiline</code>  No Support multiple lines. <code>false</code> <code>Bool</code> <code>Password</code>  No Support multiple lines. <code>false</code> <code>Bool</code> <code>Hint</code>  No Hint to show in the text field. <code>none</code> <code>String</code><code>Var(String)</code><code>None</code> <p>A widget where text can be entered.</p>"},{"location":"shards/shards/UI/TextField/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      ; read-only\n      UI.TextField(\"Lorem ipsum dolor sit amet\")\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      ; exposing a new variable\n      UI.TextField(text)\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      Once({\n        \"Lorem ipsum dolor sit amet\" &gt;= text\n      })\n      UI.TextField(\n        Variable: text\n        Multiline: false\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Tooltip/","title":"UI.Tooltip","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to both the Contents and OnHover shards of the tooltip. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>OnHover</code>  No The tooltip contents. <code>none</code> <code>String</code><code>Var(String)</code><code>Shard</code><code>[Shard]</code><code>None</code> <p>Display a tooltip when the Contents is hovered over.</p>"},{"location":"shards/shards/UI/Tooltip/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Tooltip(\n        OnHover: {\n          \"Tooltip\" | UI.Label\n        }\n        Contents: {\n          \"Lorem ipsum\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/TopPanel/","title":"UI.TopPanel","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the panel. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Resizable</code>  No Whether the panel can be resized. <code>false</code> <code>Bool</code> <code>DefaultSize</code>  No The initial size of the panel. <code>none</code> <code>Float</code><code>None</code> <code>MinSize</code>  No The minimum allowable size of the panel. <code>none</code> <code>Float</code><code>None</code> <code>MaxSize</code>  No The maximum allowable size of the panel. <code>none</code> <code>Float</code><code>None</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <p>Layout UI elements into the panel.</p>"},{"location":"shards/shards/UI/TopPanel/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.TopPanel(\n        Contents: {\n          \"Top Panel\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Variable/","title":"UI.Variable","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value is ignored. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input passed through unchanged. <code>Any</code> <code>Variable</code>  No The variable that holds the value. <code>none</code> <code>Var(Any)</code> <code>Labeled</code>  No If the name of the variable should be visible as a label. <code>none</code> <code>Bool</code> <p>This shard creates a UI element that displays and allows interaction with the variable specified in the Variable parameter.</p>"},{"location":"shards/shards/UI/Variable/#details","title":"Details","text":"<p>Any changes to the value of the variable made through the UI element created by this shard will be reflected on the parent wire. Vice versa, any changes made to the variable on the parent wire will be reflected on the UI element created by this shard.</p>"},{"location":"shards/shards/UI/Variable/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.CentralPanel(\n      UI.Variable(my-var))\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/Vertical/","title":"UI.Vertical","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the layout. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Centered</code>  No Center the contents horizontally. <code>false</code> <code>Bool</code> <p>Layout the contents vertically.</p>"},{"location":"shards/shards/UI/Vertical/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Vertical(\n        Centered: true\n        Contents: {\n          \"Hello\" | UI.Label\n          UI.Separator\n          \"World\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Position: @f2(0 0)\n    Anchor: Anchor::Center\n    Width: 200\n    Height: 200\n    Flags: [WindowFlags::NoResize]\n    Contents: {\n      UI.Vertical(\n        Contents: {\n          \"Hello\" | UI.Label\n          UI.Separator\n          \"World\" | UI.Label\n        }\n      )\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UI/WidgetStyle/","title":"UI.WidgetStyle","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Any</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Any</code> <code>NonInteractive</code>  No The style of a widget that you cannot interact with. <code>none</code> <code>None</code><code>{Any}</code><code>Var({Any})</code> <code>Inactive</code>  No The style of an interactive widget, such as a button, at rest. <code>none</code> <code>None</code><code>{Any}</code><code>Var({Any})</code> <code>Hovered</code>  No The style of an interactive widget while you hover it, or when it is highlighted. <code>none</code> <code>None</code><code>{Any}</code><code>Var({Any})</code> <code>Active</code>  No The style of an interactive widget as you are clicking or dragging it. <code>none</code> <code>None</code><code>{Any}</code><code>Var({Any})</code> <code>Open</code>  No The style of a button that has an open menu beneath it (e.g. a combo-box) <code>none</code> <code>None</code><code>{Any}</code><code>Var({Any})</code> <p>Apply style changes to the current UI scope.</p> <p> </p>"},{"location":"shards/shards/UI/Window/","title":"UI.Window","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The value that will be passed to the Contents shards of the rendered window. <code>Any</code> <code>Output \u27a1\ufe0f</code> The output of this shard will be its input. <code>Any</code> <code>Title</code>  No The window title displayed on the title bar. <code>none</code> <code>String</code><code>Var(String)</code><code>None</code> <code>Contents</code>  No The UI contents. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Position</code>  No Absolute position; or when anchor is set, relative offset. <code>none</code> <code>Float2</code><code>Var(Float2)</code> <code>Anchor</code>  No Corner or center of the screen. <code>none</code> <code>Anchor</code> <code>MinWidth</code>  No The minimum width of the window. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <code>MinHeight</code>  No The minimum height of the window. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <code>MaxWidth</code>  No The maximum width of the window. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <code>MaxHeight</code>  No The maximum height of the window. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <code>FixedWidth</code>  No The fixed size of the window. overrides all other min/max sizes. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <code>FixedHeight</code>  No The fixed size of the window. overrides all other min/max sizes. <code>none</code> <code>Float</code><code>Var(Float)</code><code>None</code> <code>Closed</code>  No When provided with a callback, this window will have a close button and call this when pressed. <code>none</code> <code>None</code><code>Shard</code><code>[Shard]</code> <code>Flags</code>  No Window flags. <code>none</code> <code>WindowFlags</code><code>[WindowFlags]</code> <code>ID</code>  No An optional ID value to make the window unique if the title name collides. <code>none</code> <code>String</code><code>Var(String)</code><code>None</code> <code>Transparency</code>  No If not None, it sets the window's transparency level based on the alpha value. <code>false</code> <code>Float</code><code>None</code> <p>Creates a floating window which can be dragged, closed, collapsed, and resized.</p>"},{"location":"shards/shards/UI/Window/#examples","title":"Examples","text":"Code <pre><code>@wire(ui-wire {\n  UI.Window(\n    Title: \"Greetings\"\n    Flags: WindowFlags::NoCollapse\n    Contents: {\n      \"Hello shards!\" | UI.Label\n    }\n  )\n} Looped: true)\n\n{ui-behavior: ui-wire}\n</code></pre> <p><pre><code>\n</code></pre> </p> <p> </p>"},{"location":"shards/shards/UUID/Convert/","title":"UUID.Convert","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Bytes</code><code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Int16</code> <p>Outputs a UUID (Universally Unique Identifier) as Int16.</p> <p> </p>"},{"location":"shards/shards/UUID/ToBytes/","title":"UUID.ToBytes","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int16</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>Bytes</code> <p>Reads an UUID and formats it into bytes.</p> <p> </p>"},{"location":"shards/shards/UUID/ToString/","title":"UUID.ToString","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>Int16</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <code>Hyphenated</code>  No Whether to use hyphens in the output. <code>false</code> <code>Bool</code> <p>Reads an UUID and formats it into a readable string.</p> <p> </p>"},{"location":"shards/shards/Yaml/FromJson/","title":"Yaml.FromJson","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <p>A shard that converts JSON to YAML.</p> <p> </p>"},{"location":"shards/shards/Yaml/ToJson/","title":"Yaml.ToJson","text":"Name Mandatory Description Default Type <code>\u2b05\ufe0f Input</code> The input of the shard, if any <code>String</code> <code>Output \u27a1\ufe0f</code> The resulting output of the shard <code>String</code> <p>A shard that converts YAML to JSON.</p> <p> </p>"}]}