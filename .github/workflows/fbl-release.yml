name: Manual Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'fbl-*'

jobs:
  prebuild-sho:
    outputs:
      ENABLE_WIN64_RELEASE: ${{ steps.import-config.outputs.ENABLE_WIN64_RELEASE }}
      ENABLE_MACOSX_ARM64_RELEASE: ${{ steps.import-config.outputs.ENABLE_MACOSX_ARM64_RELEASE }}
      ENABLE_MACOSX_X86_RELEASE: ${{ steps.import-config.outputs.ENABLE_MACOSX_X86_RELEASE }}
      ENABLE_IOS_RELEASE: ${{ steps.import-config.outputs.ENABLE_IOS_RELEASE }}
      ENABLE_WASM_RELEASE: ${{ steps.import-config.outputs.ENABLE_WASM_RELEASE }}
      ENABLE_ANDROID_RELEASE: ${{ steps.import-config.outputs.ENABLE_ANDROID_RELEASE }}
    runs-on: [self-hosted, macOS, ARM64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches

      - name: Import config
        id: import-config
        shell: bash
        run: |
          cat .config >> "$GITHUB_OUTPUT"

      - name: Check repository
        shell: bash
        run: |
          if [[ -f build_sho/start.sho ]]; then
            echo "Using prebuilt scripts from repository"
            echo "PREBUILD_SHO_EARLY_OUT=1" >> $GITHUB_ENV
          fi

      - uses: "./.github/actions/checkout"
        if: ${{ env.PREBUILD_SHO_EARLY_OUT != '1' }}
        with:
          github-token: ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }}
          fetch-sho-artifact: false

      - name: Build formabble scripts
        if: ${{ env.PREBUILD_SHO_EARLY_OUT != '1' }}
        shell: bash
        run: |
          if [[ -f build_sho/start.sho ]]; then
            echo "Using prebuilt scripts from repository"
            exit 0
          fi

          pushd shards
          ./bootstrap
          popd
          pushd formabble
          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DSKIP_HEAVY_INLINE=1
          cmake --build build --target shards
          cmake --build build --target fbl
          shards=`pwd`/build/shards
          fbl=`pwd`/build/fbl
          popd

          echo "Building prebuilt scripts"
          mkdir -p build_sho
          $shards build formabble/app/scripts/start.shs -o build_sho/start.sho
          $shards build formabble/app/scripts/domain.shs -o build_sho/domain.sho
          $shards build formabble/app/scripts/shared.shs -o build_sho/shared.sho

          echo "Compressing strings"
          if [[ -f shards/utils/compress-strings.shs ]]; then
            $fbl -r . --entry-point shards/utils/compress-strings.shs --early-exit
            mv shccstrings.hpp build_sho/shccstrings.hpp
          else
            echo "File shards/utils/compress-strings.shs does not exist"
            exit 1
          fi

      - name: Upload prebuilt scripts
        uses: actions/upload-artifact@v3
        with:
          name: build_sho
          path: build_sho
          if-no-files-found: error

  win64-release:
    if: ${{ needs.prebuild-sho.outputs.ENABLE_WIN64_RELEASE == 1 }}
    runs-on: windows-latest
    needs: prebuild-sho
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches
      - uses: "./.github/actions/checkout"
        with:
          rust-toolchain-suffix: "-msvc"
          github-token: ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }}

      - name: Build
        env:
          RUST_BACKTRACE: full
        shell: bash
        run: |
          pushd shards
          ./bootstrap
          mv ../build_sho/shccstrings.hpp shards/core/shccstrings.hpp
          popd
          pushd formabble
          cmake -Bbuild -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DFBL_PREBUILT_SCRIPTS=ON "-DFBL_PREBUILT_SCRIPTS_PATH=`pwd`/../build_sho" \
            "-DCMAKE_C_COMPILER:FILEPATH=C:\Program Files\LLVM\bin\clang.exe" \
            "-DCMAKE_CXX_COMPILER:FILEPATH=C:\Program Files\LLVM\bin\clang++.exe" \
            "-DRUST_DEFAULT_TARGET_PATH=C:\shards-rust-target" \
            -DSHARDS_MIN_DEBUG_INFO=ON \
            -DSHARDS_DEFAULT_STDOUT_LOG_LEVEL=SPDLOG_LEVEL_INFO \
            -DSHARDS_DEFAULT_FILE_LOG_LEVEL=SPDLOG_LEVEL_DEBUG

          cmake --build build --target fbl

      - uses: actions/upload-artifact@v3
        with:
          name: formabble-win64
          path: |
            formabble/build/fbl.exe
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        with:
          name: formabble-win64-pdb
          path: |
            formabble/build/fbl.pdb
          if-no-files-found: error

      - name: Package Release
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: pushd build; 7z a ../formabble-win64.zip fbl.exe

      - name: Publish release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: formabble-win64.zip
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: ${{ env.IS_PRE_RELEASE }}

  macosx-arm64-release:
    if: ${{ needs.prebuild-sho.outputs.ENABLE_MACOSX_ARM64_RELEASE == 1 }}
    runs-on: macos-latest # should be M1/ARM64
    needs: prebuild-sho
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches
      - uses: "./.github/actions/checkout"
        with:
          github-token: ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }}
          apple-signing-cert: ${{ secrets.APPLE_SIGNING_CERT }}

      - name: Build
        shell: bash
        run: |
          pushd shards
          ./bootstrap
          mv ../build_sho/shccstrings.hpp shards/core/shccstrings.hpp
          popd
          pushd formabble
          cmake -Bbuild -GXcode -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DFBL_PREBUILT_SCRIPTS=ON -DFBL_PREBUILT_SCRIPTS_PATH=`pwd`/../build_sho \
            -DCMAKE_XCODE_ATTRIBUTE_DEBUG_INFORMATION_FORMAT=dwarf-with-dsym \
            -DXCODE_SDK=macosx
          cmake --build build --target fbl --config RelWithDebInfo -- -arch arm64 -sdk macosx CODE_SIGN_IDENTITY="7Q267P2WJ3" CODE_SIGNING_ALLOWED=NO

      - uses: actions/upload-artifact@v3
        with:
          name: formabble-macosx-arm64-unsigned
          path: |
            formabble/build/RelWithDebInfo/Formabble.app/
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        with:
          name: formabble-macosx-arm64-dsym
          path: |
            formabble/build/RelWithDebInfo/Formabble.app.dSYM/

      # - name: Build
      #   shell: bash
      #   run: |
      #     pushd formabble
      #     sudo codesign --force -s 7Q267P2WJ3 --timestamp --options runtime build/RelWithDebInfo/Formabble.app
      #     pushd build/RelWithDebInfo
      #     zip -r ../../Formabble.zip Formabble.app
      #     popd
      #     xcrun notarytool submit Formabble.zip --keychain-profile "Fragcolor macOS" --wait

      # - name: Package Release
      #   if: startsWith(github.ref, 'refs/tags/')
      #   shell: bash
      #   run: pushd build/RelWithDebInfo; 7z a ../../formabble-macosx-arm64.zip Formabble.app

      # - name: Publish release
      #   if: startsWith(github.ref, 'refs/tags/')
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: formabble-macosx-arm64.zip
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     prerelease: ${{ env.IS_PRE_RELEASE }}

  macosx-x86-release:
    if: ${{ needs.prebuild-sho.outputs.ENABLE_MACOSX_X86_RELEASE == 1 }}
    runs-on: macos-latest
    needs: prebuild-sho
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches
      - uses: "./.github/actions/checkout"
        with:
          github-token: ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }}
          apple-signing-cert: ${{ secrets.APPLE_SIGNING_CERT }}

      - name: Set up dependencies
        shell: bash
        run: |
          rustup +$RUSTUP_TOOLCHAIN target add x86_64-apple-darwin

      - name: Build
        shell: bash
        run: |
          sudo xcode-select --switch /Applications/Xcode_15.4.app
          pushd shards
          ./bootstrap
          mv ../build_sho/shccstrings.hpp shards/core/shccstrings.hpp
          popd
          pushd formabble
          cmake -Bbuild -GXcode -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DFBL_PREBUILT_SCRIPTS=ON -DFBL_PREBUILT_SCRIPTS_PATH=`pwd`/../build_sho \
            -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_SYSTEM_PROCESSOR=x86_64 -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DBOOST_CONTEXT_ABI=sysv -DBOOST_CONTEXT_ARCHITECTURE=x86_64 \
            -DRUST_CARGO_TARGET=x86_64-apple-darwin \
            -DXCODE_SDK=macosx
          cmake --build build --target fbl --config RelWithDebInfo -- -arch x86_64 -sdk macosx CODE_SIGN_IDENTITY="7Q267P2WJ3" CODE_SIGNING_ALLOWED=NO

      - uses: actions/upload-artifact@v3
        with:
          name: formabble-macosx-x86-unsigned
          path: |
            formabble/build/RelWithDebInfo/Formabble.app/
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        with:
          name: formabble-macosx-x86-dsym
          path: |
            formabble/build/RelWithDebInfo/Formabble.app.dSYM/
          if-no-files-found: error

  ios-release:
    if: ${{ needs.prebuild-sho.outputs.ENABLE_IOS_RELEASE == 1 }}
    runs-on: [self-hosted, macOS, ARM64]
    needs: prebuild-sho
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches
      - uses: "./.github/actions/checkout"
        with:
          github-token: ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }}
          apple-signing-cert: ${{ secrets.APPLE_SIGNING_CERT }}

      - name: Set up dependencies
        shell: bash
        run: |
          rustup +$RUSTUP_TOOLCHAIN target add aarch64-apple-ios
          rustup +$RUSTUP_TOOLCHAIN component add rust-src

      - name: Build
        shell: bash
        run: |
          pushd shards
          ./bootstrap
          mv ../build_sho/shccstrings.hpp shards/core/shccstrings.hpp
          popd
          pushd formabble
          cmake -Bbuild -GXcode -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DFBL_PREBUILT_SCRIPTS=ON -DFBL_PREBUILT_SCRIPTS_PATH=`pwd`/../build_sho \
            -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_SYSTEM_PROCESSOR=arm64 \
            -DXCODE_SDK=iphoneos \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=16.3 \
            -DCMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM=97G32G3972
            "-DCMAKE_XCODE_ATTRIBUTE_PROVISIONING_PROFILE=550e0747-f4ab-4580-8aa4-b96b3dc0e9cc"
          xcodebuild -project build/fbl.xcodeproj -sdk iphoneos -arch arm64 -scheme fbl -configuration RelWithDebInfo archive -archivePath Formabble.xcarchive CODE_SIGN_IDENTITY="7Q267P2WJ3"
          xcodebuild -exportArchive -archivePath Formabble.xcarchive -exportPath Formabble.ipa -exportOptionsPlist ../ios-export.plist

          find build/RelWithDebInfo

      - uses: actions/upload-artifact@v3
        with:
          name: formabble-ios-arm64
          path: |
            formabble/Formabble.ipa
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        with:
          name: formabble-ios-arm64-dsym
          path: |
            formabble/build/RelWithDebInfo/Formabble.app.dSYM/

  wasm-release:
    if: ${{ needs.prebuild-sho.outputs.ENABLE_WASM_RELEASE == 1 }}
    runs-on: ubuntu-latest
    needs: prebuild-sho
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches
      - uses: "./.github/actions/checkout"
        with:
          github-token: ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }}

      - name: Checkout emsdk
        uses: actions/checkout@v3
        with:
          repository: emscripten-core/emsdk
          path: emsdk
          fetch-depth: 1

      - name: Set up dependencies
        shell: bash
        run: |
          rustup +$RUSTUP_TOOLCHAIN target add wasm32-unknown-emscripten
          rustup +$RUSTUP_TOOLCHAIN component add rust-src
          pushd emsdk
          ./emsdk install 3.1.59
          ./emsdk activate 3.1.59

      - name: Build
        shell: bash
        run: |
          source emsdk/emsdk_env.sh
          pushd shards
          ./bootstrap
          mv ../build_sho/shccstrings.hpp shards/core/shccstrings.hpp
          popd
          pushd formabble
          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release \
            -DFBL_PREBUILT_SCRIPTS=ON -DFBL_PREBUILT_SCRIPTS_PATH=`pwd`/../build_sho \
            -DSKIP_HEAVY_INLINE=1 -DUSE_LTO=0 \
            -DEMSCRIPTEN_PTHREADS=ON \
            -DCMAKE_TOOLCHAIN_FILE=$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake
          cmake --build build --target fbl

          mkdir -p dist
          cp app/web/favicon.svg dist/favicon.svg
          cp app/web/fbl-loader.js dist/fbl-loader.js
          cp app/web/index.html dist/index.html
          cp build/fbl.js dist/fbl.js
          cp build/fbl.wasm dist/fbl.wasm

          # Store unmodified version for zipping
          cp -r dist dist-zip

          # Post process the build files to be unique
          VERSION_ID=$(git rev-parse --short $GITHUB_SHA)
          echo "Version ID: $VERSION_ID"
          node ../scripts/fixup_build.js dist $VERSION_ID

          export CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          export CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}
          npx -y wrangler r2 object put formabble-releases/fbl-${VERSION_ID}.wasm --file=dist/fbl-${VERSION_ID}.wasm

          DIST=`pwd`/dist

          echo "Updating hosted web release"
          mkdir -p ~/.ssh
          echo "${{ secrets.WEB_DEPLOY_KEY }}" > ~/.ssh/id_ecdsa
          chmod 600 ~/.ssh/id_ecdsa
          # ssh-keyscan github.com >> ~/.ssh/known_hosts

          git clone git@github.com:formabble/web-release.git

          git config --global user.email "runner@github.com"
          git config --global user.name "Github Actions"

          pushd web-release
          cp -v $DIST/index.html ./
          cp -v $DIST/fbl-*.js ./versions/
          git add -u
          git add ./versions
          git commit -m "Update to $VERSION_ID"
          git push
          popd

      - id: release
        uses: "./.github/actions/make-release-zip"
        with:
          zip-root: formabble/dist-zip
          in-files: "'fbl.js', 'fbl.wasm', 'fbl-loader.js', 'index.html', 'style.css', 'favicon.svg'"
          out-name: formabble-wasm
          github-token:  ${{ secrets.GITHUB_TOKEN }}

  android-release:
    if: ${{ needs.prebuild-sho.outputs.ENABLE_ANDROID_RELEASE == 1 }}
    runs-on: ubuntu-latest
    needs: prebuild-sho
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches
      - uses: "./.github/actions/checkout"
        with:
          github-token: ${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }}

      - name: Set up dependencies
        shell: bash
        run: |
          rustup +$RUSTUP_TOOLCHAIN target add aarch64-linux-android
          rustup +$RUSTUP_TOOLCHAIN component add rust-src

          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "build-tools;33.0.2"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-33"


      - name: Build
        shell: bash
        run: |
          pushd shards
          ./bootstrap
          mv ../build_sho/shccstrings.hpp shards/core/shccstrings.hpp
          popd
          pushd formabble

          ANDROID_TOOLCHAIN=/usr/local/lib/android/sdk/ndk/26.3.11579264
          ls -la $ANDROID_TOOLCHAIN/toolchains/llvm/prebuilt

          export LIBCLANG_PATH=$ANDROID_TOOLCHAIN/toolchains/llvm/prebuilt/linux-x86_64/bin
          export CLANG_PATH=$ANDROID_TOOLCHAIN/toolchains/llvm/prebuilt/linux-x86_64/bin/clang

          find $ANDROID_TOOLCHAIN/toolchains/llvm/prebuilt/linux-x86_64/lib64

          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DFBL_PREBUILT_SCRIPTS=ON -DFBL_PREBUILT_SCRIPTS_PATH=`pwd`/../build_sho \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-33 \
            -DANDROID_SDK_ROOT=$ANDROID_SDK_ROOT \
            -DANDROID_TOOLS_VERSION=34.0.0 \
            -DJAVA_HOME=$JAVA_HOME_11_X64 \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_TOOLCHAIN/build/cmake/android.toolchain.cmake
          cmake --build build --target fbl

      - id: release
        uses: "./.github/actions/make-release-zip"
        with:
          in-files: "'fbl.apk'"
          out-name: formabble-wasm
          github-token:  ${{ secrets.GITHUB_TOKEN }}
